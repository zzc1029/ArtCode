; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--list --debug -c --asm --interleave --gnu -o.\obj\power_out.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\obj\power_out.d --cpu=Cortex-M0 --apcs=interwork -Otime --diag_suppress=9931 -I.\src\pt -I.\src -I.\config -I.\RTE\CMSIS\BF7006AM64 -I.\RTE\Device\BF7006AM64 -I.\RTE\SEGGER -I.\RTE\Startup\BF7006AM64 -I.\RTE\_b40 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.8.0\CMSIS\Core\Include -IC:\Keil_v5\ARM\PACK\BYD\BYDMicro_DFP\1.1.0\Device\Include\BF7006AMxx -D__UVISION_VERSION=536 -D_RTE_ -D_RTE_ --omf_browse=.\obj\power_out.crf src\power_out.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  GetCurAndErr PROC
;;;140    
;;;141    void GetCurAndErr(uint16_t index, uint16_t adc)
000000  2234              MOVS     r2,#0x34
;;;142    {
;;;143    		PoutControl *p = PoutS + index;
000002  4bba              LDR      r3,|L1.748|
000004  b430              PUSH     {r4,r5}               ;142
000006  4342              MULS     r2,r0,r2
000008  18d2              ADDS     r2,r2,r3
;;;144    	
;;;145        p->cur_100ma = (p->cur_100ma >> 3) + ((((adc * p->magic) >> 22) * 7) >> 3); //a = 0.875	/*一阶低通滤波算法，具体叙述见DOC文档*/
00000a  8c53              LDRH     r3,[r2,#0x22]
00000c  08dc              LSRS     r4,r3,#3
00000e  68d3              LDR      r3,[r2,#0xc]
000010  434b              MULS     r3,r1,r3
000012  0d99              LSRS     r1,r3,#22
000014  00cb              LSLS     r3,r1,#3
000016  1a59              SUBS     r1,r3,r1
000018  2334              MOVS     r3,#0x34              ;143
00001a  4358              MULS     r0,r3,r0              ;143
00001c  08c9              LSRS     r1,r1,#3
00001e  4bb3              LDR      r3,|L1.748|
000020  1861              ADDS     r1,r4,r1
000022  8451              STRH     r1,[r2,#0x22]
000024  18c0              ADDS     r0,r0,r3              ;143
;;;146    	
;;;147    		if(p->cur_100ma > p->sc_threshold)
000026  8cd4              LDRH     r4,[r2,#0x26]
;;;148    		{
;;;149    				if((int)(systick_ms - p->sc_time) >= 0)
000028  4bb1              LDR      r3,|L1.752|
00002a  3020              ADDS     r0,r0,#0x20
00002c  42a1              CMP      r1,r4                 ;147
00002e  d907              BLS      |L1.64|
000030  69d1              LDR      r1,[r2,#0x1c]
000032  681a              LDR      r2,[r3,#0]  ; systick_ms
000034  1a51              SUBS     r1,r2,r1
000036  d401              BMI      |L1.60|
;;;150    					p->rt_diag = 2;  //short 
000038  2102              MOVS     r1,#2
00003a  7301              STRB     r1,[r0,#0xc]
                  |L1.60|
;;;151    		}
;;;152        else if(p->cur_100ma > p->oc_threshold)
;;;153        {
;;;154    				if(p->rt_diag == 2)
;;;155    					p->rt_diag = 0;
;;;156    				
;;;157    				if((int)(systick_ms - p->oc_time) >= 0)
;;;158    					p->rt_diag = 1;  //over load
;;;159    								
;;;160    				p->sc_time = systick_ms + p->sct_threshold;
;;;161        }
;;;162        else
;;;163        {
;;;164    				p->oc_time = systick_ms + p->oct_threshold;
;;;165    				p->sc_time = systick_ms + p->sct_threshold;
;;;166            p->rt_diag = 0;  //ok
;;;167        }
;;;168    }
00003c  bc30              POP      {r4,r5}
00003e  4770              BX       lr
                  |L1.64|
000040  8c95              LDRH     r5,[r2,#0x24]         ;152
000042  2400              MOVS     r4,#0                 ;152
000044  42a9              CMP      r1,r5                 ;152
000046  d90f              BLS      |L1.104|
000048  7b01              LDRB     r1,[r0,#0xc]          ;154
00004a  2902              CMP      r1,#2                 ;154
00004c  d100              BNE      |L1.80|
00004e  7304              STRB     r4,[r0,#0xc]          ;155
                  |L1.80|
000050  6951              LDR      r1,[r2,#0x14]         ;157
000052  681c              LDR      r4,[r3,#0]            ;157  ; systick_ms
000054  1a61              SUBS     r1,r4,r1              ;157
000056  d401              BMI      |L1.92|
000058  2101              MOVS     r1,#1                 ;158
00005a  7301              STRB     r1,[r0,#0xc]          ;158
                  |L1.92|
00005c  8c10              LDRH     r0,[r2,#0x20]         ;160
00005e  6819              LDR      r1,[r3,#0]            ;160  ; systick_ms
000060  1840              ADDS     r0,r0,r1              ;160
000062  61d0              STR      r0,[r2,#0x1c]         ;160
000064  bc30              POP      {r4,r5}
000066  4770              BX       lr
                  |L1.104|
000068  8b11              LDRH     r1,[r2,#0x18]         ;164
00006a  681d              LDR      r5,[r3,#0]            ;164  ; systick_ms
00006c  1949              ADDS     r1,r1,r5              ;164
00006e  6151              STR      r1,[r2,#0x14]         ;165
000070  8c11              LDRH     r1,[r2,#0x20]         ;165
000072  681b              LDR      r3,[r3,#0]            ;165  ; systick_ms
000074  18c9              ADDS     r1,r1,r3              ;165
000076  61d1              STR      r1,[r2,#0x1c]         ;166
000078  7304              STRB     r4,[r0,#0xc]          ;166
00007a  bc30              POP      {r4,r5}
00007c  4770              BX       lr
;;;169    
                          ENDP

                  protothread_out PROC
;;;170    //output control
;;;171    static int protothread_out(struct pt *pt, PoutControl *p)
00007e  b5f8              PUSH     {r3-r7,lr}
;;;172    {
000080  460d              MOV      r5,r1
000082  4606              MOV      r6,r0
;;;173        PT_BEGIN(pt);
;;;174    	
;;;175        while(1)
;;;176        {
;;;177            switch(p->status)
000084  462c              MOV      r4,r5
000086  6831              LDR      r1,[r6,#0]            ;173
000088  2001              MOVS     r0,#1                 ;173
00008a  2700              MOVS     r7,#0                 ;173
00008c  3420              ADDS     r4,r4,#0x20
00008e  2900              CMP      r1,#0                 ;173
000090  d000              BEQ      |L1.148|
000092  4708              BX       r1                    ;173
                  |L1.148|
000094  7b60              LDRB     r0,[r4,#0xd]
000096  2805              CMP      r0,#5
000098  d27e              BCS      |L1.408|
00009a  0001              MOVS     r1,r0
00009c  4479              ADD      r1,r1,pc
00009e  7909              LDRB     r1,[r1,#4]
0000a0  1849              ADDS     r1,r1,r1
0000a2  448f              ADD      pc,pc,r1
0000a4  020f485c          DCB      0x02,0x0f,0x48,0x5c
0000a8  9200              DCB      0x92,0x00
0000aa  72e7              STRB     r7,[r4,#0xb]
;;;178            {
;;;179                case PS_Off: //off
;;;180    								ClearDiag(p);
;;;181                    GPIO_PTD(p->gpio_periph) &= ~(p->pin);  //after closed have 1ms err pluse
0000ac  68a8              LDR      r0,[r5,#8]
0000ae  6801              LDR      r1,[r0,#0]
0000b0  7a22              LDRB     r2,[r4,#8]
0000b2  4391              BICS     r1,r1,r2
0000b4  6001              STR      r1,[r0,#0]
                  LC_LABEL182
;;;182                    PT_WAIT_UNTIL(pt, (p->cmd > 0)); //|| GetCurAndErr(p));
0000b6  488f              LDR      r0,|L1.756|
0000b8  6030              STR      r0,[r6,#0]
0000ba  7aa0              LDRB     r0,[r4,#0xa]
0000bc  2800              CMP      r0,#0
0000be  d04d              BEQ      |L1.348|
                  |L1.192|
;;;183                    p->status = PS_Start;
0000c0  2001              MOVS     r0,#1
;;;184                    break;
0000c2  e055              B        |L1.368|
0000c4  72e7              STRB     r7,[r4,#0xb]
;;;185    
;;;186                case PS_Start: //start
;;;187    								ClearDiag(p);
;;;188                    if(p->pwmable)
0000c6  7be0              LDRB     r0,[r4,#0xf]
0000c8  2800              CMP      r0,#0
0000ca  d032              BEQ      |L1.306|
;;;189                    {
;;;190                        p->time = pwmtime;
0000cc  488a              LDR      r0,|L1.760|
0000ce  6800              LDR      r0,[r0,#0]  ; pwmtime
;;;191                        for(p->pwmi = p->pwmstart; p->pwmi < p->pwmend; p->pwmi ++)
0000d0  6128              STR      r0,[r5,#0x10]
0000d2  7c60              LDRB     r0,[r4,#0x11]
0000d4  74e0              STRB     r0,[r4,#0x13]
0000d6  7ca1              LDRB     r1,[r4,#0x12]
0000d8  4288              CMP      r0,r1
0000da  d22a              BCS      |L1.306|
                  |L1.220|
;;;192                        {
;;;193                            p->time += p->pwmi;
0000dc  7ce1              LDRB     r1,[r4,#0x13]
0000de  6928              LDR      r0,[r5,#0x10]
0000e0  1840              ADDS     r0,r0,r1
;;;194                            GPIO_PTD(p->gpio_periph) |= p->pin;
0000e2  6128              STR      r0,[r5,#0x10]
0000e4  68a8              LDR      r0,[r5,#8]
0000e6  6801              LDR      r1,[r0,#0]
0000e8  7a22              LDRB     r2,[r4,#8]
0000ea  4311              ORRS     r1,r1,r2
0000ec  6001              STR      r1,[r0,#0]
                  LC_LABEL196
;;;195    
;;;196                            PT_WAIT_UNTIL(pt, ((int)(pwmtime - p->time) >= 0));
0000ee  4883              LDR      r0,|L1.764|
0000f0  6030              STR      r0,[r6,#0]
0000f2  4981              LDR      r1,|L1.760|
0000f4  6928              LDR      r0,[r5,#0x10]
0000f6  6809              LDR      r1,[r1,#0]  ; pwmtime
0000f8  1a09              SUBS     r1,r1,r0
0000fa  d47a              BMI      |L1.498|
;;;197    											
;;;198    												// 100*0.1ms = 10ms check current
;;;199    												// if(GetShortDiag(p))
;;;200    												// {
;;;201    												// 		p->status = PS_Err;
;;;202    												//     goto SwitchEnd;
;;;203    												// }
;;;204    												
;;;205                            p->time += p->pwmend - p->pwmi;
0000fc  7ca1              LDRB     r1,[r4,#0x12]
0000fe  7ce2              LDRB     r2,[r4,#0x13]
000100  1a89              SUBS     r1,r1,r2
000102  1808              ADDS     r0,r1,r0
;;;206                            GPIO_PTD(p->gpio_periph) &= ~(p->pin);
000104  6128              STR      r0,[r5,#0x10]
000106  68a8              LDR      r0,[r5,#8]
000108  6801              LDR      r1,[r0,#0]
00010a  7a22              LDRB     r2,[r4,#8]
00010c  4391              BICS     r1,r1,r2
00010e  6001              STR      r1,[r0,#0]
                  LC_LABEL208
;;;207    
;;;208                            PT_WAIT_UNTIL(pt, ((int)(pwmtime - p->time) >= 0));
000110  487b              LDR      r0,|L1.768|
000112  6030              STR      r0,[r6,#0]
000114  4878              LDR      r0,|L1.760|
000116  6929              LDR      r1,[r5,#0x10]
000118  6800              LDR      r0,[r0,#0]  ; pwmtime
00011a  1a40              SUBS     r0,r0,r1
00011c  d469              BMI      |L1.498|
;;;209    
;;;210                            if(p->cmd == 0)
00011e  7aa0              LDRB     r0,[r4,#0xa]
000120  2800              CMP      r0,#0
000122  d06e              BEQ      |L1.514|
000124  7ce0              LDRB     r0,[r4,#0x13]         ;191
000126  1c40              ADDS     r0,r0,#1              ;191
000128  b2c0              UXTB     r0,r0                 ;191
00012a  74e0              STRB     r0,[r4,#0x13]         ;191
00012c  7ca1              LDRB     r1,[r4,#0x12]         ;191
00012e  4288              CMP      r0,r1                 ;191
000130  d3d4              BCC      |L1.220|
                  |L1.306|
;;;211                            {
;;;212    														p->status = PS_Off;
;;;213                                goto SwitchEnd;
;;;214                            }
;;;215                        }
;;;216    										p->status = PS_On;
;;;217                    }
;;;218    								else
;;;219    								{										
;;;220    										p->status = PS_On;										
000132  2002              MOVS     r0,#2
000134  e01c              B        |L1.368|
;;;221    								}
;;;222                    break;
;;;223    							
;;;224                case PS_On: //on	
;;;225    																
;;;226    								GPIO_PTD(p->gpio_periph) |= p->pin;
000136  68a8              LDR      r0,[r5,#8]
000138  6801              LDR      r1,[r0,#0]
00013a  7a22              LDRB     r2,[r4,#8]
00013c  4311              ORRS     r1,r1,r2
00013e  6001              STR      r1,[r0,#0]
                  LC_LABEL227
;;;227    								PT_WAIT_UNTIL(pt, (p->cmd == 0) || (GetDiag(p)));
000140  4870              LDR      r0,|L1.772|
000142  6030              STR      r0,[r6,#0]
000144  7aa0              LDRB     r0,[r4,#0xa]
000146  2800              CMP      r0,#0
000148  d012              BEQ      |L1.368|
00014a  7b20              LDRB     r0,[r4,#0xc]
00014c  2800              CMP      r0,#0
00014e  d003              BEQ      |L1.344|
000150  2002              MOVS     r0,#2
000152  72e0              STRB     r0,[r4,#0xb]
;;;228    								//-----------------------个别订单因启动电流大，使用启动1S内不判断过载和短路-------------
;;;229    							//	p->time = systick_ms + 1000;
;;;230    								//PT_WAIT_UNTIL(pt, (p->cmd == 0) || ((GetDiag(p)) && ((int)(systick_ms - p->time) > 0)));
;;;231    								//--------------------------------------------------------------------------------------
;;;232    								p->status = (p->cmd == 0) ? PS_Off : PS_Err;
000154  2003              MOVS     r0,#3
000156  e00b              B        |L1.368|
                  |L1.344|
000158  72e7              STRB     r7,[r4,#0xb]
00015a  2000              MOVS     r0,#0                 ;227
                  |L1.348|
;;;233    								
;;;234                    break;
;;;235    
;;;236                case PS_Err: //err
;;;237                    GPIO_PTD(p->gpio_periph) &= ~(p->pin);
;;;238                    if(p->errcount >= MAX_RETRY)
;;;239                    {									
;;;240                        p->status = PS_Idle;
;;;241                    }
;;;242                    else
;;;243                    {
;;;244                        p->errcount++;
;;;245    
;;;246                        p->time = systick_ms + 9999;
;;;247                        PT_WAIT_UNTIL(pt, ((int)(systick_ms - p->time) >= 0) || (p->cmd == 0));
;;;248    
;;;249                        FR_OFF();
;;;250                        p->time = systick_ms + 2;
;;;251                        PT_WAIT_UNTIL(pt, ((int)(systick_ms - p->time) >= 0));
;;;252                        FR_ON();
;;;253    
;;;254                        p->status = (p->cmd == 0) ? PS_Off : PS_Start;
;;;255                    }
;;;256                    break;
;;;257    						case PS_Idle: //when failed 3 time, then go in idle state
;;;258    								PT_WAIT_UNTIL(pt, p->errcount < MAX_RETRY);
;;;259    							
;;;260    								FR_OFF();
;;;261    								p->time = systick_ms + 2;
;;;262    								PT_WAIT_UNTIL(pt, ((int)(systick_ms - p->time) >= 0));
;;;263    								FR_ON();
;;;264    
;;;265    								p->status = PS_Off;
;;;266    							break;
;;;267                default:
;;;268                    p->status = PS_Off;
;;;269                    break;
;;;270    
;;;271            }
;;;272    SwitchEnd:
;;;273            PT_YIELD(pt);
;;;274            /* And we loop. */
;;;275        }
;;;276        PT_INFINITE_LOOP_END(pt);
;;;277    }
00015c  bdf8              POP      {r3-r7,pc}
00015e  68a8              LDR      r0,[r5,#8]            ;237
000160  6801              LDR      r1,[r0,#0]            ;237
000162  7a22              LDRB     r2,[r4,#8]            ;237
000164  4391              BICS     r1,r1,r2              ;237
000166  6001              STR      r1,[r0,#0]            ;237
000168  7ba0              LDRB     r0,[r4,#0xe]          ;238
00016a  2803              CMP      r0,#3                 ;238
00016c  d302              BCC      |L1.372|
00016e  2004              MOVS     r0,#4                 ;240
                  |L1.368|
000170  7360              STRB     r0,[r4,#0xd]          ;216
000172  e047              B        |L1.516|
                  |L1.372|
000174  1c40              ADDS     r0,r0,#1              ;216
000176  73a0              STRB     r0,[r4,#0xe]          ;244
000178  485d              LDR      r0,|L1.752|
00017a  6800              LDR      r0,[r0,#0]            ;246  ; systick_ms
00017c  4962              LDR      r1,|L1.776|
00017e  1840              ADDS     r0,r0,r1              ;246
000180  6128              STR      r0,[r5,#0x10]         ;246
                  LC_LABEL247
000182  4862              LDR      r0,|L1.780|
000184  6030              STR      r0,[r6,#0]            ;247
000186  485a              LDR      r0,|L1.752|
000188  6929              LDR      r1,[r5,#0x10]         ;247
00018a  6800              LDR      r0,[r0,#0]            ;247  ; systick_ms
00018c  1a40              SUBS     r0,r0,r1              ;247
00018e  d502              BPL      |L1.406|
000190  7aa0              LDRB     r0,[r4,#0xa]          ;247
000192  2800              CMP      r0,#0                 ;247
000194  d12d              BNE      |L1.498|
                  |L1.406|
000196  e000              B        |L1.410|
                  |L1.408|
000198  e033              B        |L1.514|
                  |L1.410|
00019a  2101              MOVS     r1,#1                 ;249
00019c  485c              LDR      r0,|L1.784|
00019e  f7fffffe          BL       gpio_bit_reset
0001a2  4853              LDR      r0,|L1.752|
0001a4  6800              LDR      r0,[r0,#0]            ;250  ; systick_ms
0001a6  1c80              ADDS     r0,r0,#2              ;250
0001a8  6128              STR      r0,[r5,#0x10]         ;250
                  LC_LABEL251
0001aa  485a              LDR      r0,|L1.788|
0001ac  6030              STR      r0,[r6,#0]            ;251
0001ae  4850              LDR      r0,|L1.752|
0001b0  6929              LDR      r1,[r5,#0x10]         ;251
0001b2  6800              LDR      r0,[r0,#0]            ;251  ; systick_ms
0001b4  1a40              SUBS     r0,r0,r1              ;251
0001b6  d41c              BMI      |L1.498|
0001b8  2101              MOVS     r1,#1                 ;252
0001ba  4855              LDR      r0,|L1.784|
0001bc  f7fffffe          BL       gpio_bit_set
0001c0  7aa0              LDRB     r0,[r4,#0xa]          ;254
0001c2  2800              CMP      r0,#0                 ;254
0001c4  d000              BEQ      |L1.456|
0001c6  e77b              B        |L1.192|
                  |L1.456|
0001c8  e7d2              B        |L1.368|
                  LC_LABEL258
0001ca  4853              LDR      r0,|L1.792|
0001cc  6030              STR      r0,[r6,#0]            ;258
0001ce  7ba0              LDRB     r0,[r4,#0xe]          ;258
0001d0  2803              CMP      r0,#3                 ;258
0001d2  d20e              BCS      |L1.498|
0001d4  2101              MOVS     r1,#1                 ;260
0001d6  484e              LDR      r0,|L1.784|
0001d8  f7fffffe          BL       gpio_bit_reset
0001dc  4844              LDR      r0,|L1.752|
0001de  6800              LDR      r0,[r0,#0]            ;261  ; systick_ms
0001e0  1c80              ADDS     r0,r0,#2              ;261
0001e2  6128              STR      r0,[r5,#0x10]         ;261
                  LC_LABEL262
0001e4  484d              LDR      r0,|L1.796|
0001e6  6030              STR      r0,[r6,#0]            ;262
0001e8  4841              LDR      r0,|L1.752|
0001ea  6929              LDR      r1,[r5,#0x10]         ;262
0001ec  6800              LDR      r0,[r0,#0]            ;262  ; systick_ms
0001ee  1a40              SUBS     r0,r0,r1              ;262
0001f0  d501              BPL      |L1.502|
                  |L1.498|
0001f2  2000              MOVS     r0,#0                 ;262
0001f4  bdf8              POP      {r3-r7,pc}
                  |L1.502|
0001f6  2101              MOVS     r1,#1                 ;263
0001f8  4845              LDR      r0,|L1.784|
0001fa  f7fffffe          BL       gpio_bit_set
0001fe  7367              STRB     r7,[r4,#0xd]          ;265
000200  e000              B        |L1.516|
                  |L1.514|
000202  7367              STRB     r7,[r4,#0xd]          ;268
                  |L1.516|
000204  2000              MOVS     r0,#0                 ;273
                  LC_LABEL273
000206  4946              LDR      r1,|L1.800|
000208  6031              STR      r1,[r6,#0]            ;273
00020a  2800              CMP      r0,#0                 ;273
00020c  d000              BEQ      |L1.528|
00020e  e741              B        |L1.148|
                  |L1.528|
000210  2001              MOVS     r0,#1                 ;273
000212  bdf8              POP      {r3-r7,pc}
;;;278    
                          ENDP

                  power_out_init PROC
;;;280    
;;;281    static void power_out_init()
000214  b5f8              PUSH     {r3-r7,lr}
;;;282    {
;;;283        int i;
;;;284        FR_ON();
000216  2101              MOVS     r1,#1
000218  483d              LDR      r0,|L1.784|
00021a  f7fffffe          BL       gpio_bit_set
;;;285        for(i = 0; i < POUT_COUNT; i++)
00021e  2500              MOVS     r5,#0
;;;286        {
;;;287            PT_INIT(pts + i);
;;;288    			
;;;289    				switch(MOD_ADDR)
;;;290    				{
;;;291    					case ADDR1_MOD:						
;;;292    							#ifdef  NORMOL_OUTS_MOD1	
;;;293    								if(strstr(NORMOL_OUTS_MOD1, PoutS[i].name))
000220  4e32              LDR      r6,|L1.748|
000222  462f              MOV      r7,r5                 ;285
                  |L1.548|
000224  483f              LDR      r0,|L1.804|
000226  00a9              LSLS     r1,r5,#2              ;287
000228  5047              STR      r7,[r0,r1]            ;287
00022a  483f              LDR      r0,|L1.808|
00022c  7800              LDRB     r0,[r0,#0]            ;289  ; mod_addr
00022e  2801              CMP      r0,#1                 ;289
000230  d119              BNE      |L1.614|
000232  2034              MOVS     r0,#0x34
000234  4368              MULS     r0,r5,r0
000236  1984              ADDS     r4,r0,r6
000238  4621              MOV      r1,r4
00023a  a03c              ADR      r0,|L1.812|
00023c  f7fffffe          BL       strstr
000240  2800              CMP      r0,#0
000242  d002              BEQ      |L1.586|
;;;294    								{
;;;295    										PoutS[i].cmd = 1;
000244  2101              MOVS     r1,#1
000246  202a              MOVS     r0,#0x2a
000248  5501              STRB     r1,[r0,r4]
                  |L1.586|
;;;296    								}
;;;297    							#endif
;;;298    											
;;;299    							#ifdef WIPER_OUTS
;;;300    								if(strstr(WIPER_OUTS, PoutS[i].name))
00024a  4621              MOV      r1,r4
00024c  a039              ADR      r0,|L1.820|
00024e  f7fffffe          BL       strstr
000252  2800              CMP      r0,#0
000254  d007              BEQ      |L1.614|
;;;301    								{
;;;302    										PoutS[i].pwmstart = 40;  //20*60*0.1 = 120ms 
000256  4620              MOV      r0,r4
000258  2128              MOVS     r1,#0x28
00025a  3020              ADDS     r0,r0,#0x20
00025c  7441              STRB     r1,[r0,#0x11]
;;;303    										PoutS[i].pwmend = 60;
00025e  213c              MOVS     r1,#0x3c
000260  7481              STRB     r1,[r0,#0x12]
;;;304    										PoutS[i].oc_threshold = PoutS[i].sc_threshold;
000262  8ce0              LDRH     r0,[r4,#0x26]
000264  84a0              STRH     r0,[r4,#0x24]
                  |L1.614|
000266  1c6d              ADDS     r5,r5,#1
000268  2d0f              CMP      r5,#0xf               ;285
00026a  dbdb              BLT      |L1.548|
;;;305    								}
;;;306    							#endif					
;;;307    							break;
;;;308    					case ADDR2_MOD:						
;;;309    							#ifdef  NORMOL_OUTS_MOD2	
;;;310    								if(strstr(NORMOL_OUTS_MOD2, PoutS[i].name))
;;;311    								{
;;;312    										PoutS[i].cmd = 1;
;;;313    								}
;;;314    							#endif
;;;315    							#if ORDER_VERSION == 220102
;;;316    								if(strstr("A01", PoutS[i].name))
;;;317    								{
;;;318    										PoutS[i].pwmstart = 0;
;;;319    										PoutS[i].pwmend = 141;
;;;320    										PoutS[i].oc_threshold = PoutS[i].sc_threshold = 1000;
;;;321    								}
;;;322    							#endif	
;;;323    							break;
;;;324    					case ADDR3_MOD:				
;;;325    							#ifdef  NORMOL_OUTS_MOD3			
;;;326    								if(strstr(NORMOL_OUTS_MOD3, PoutS[i].name))
;;;327    								{
;;;328    										PoutS[i].cmd = 1;
;;;329    								}
;;;330    							#endif
;;;331    							
;;;332    							#if ORDER_VERSION == 211101
;;;333    								if(strstr("A01", PoutS[i].name))
;;;334    								{
;;;335    										PoutS[i].pwmstart = 15;
;;;336    										PoutS[i].pwmend = 58;
;;;337    										PoutS[i].pwmable = 1;
;;;338    										PoutS[i].pwmfixed = 1;
;;;339    								}							
;;;340    							#endif
;;;341    					
;;;342    							#if ORDER_VERSION == 220102
;;;343    								if(strstr("A01", PoutS[i].name))
;;;344    								{
;;;345    										PoutS[i].pwmstart = 0;
;;;346    										PoutS[i].pwmend = 141;
;;;347    										PoutS[i].oc_threshold = PoutS[i].sc_threshold = 2000;
;;;348    								}
;;;349    							#endif	
;;;350    							break;
;;;351    					case ADDR4_MOD:				
;;;352    							#ifdef  NORMOL_OUTS_MOD4			
;;;353    								if(strstr(NORMOL_OUTS_MOD4, PoutS[i].name))
;;;354    								{
;;;355    										PoutS[i].cmd = 1;
;;;356    								}
;;;357    							#endif
;;;358    							#if ORDER_VERSION == 220102
;;;359    								if(strstr("A02", PoutS[i].name))
;;;360    								{
;;;361    										PoutS[i].pwmstart = 0;
;;;362    										PoutS[i].pwmend = 141;
;;;363    										PoutS[i].oc_threshold = PoutS[i].sc_threshold = 1000;
;;;364    								}
;;;365    							#endif								
;;;366    							break;
;;;367    					default:
;;;368    						break;
;;;369    				}			
;;;370        }		
;;;371    }
00026c  bdf8              POP      {r3-r7,pc}
;;;372    INIT_APP_EXPORT(power_out_init);
                          ENDP

                  power_out PROC
;;;375    #pragma Otime
;;;376    void power_out()
00026e  b510              PUSH     {r4,lr}
;;;377    {
;;;378    #if (POUT_COUNT>9)
;;;379        protothread_out(pts + 0, PoutS + 0);
000270  491e              LDR      r1,|L1.748|
000272  482c              LDR      r0,|L1.804|
000274  f7fffffe          BL       protothread_out
;;;380        protothread_out(pts + 1, PoutS + 1);
000278  4930              LDR      r1,|L1.828|
00027a  4831              LDR      r0,|L1.832|
00027c  f7fffffe          BL       protothread_out
;;;381        protothread_out(pts + 2, PoutS + 2);
000280  4930              LDR      r1,|L1.836|
000282  4831              LDR      r0,|L1.840|
000284  f7fffffe          BL       protothread_out
;;;382        protothread_out(pts + 3, PoutS + 3);
000288  4930              LDR      r1,|L1.844|
00028a  4831              LDR      r0,|L1.848|
00028c  f7fffffe          BL       protothread_out
;;;383        protothread_out(pts + 4, PoutS + 4);
000290  4930              LDR      r1,|L1.852|
000292  4831              LDR      r0,|L1.856|
000294  f7fffffe          BL       protothread_out
;;;384        protothread_out(pts + 5, PoutS + 5);
000298  4930              LDR      r1,|L1.860|
00029a  4831              LDR      r0,|L1.864|
00029c  f7fffffe          BL       protothread_out
;;;385        protothread_out(pts + 6, PoutS + 6);
0002a0  4930              LDR      r1,|L1.868|
0002a2  4831              LDR      r0,|L1.872|
0002a4  f7fffffe          BL       protothread_out
;;;386        protothread_out(pts + 7, PoutS + 7);
0002a8  4930              LDR      r1,|L1.876|
0002aa  4831              LDR      r0,|L1.880|
0002ac  f7fffffe          BL       protothread_out
;;;387        protothread_out(pts + 8, PoutS + 8);
0002b0  4930              LDR      r1,|L1.884|
0002b2  4831              LDR      r0,|L1.888|
0002b4  f7fffffe          BL       protothread_out
;;;388        protothread_out(pts + 9, PoutS + 9);
0002b8  4930              LDR      r1,|L1.892|
0002ba  4831              LDR      r0,|L1.896|
0002bc  f7fffffe          BL       protothread_out
;;;389        protothread_out(pts + 10, PoutS + 10);
0002c0  4930              LDR      r1,|L1.900|
0002c2  4831              LDR      r0,|L1.904|
0002c4  f7fffffe          BL       protothread_out
;;;390        protothread_out(pts + 11, PoutS + 11);
0002c8  4930              LDR      r1,|L1.908|
0002ca  4831              LDR      r0,|L1.912|
0002cc  f7fffffe          BL       protothread_out
;;;391        protothread_out(pts + 12, PoutS + 12);
0002d0  4930              LDR      r1,|L1.916|
0002d2  4831              LDR      r0,|L1.920|
0002d4  f7fffffe          BL       protothread_out
;;;392        protothread_out(pts + 13, PoutS + 13);
0002d8  4930              LDR      r1,|L1.924|
0002da  4831              LDR      r0,|L1.928|
0002dc  f7fffffe          BL       protothread_out
;;;393        protothread_out(pts + 14, PoutS + 14);
0002e0  4930              LDR      r1,|L1.932|
0002e2  4831              LDR      r0,|L1.936|
0002e4  f7fffffe          BL       protothread_out
;;;394    #endif
;;;395    #if (POUT_COUNT>15)
;;;396        protothread_out(pts + 15, PoutS + 15);
;;;397    #endif
;;;398    #if (POUT_COUNT>16)
;;;399        protothread_out(pts + 16, PoutS + 16);
;;;400    #endif
;;;401    #if (POUT_COUNT>17)
;;;402        protothread_out(pts + 17, PoutS + 17);
;;;403    #endif
;;;404    #if (POUT_COUNT>18)
;;;405        protothread_out(pts + 18, PoutS + 18);
;;;406    #endif
;;;407    #if (POUT_COUNT>19)
;;;408        protothread_out(pts + 19, PoutS + 19);
;;;409    #endif
;;;410    #if (POUT_COUNT>20)
;;;411        protothread_out(pts + 20, PoutS + 20);
;;;412    #endif
;;;413    }
0002e8  bd10              POP      {r4,pc}
;;;414    //INIT_APP_LOOP_EXPORT(power_out);
                          ENDP

0002ea  0000              DCW      0x0000
                  |L1.748|
                          DCD      ||.data||+0x4
                  |L1.752|
                          DCD      systick_ms
                  |L1.756|
                          DCD      LC_LABEL182
                  |L1.760|
                          DCD      ||.data||
                  |L1.764|
                          DCD      LC_LABEL196
                  |L1.768|
                          DCD      LC_LABEL208
                  |L1.772|
                          DCD      LC_LABEL227
                  |L1.776|
                          DCD      0x0000270f
                  |L1.780|
                          DCD      LC_LABEL247
                  |L1.784|
                          DCD      0x500a0064
                  |L1.788|
                          DCD      LC_LABEL251
                  |L1.792|
                          DCD      LC_LABEL258
                  |L1.796|
                          DCD      LC_LABEL262
                  |L1.800|
                          DCD      LC_LABEL273
                  |L1.804|
                          DCD      ||.bss||
                  |L1.808|
                          DCD      mod_addr
                  |L1.812|
00032c  41303720          DCB      "A07 A12",0
000330  41313200
                  |L1.820|
000334  41303120          DCB      "A01 A09",0
000338  41303900
                  |L1.828|
                          DCD      ||.data||+0x38
                  |L1.832|
                          DCD      ||.bss||+0x4
                  |L1.836|
                          DCD      ||.data||+0x6c
                  |L1.840|
                          DCD      ||.bss||+0x8
                  |L1.844|
                          DCD      ||.data||+0xa0
                  |L1.848|
                          DCD      ||.bss||+0xc
                  |L1.852|
                          DCD      ||.data||+0xd4
                  |L1.856|
                          DCD      ||.bss||+0x10
                  |L1.860|
                          DCD      ||.data||+0x108
                  |L1.864|
                          DCD      ||.bss||+0x14
                  |L1.868|
                          DCD      ||.data||+0x13c
                  |L1.872|
                          DCD      ||.bss||+0x18
                  |L1.876|
                          DCD      ||.data||+0x170
                  |L1.880|
                          DCD      ||.bss||+0x1c
                  |L1.884|
                          DCD      ||.data||+0x1a4
                  |L1.888|
                          DCD      ||.bss||+0x20
                  |L1.892|
                          DCD      ||.data||+0x1d8
                  |L1.896|
                          DCD      ||.bss||+0x24
                  |L1.900|
                          DCD      ||.data||+0x20c
                  |L1.904|
                          DCD      ||.bss||+0x28
                  |L1.908|
                          DCD      ||.data||+0x240
                  |L1.912|
                          DCD      ||.bss||+0x2c
                  |L1.916|
                          DCD      ||.data||+0x274
                  |L1.920|
                          DCD      ||.bss||+0x30
                  |L1.924|
                          DCD      ||.data||+0x2a8
                  |L1.928|
                          DCD      ||.bss||+0x34
                  |L1.932|
                          DCD      ||.data||+0x2dc
                  |L1.936|
                          DCD      ||.bss||+0x38

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  pts
                          %        60

                          AREA ||.data||, DATA, ALIGN=2

                  pwmtime
                          DCD      0x00000000
                  PoutS
000004  41303100          DCB      0x41,0x30,0x31,0x00
                          DCD      0x00000000
                          DCD      0x500a0084
                          DCD      0x000a2800
                          DCD      0x00000000
                          DCD      0x00000000
00001c  1388              DCW      0x1388
00001e  0000              DCB      0x00,0x00
                          DCD      0x00000000
000024  01f40000          DCW      0x01f4,0x0000
000028  00b401a4          DCW      0x00b4,0x01a4
00002c  10010000          DCB      0x10,0x01,0x00,0x00
000030  00000000          DCB      0x00,0x00,0x00,0x00
000034  00033200          DCB      0x00,0x03,0x32,0x00
000038  41303900          DCB      0x41,0x30,0x39,0x00
                          DCD      0x00000000
                          DCD      0x500a0048
                          DCD      0x000a2800
                          DCD      0x00000000
                          DCD      0x00000000
000050  1388              DCW      0x1388
000052  0000              DCB      0x00,0x00
                          DCD      0x00000000
000058  01f40000          DCW      0x01f4,0x0000
00005c  00b401a4          DCW      0x00b4,0x01a4
000060  80140000          DCB      0x80,0x14,0x00,0x00
000064  00000000          DCB      0x00,0x00,0x00,0x00
000068  00033200          DCB      0x00,0x03,0x32,0x00
00006c  41303200          DCB      0x41,0x30,0x32,0x00
                          DCD      0x00000000
                          DCD      0x500a0084
                          DCD      0x0007d000
                          DCD      0x00000000
                          DCD      0x00000000
000084  1388              DCW      0x1388
000086  0000              DCB      0x00,0x00
                          DCD      0x00000000
00008c  01f40000          DCW      0x01f4,0x0000
000090  0096017c          DCW      0x0096,0x017c
000094  200a0000          DCB      0x20,0x0a,0x00,0x00
000098  00000000          DCB      0x00,0x00,0x00,0x00
00009c  00033200          DCB      0x00,0x03,0x32,0x00
0000a0  41313000          DCB      0x41,0x31,0x30,0x00
                          DCD      0x00000000
                          DCD      0x500a0038
                          DCD      0x0007d000
                          DCD      0x00000000
                          DCD      0x00000000
0000b8  1388              DCW      0x1388
0000ba  0000              DCB      0x00,0x00
                          DCD      0x00000000
0000c0  01f40000          DCW      0x01f4,0x0000
0000c4  0096017c          DCW      0x0096,0x017c
0000c8  01050000          DCB      0x01,0x05,0x00,0x00
0000cc  00000000          DCB      0x00,0x00,0x00,0x00
0000d0  00033200          DCB      0x00,0x03,0x32,0x00
0000d4  41303300          DCB      0x41,0x30,0x33,0x00
                          DCD      0x00000000
                          DCD      0x500a0048
                          DCD      0x0007d000
                          DCD      0x00000000
                          DCD      0x00000000
0000ec  1388              DCW      0x1388
0000ee  0000              DCB      0x00,0x00
                          DCD      0x00000000
0000f4  01f40000          DCW      0x01f4,0x0000
0000f8  0096017c          DCW      0x0096,0x017c
0000fc  04020000          DCB      0x04,0x02,0x00,0x00
000100  00000000          DCB      0x00,0x00,0x00,0x00
000104  00033200          DCB      0x00,0x03,0x32,0x00
000108  41313100          DCB      0x41,0x31,0x31,0x00
                          DCD      0x00000000
                          DCD      0x500a001c
                          DCD      0x0007d000
                          DCD      0x00000000
                          DCD      0x00000000
000120  1388              DCW      0x1388
000122  0000              DCB      0x00,0x00
                          DCD      0x00000000
000128  01f40000          DCW      0x01f4,0x0000
00012c  0096017c          DCW      0x0096,0x017c
000130  010d0000          DCB      0x01,0x0d,0x00,0x00
000134  00000000          DCB      0x00,0x00,0x00,0x00
000138  00033200          DCB      0x00,0x03,0x32,0x00
00013c  41303400          DCB      0x41,0x30,0x34,0x00
                          DCD      0x00000000
                          DCD      0x500a0048
                          DCD      0x0007d000
                          DCD      0x00000000
                          DCD      0x00000000
000154  1388              DCW      0x1388
000156  0000              DCB      0x00,0x00
                          DCD      0x00000000
00015c  01f40000          DCW      0x01f4,0x0000
000160  0096017c          DCW      0x0096,0x017c
000164  08130000          DCB      0x08,0x13,0x00,0x00
000168  00000000          DCB      0x00,0x00,0x00,0x00
00016c  00033200          DCB      0x00,0x03,0x32,0x00
000170  41313200          DCB      0x41,0x31,0x32,0x00
                          DCD      0x00000000
                          DCD      0x500a0038
                          DCD      0x0007d000
                          DCD      0x00000000
                          DCD      0x00000000
000188  1388              DCW      0x1388
00018a  0000              DCB      0x00,0x00
                          DCD      0x00000000
000190  01f40000          DCW      0x01f4,0x0000
000194  0096017c          DCW      0x0096,0x017c
000198  02060000          DCB      0x02,0x06,0x00,0x00
00019c  00000000          DCB      0x00,0x00,0x00,0x00
0001a0  00033200          DCB      0x00,0x03,0x32,0x00
0001a4  41303500          DCB      0x41,0x30,0x35,0x00
                          DCD      0x00000000
                          DCD      0x500a0048
                          DCD      0x0007d000
                          DCD      0x00000000
                          DCD      0x00000000
0001bc  1388              DCW      0x1388
0001be  0000              DCB      0x00,0x00
                          DCD      0x00000000
0001c4  01f40000          DCW      0x01f4,0x0000
0001c8  0096017c          DCW      0x0096,0x017c
0001cc  100b0000          DCB      0x10,0x0b,0x00,0x00
0001d0  00000000          DCB      0x00,0x00,0x00,0x00
0001d4  00033200          DCB      0x00,0x03,0x32,0x00
0001d8  41313300          DCB      0x41,0x31,0x33,0x00
                          DCD      0x00000000
                          DCD      0x500a0000
                          DCD      0x0007d000
                          DCD      0x00000000
                          DCD      0x00000000
0001f0  1388              DCW      0x1388
0001f2  0000              DCB      0x00,0x00
                          DCD      0x00000000
0001f8  01f40000          DCW      0x01f4,0x0000
0001fc  0096017c          DCW      0x0096,0x017c
000200  010e0000          DCB      0x01,0x0e,0x00,0x00
000204  00000000          DCB      0x00,0x00,0x00,0x00
000208  00033200          DCB      0x00,0x03,0x32,0x00
00020c  41303600          DCB      0x41,0x30,0x36,0x00
                          DCD      0x00000000
                          DCD      0x500a0048
                          DCD      0x0007d000
                          DCD      0x00000000
                          DCD      0x00000000
000224  1388              DCW      0x1388
000226  0000              DCB      0x00,0x00
                          DCD      0x00000000
00022c  01f40000          DCW      0x01f4,0x0000
000230  0096017c          DCW      0x0096,0x017c
000234  20030000          DCB      0x20,0x03,0x00,0x00
000238  00000000          DCB      0x00,0x00,0x00,0x00
00023c  00033200          DCB      0x00,0x03,0x32,0x00
000240  41313400          DCB      0x41,0x31,0x34,0x00
                          DCD      0x00000000
                          DCD      0x500a0038
                          DCD      0x0007d000
                          DCD      0x00000000
                          DCD      0x00000000
000258  1388              DCW      0x1388
00025a  0000              DCB      0x00,0x00
                          DCD      0x00000000
000260  01f40000          DCW      0x01f4,0x0000
000264  0096017c          DCW      0x0096,0x017c
000268  04150000          DCB      0x04,0x15,0x00,0x00
00026c  00000000          DCB      0x00,0x00,0x00,0x00
000270  00033200          DCB      0x00,0x03,0x32,0x00
000274  41303700          DCB      0x41,0x30,0x37,0x00
                          DCD      0x00000000
                          DCD      0x500a0074
                          DCD      0x0007d000
                          DCD      0x00000000
                          DCD      0x00000000
00028c  1388              DCW      0x1388
00028e  0000              DCB      0x00,0x00
                          DCD      0x00000000
000294  01f40000          DCW      0x01f4,0x0000
000298  0096017c          DCW      0x0096,0x017c
00029c  80040000          DCB      0x80,0x04,0x00,0x00
0002a0  00000000          DCB      0x00,0x00,0x00,0x00
0002a4  00033200          DCB      0x00,0x03,0x32,0x00
0002a8  41343200          DCB      0x41,0x34,0x32,0x00
                          DCD      0x00000000
                          DCD      0x500a001c
                          DCD      0x0007d000
                          DCD      0x00000000
                          DCD      0x00000000
0002c0  1388              DCW      0x1388
0002c2  0000              DCB      0x00,0x00
                          DCD      0x00000000
0002c8  01f40000          DCW      0x01f4,0x0000
0002cc  0096017c          DCW      0x0096,0x017c
0002d0  02070000          DCB      0x02,0x07,0x00,0x00
0002d4  00000000          DCB      0x00,0x00,0x00,0x00
0002d8  00033200          DCB      0x00,0x03,0x32,0x00
0002dc  41303800          DCB      0x41,0x30,0x38,0x00
                          DCD      0x00000000
                          DCD      0x500a0048
                          DCD      0x0007d000
                          DCD      0x00000000
                          DCD      0x00000000
0002f4  1388              DCW      0x1388
0002f6  0000              DCB      0x00,0x00
                          DCD      0x00000000
0002fc  01f40000          DCW      0x01f4,0x0000
000300  0096017c          DCW      0x0096,0x017c
000304  400c0000          DCB      0x40,0x0c,0x00,0x00
000308  00000000          DCB      0x00,0x00,0x00,0x00
00030c  00033200          DCB      0x00,0x03,0x32,0x00

                          AREA ||.init_fn.6||, DATA, READONLY, ALIGN=2

                  __stan_init_power_out_init
                  ||__tagsym$$used||
                          DCD      power_out_init

;*** Start embedded assembler ***

#line 1 "src\\power_out.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___11_power_out_c_PoutS____REV16|
#line 447 ".\\RTE\\CMSIS\\BF7006AM64\\cmsis_armcc.h"
|__asm___11_power_out_c_PoutS____REV16| PROC
#line 448

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___11_power_out_c_PoutS____REVSH|
#line 462
|__asm___11_power_out_c_PoutS____REVSH| PROC
#line 463

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

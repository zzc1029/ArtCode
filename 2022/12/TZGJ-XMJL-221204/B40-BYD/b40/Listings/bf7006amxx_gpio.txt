; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--list --debug -c --asm --interleave --gnu -o.\obj\bf7006amxx_gpio.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\obj\bf7006amxx_gpio.d --cpu=Cortex-M0 --apcs=interwork -Otime --diag_suppress=9931 -I.\src\pt -I.\src -I.\config -I.\RTE\CMSIS\BF7006AM64 -I.\RTE\Device\BF7006AM64 -I.\RTE\SEGGER -I.\RTE\Startup\BF7006AM64 -I.\RTE\_b40 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.8.0\CMSIS\Core\Include -IC:\Keil_v5\ARM\PACK\BYD\BYDMicro_DFP\1.1.0\Device\Include\BF7006AMxx -D__UVISION_VERSION=536 -D_RTE_ -D_RTE_ --omf_browse=.\obj\bf7006amxx_gpio.crf RTE\Device\BF7006AM64\BF7006AMxx_gpio.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  gpio_init PROC
;;;25     */
;;;26     void gpio_init(uint32_t gpio_periph,GPIO_MODE mode,uint8_t pin)
000000  2900              CMP      r1,#0
;;;27     {
000002  d007              BEQ      |L1.20|
;;;28     	switch(mode){
000004  2901              CMP      r1,#1
000006  d00b              BEQ      |L1.32|
000008  2902              CMP      r1,#2
00000a  d102              BNE      |L1.18|
;;;29     		case GPIO_MODE_IN_FLOATING:
;;;30     			GPIO_PTDD(gpio_periph) &= ~pin;
;;;31     			GPIO_PTPE(gpio_periph) &= ~pin;
;;;32     			break;
;;;33     		case GPIO_MODE_IPU:
;;;34     			GPIO_PTDD(gpio_periph) &= ~pin;
;;;35     			GPIO_PTPE(gpio_periph) |= pin;
;;;36     			break;
;;;37     		case GPIO_MODE_OUT:
;;;38     			GPIO_PTDD(gpio_periph) |= pin;
00000c  6841              LDR      r1,[r0,#4]
00000e  4311              ORRS     r1,r1,r2
000010  6041              STR      r1,[r0,#4]
                  |L1.18|
;;;39     			break;
;;;40     		default:
;;;41     			/* error gpio mode */
;;;42     			break;
;;;43     	}
;;;44     }
000012  4770              BX       lr
                  |L1.20|
000014  6841              LDR      r1,[r0,#4]            ;30
000016  4391              BICS     r1,r1,r2              ;30
000018  6041              STR      r1,[r0,#4]            ;30
00001a  6881              LDR      r1,[r0,#8]            ;31
00001c  4391              BICS     r1,r1,r2              ;31
00001e  e004              B        |L1.42|
                  |L1.32|
000020  6841              LDR      r1,[r0,#4]            ;34
000022  4391              BICS     r1,r1,r2              ;34
000024  6041              STR      r1,[r0,#4]            ;34
000026  6881              LDR      r1,[r0,#8]            ;35
000028  4311              ORRS     r1,r1,r2              ;35
                  |L1.42|
00002a  6081              STR      r1,[r0,#8]            ;35
00002c  4770              BX       lr
;;;45     
                          ENDP

                  gpio_bit_set PROC
;;;52     */
;;;53     void gpio_bit_set(uint32_t gpio_periph,uint8_t pin)
00002e  6802              LDR      r2,[r0,#0]
;;;54     {
;;;55     	GPIO_PTD(gpio_periph) |= pin;
000030  430a              ORRS     r2,r2,r1
000032  6002              STR      r2,[r0,#0]
;;;56     }
000034  4770              BX       lr
;;;57     
                          ENDP

                  gpio_bit_reset PROC
;;;64     */
;;;65     void gpio_bit_reset(uint32_t gpio_periph,uint8_t pin)
000036  6802              LDR      r2,[r0,#0]
;;;66     {
;;;67     	GPIO_PTD(gpio_periph) &= ~pin;
000038  438a              BICS     r2,r2,r1
00003a  6002              STR      r2,[r0,#0]
;;;68     }
00003c  4770              BX       lr
;;;69     
                          ENDP

                  gpio_bit_write PROC
;;;79     */
;;;80     void gpio_bit_write(uint32_t gpio_periph,uint8_t pin,FlagStatus bit_value)
00003e  2a01              CMP      r2,#1
;;;81     {
;;;82         if(bit_value == SET){
;;;83             GPIO_PTD(gpio_periph) |= pin;
;;;84         }else{
;;;85             GPIO_PTD(gpio_periph) &= ~pin;
000040  6802              LDR      r2,[r0,#0]
000042  d002              BEQ      |L1.74|
000044  438a              BICS     r2,r2,r1
                  |L1.70|
000046  6002              STR      r2,[r0,#0]            ;83
;;;86         }
;;;87     }
000048  4770              BX       lr
                  |L1.74|
00004a  430a              ORRS     r2,r2,r1              ;83
00004c  e7fb              B        |L1.70|
;;;88     
                          ENDP

                  gpio_port_write PROC
;;;95     */
;;;96     void gpio_port_write(uint32_t gpio_periph,uint8_t data)
00004e  6001              STR      r1,[r0,#0]
;;;97     {
;;;98     	GPIO_PTD(gpio_periph) = data;
;;;99     }
000050  4770              BX       lr
;;;100    
                          ENDP

                  gpio_bit_get PROC
;;;107    */
;;;108    FlagStatus gpio_bit_get(uint32_t gpio_periph,uint8_t pin)
000052  6800              LDR      r0,[r0,#0]
;;;109    {
;;;110    	
;;;111        if((GPIO_PTD(gpio_periph)&(pin)) != 0x00U){
000054  4008              ANDS     r0,r0,r1
000056  d000              BEQ      |L1.90|
;;;112            return SET; 
000058  2001              MOVS     r0,#1
                  |L1.90|
;;;113        }else{
;;;114            return RESET;
;;;115        }
;;;116    }
00005a  4770              BX       lr
;;;117    
                          ENDP

                  gpio_port_get PROC
;;;123    */
;;;124    uint8_t gpio_port_get(uint32_t gpio_periph)
00005c  6800              LDR      r0,[r0,#0]
;;;125    {
;;;126    	uint32_t retal;
;;;127    	retal = GPIO_PTD(gpio_periph);
;;;128    	return (uint8_t)retal;
00005e  b2c0              UXTB     r0,r0
;;;129    
;;;130    }
000060  4770              BX       lr
;;;131    
                          ENDP

                  gpio_toggle PROC
;;;138    */
;;;139    void gpio_toggle(uint32_t gpio_periph,uint8_t pin)
000062  6802              LDR      r2,[r0,#0]
000064  420a              TST      r2,r1
000066  6802              LDR      r2,[r0,#0]
;;;140    {
000068  d001              BEQ      |L1.110|
00006a  438a              BICS     r2,r2,r1
;;;141    	if(gpio_bit_get(gpio_periph,pin) == SET){
;;;142    		gpio_bit_reset(gpio_periph,pin);
00006c  e000              B        |L1.112|
                  |L1.110|
00006e  430a              ORRS     r2,r2,r1
                  |L1.112|
000070  6002              STR      r2,[r0,#0]
;;;143    	}else{
;;;144    		gpio_bit_set(gpio_periph,pin);
;;;145    	}
;;;146    }
000072  4770              BX       lr
;;;147    
                          ENDP

                  gpio_trigge_mode PROC
;;;155    */
;;;156    ErrorStatus gpio_trigge_mode(uint32_t gpio_periph,GPIO_TRG_MODE trg_mode,uint8_t pin)
000074  4b5a              LDR      r3,|L1.480|
;;;157    {
;;;158    	if((gpio_periph != ((uint32_t)GPIOA)) && (gpio_periph != ((uint32_t)GPIOB)) && (gpio_periph != ((uint32_t)GPIOD))){
000076  4298              CMP      r0,r3
000078  d007              BEQ      |L1.138|
00007a  4b5a              LDR      r3,|L1.484|
00007c  4298              CMP      r0,r3
00007e  d004              BEQ      |L1.138|
000080  4b59              LDR      r3,|L1.488|
000082  4298              CMP      r0,r3
000084  d001              BEQ      |L1.138|
;;;159    		return ERROR;
000086  2000              MOVS     r0,#0
;;;160    	}
;;;161    	/* GPIO interrput trigge mode configuration */
;;;162    	switch(trg_mode){
;;;163    		case GPIO_TRG_HIGH:
;;;164    			GPIO_PTSC(gpio_periph) |= GPIO_PTSC_TRGMOD;
;;;165    			GPIO_PTES(gpio_periph) |= pin;
;;;166    			break;
;;;167    		case GPIO_TRG_LOW:
;;;168    			GPIO_PTSC(gpio_periph) |= GPIO_PTSC_TRGMOD;
;;;169    			GPIO_PTES(gpio_periph) &= ~pin;
;;;170    			break;
;;;171    		case GPIO_TRG_RISING:
;;;172    			GPIO_PTSC(gpio_periph) &= ~GPIO_PTSC_TRGMOD;
;;;173    			GPIO_PTES(gpio_periph) |= pin;
;;;174    			break;
;;;175    		case GPIO_TRG_FALLING:
;;;176    			GPIO_PTSC(gpio_periph) &= ~GPIO_PTSC_TRGMOD;
;;;177    			GPIO_PTES(gpio_periph) &= ~pin;
;;;178    			break;
;;;179    		default:
;;;180    			/* error */
;;;181    			break;
;;;182    	}
;;;183    	/* gpio trigge pin enable */
;;;184    	GPIO_PTPS(gpio_periph) |= pin;
;;;185    	return SUCCESS;
;;;186    }
000088  4770              BX       lr
                  |L1.138|
00008a  2301              MOVS     r3,#1                 ;157
00008c  2900              CMP      r1,#0                 ;162
00008e  d006              BEQ      |L1.158|
000090  2901              CMP      r1,#1                 ;162
000092  d00a              BEQ      |L1.170|
000094  2902              CMP      r1,#2                 ;162
000096  d00e              BEQ      |L1.182|
000098  2903              CMP      r1,#3                 ;162
00009a  d11a              BNE      |L1.210|
00009c  e012              B        |L1.196|
                  |L1.158|
00009e  6901              LDR      r1,[r0,#0x10]         ;164
0000a0  4319              ORRS     r1,r1,r3              ;164
0000a2  6101              STR      r1,[r0,#0x10]         ;164
0000a4  6981              LDR      r1,[r0,#0x18]         ;165
0000a6  4311              ORRS     r1,r1,r2              ;165
0000a8  e012              B        |L1.208|
                  |L1.170|
0000aa  6901              LDR      r1,[r0,#0x10]         ;168
0000ac  4319              ORRS     r1,r1,r3              ;168
0000ae  6101              STR      r1,[r0,#0x10]         ;168
0000b0  6981              LDR      r1,[r0,#0x18]         ;169
0000b2  4391              BICS     r1,r1,r2              ;169
0000b4  e00c              B        |L1.208|
                  |L1.182|
0000b6  6901              LDR      r1,[r0,#0x10]         ;172
0000b8  0849              LSRS     r1,r1,#1              ;172
0000ba  0049              LSLS     r1,r1,#1              ;172
0000bc  6101              STR      r1,[r0,#0x10]         ;172
0000be  6981              LDR      r1,[r0,#0x18]         ;173
0000c0  4311              ORRS     r1,r1,r2              ;173
0000c2  e005              B        |L1.208|
                  |L1.196|
0000c4  6901              LDR      r1,[r0,#0x10]         ;176
0000c6  0849              LSRS     r1,r1,#1              ;176
0000c8  0049              LSLS     r1,r1,#1              ;176
0000ca  6101              STR      r1,[r0,#0x10]         ;176
0000cc  6981              LDR      r1,[r0,#0x18]         ;177
0000ce  4391              BICS     r1,r1,r2              ;177
                  |L1.208|
0000d0  6181              STR      r1,[r0,#0x18]         ;173
                  |L1.210|
0000d2  6941              LDR      r1,[r0,#0x14]         ;184
0000d4  4311              ORRS     r1,r1,r2              ;184
0000d6  6141              STR      r1,[r0,#0x14]         ;184
0000d8  2001              MOVS     r0,#1                 ;185
0000da  4770              BX       lr
;;;187    
                          ENDP

                  gpio_interrupt_set PROC
;;;195    */
;;;196    void gpio_interrupt_set(uint32_t gpio_periph,uint8_t pin,FunctionalState value)
0000dc  2102              MOVS     r1,#2
0000de  054b              LSLS     r3,r1,#21
;;;197    {
;;;198    		/* gpio trigge interrupt enable */
;;;199    	if(ENABLE == value){
0000e0  2a01              CMP      r2,#1
;;;200    		GPIO_PTSC(gpio_periph) |= GPIO_PTSC_IE;
;;;201    		NVIC_EnableIRQ(GPIO_IRQn);
;;;202    	}else{
;;;203    		GPIO_PTSC(gpio_periph) &= ~GPIO_PTSC_IE;
0000e2  6902              LDR      r2,[r0,#0x10]
0000e4  d008              BEQ      |L1.248|
0000e6  438a              BICS     r2,r2,r1
0000e8  6102              STR      r2,[r0,#0x10]
0000ea  4840              LDR      r0,|L1.492|
0000ec  6003              STR      r3,[r0,#0]
0000ee  f3bf8f4f          DSB      
0000f2  f3bf8f6f          ISB      
;;;204    		NVIC_DisableIRQ(GPIO_IRQn);
;;;205    	}
;;;206    }
0000f6  4770              BX       lr
                  |L1.248|
0000f8  430a              ORRS     r2,r2,r1              ;200
0000fa  6102              STR      r2,[r0,#0x10]         ;200
0000fc  483c              LDR      r0,|L1.496|
0000fe  6003              STR      r3,[r0,#0]            ;200
000100  4770              BX       lr
;;;207    
                          ENDP

                  get_gpio_port_interrupt_state PROC
;;;213    */
;;;214    uint8_t get_gpio_port_interrupt_state(uint32_t gpio_periph)
000102  6901              LDR      r1,[r0,#0x10]
;;;215    {
;;;216    	uint32_t retal;
;;;217    	if((GPIO_PTSC(gpio_periph) & GPIO_PTSC_IF) != 0x00U){
000104  0709              LSLS     r1,r1,#28
000106  d50f              BPL      |L1.296|
;;;218    		if(gpio_periph == (uint32_t)GPIOA){
000108  4a35              LDR      r2,|L1.480|
;;;219    			retal = GPIOA_INTSTA;
00010a  493a              LDR      r1,|L1.500|
00010c  4290              CMP      r0,r2                 ;218
00010e  d101              BNE      |L1.276|
000110  6948              LDR      r0,[r1,#0x14]
000112  e00a              B        |L1.298|
                  |L1.276|
;;;220    		}else if(gpio_periph == (uint32_t)GPIOB){
000114  4a33              LDR      r2,|L1.484|
000116  4290              CMP      r0,r2
000118  d101              BNE      |L1.286|
;;;221    			retal = GPIOB_INTSTA;
00011a  6988              LDR      r0,[r1,#0x18]
00011c  e005              B        |L1.298|
                  |L1.286|
;;;222    		}else if(gpio_periph == (uint32_t)GPIOD){
00011e  4a32              LDR      r2,|L1.488|
000120  4290              CMP      r0,r2
000122  d101              BNE      |L1.296|
;;;223    			retal = GPIOD_INTSTA;
000124  69c8              LDR      r0,[r1,#0x1c]
000126  e000              B        |L1.298|
                  |L1.296|
;;;224    		}else{
;;;225    			retal = (uint32_t)0x00;
000128  2000              MOVS     r0,#0
                  |L1.298|
;;;226    		}
;;;227    	}else{
;;;228    		retal = (uint32_t)0x00;
;;;229    	}
;;;230    	return (uint8_t)retal;
00012a  b2c0              UXTB     r0,r0
;;;231    }
00012c  4770              BX       lr
;;;232    
                          ENDP

                  get_gpio_interrupt_state PROC
;;;239    */
;;;240    FlagStatus get_gpio_interrupt_state(uint32_t gpio_periph,uint8_t pin)
00012e  6902              LDR      r2,[r0,#0x10]
;;;241    {
;;;242    	if((GPIO_PTSC(gpio_periph) & GPIO_PTSC_IF) != 0U){
000130  0712              LSLS     r2,r2,#28
000132  d516              BPL      |L1.354|
;;;243    		if(gpio_periph == (uint32_t)GPIOA){
000134  4b2a              LDR      r3,|L1.480|
;;;244    			if((GPIOA_INTSTA & pin) != 0U){
000136  4a2f              LDR      r2,|L1.500|
000138  4298              CMP      r0,r3                 ;243
00013a  d103              BNE      |L1.324|
00013c  6950              LDR      r0,[r2,#0x14]
00013e  4008              ANDS     r0,r0,r1
000140  d10d              BNE      |L1.350|
;;;245    				return SET;
;;;246    			}else{
;;;247    				return RESET;
;;;248    			}
;;;249    		}else if(gpio_periph == (uint32_t)GPIOB){
;;;250    			if((GPIOB_INTSTA & pin) != 0U){
;;;251    				return SET;
;;;252    			}else{
;;;253    				return RESET;
;;;254    			}
;;;255    		}else if(gpio_periph == (uint32_t)GPIOD){
;;;256    			if((GPIOD_INTSTA & pin) != 0U){
;;;257    				return SET;
;;;258    			}else{
;;;259    				return RESET;
;;;260    			}
;;;261    		}else{
;;;262    			return RESET;
;;;263    		}
;;;264    	}else{
;;;265    		return RESET;
;;;266    	}
;;;267    }
000142  4770              BX       lr
                  |L1.324|
000144  4b27              LDR      r3,|L1.484|
000146  4298              CMP      r0,r3                 ;249
000148  d103              BNE      |L1.338|
00014a  6990              LDR      r0,[r2,#0x18]         ;250
00014c  4008              ANDS     r0,r0,r1              ;250
00014e  d106              BNE      |L1.350|
                  |L1.336|
000150  4770              BX       lr
                  |L1.338|
000152  4b25              LDR      r3,|L1.488|
000154  4298              CMP      r0,r3                 ;255
000156  d104              BNE      |L1.354|
000158  69d0              LDR      r0,[r2,#0x1c]         ;256
00015a  4008              ANDS     r0,r0,r1              ;256
00015c  d0f8              BEQ      |L1.336|
                  |L1.350|
00015e  2001              MOVS     r0,#1                 ;257
000160  4770              BX       lr
                  |L1.354|
000162  2000              MOVS     r0,#0                 ;265
000164  4770              BX       lr
;;;268    
                          ENDP

                  clr_gpio_interrupt_state PROC
;;;275    */
;;;276    void clr_gpio_interrupt_state(uint32_t gpio_periph,uint8_t pin)
000166  b430              PUSH     {r4,r5}
;;;277    {
;;;278    	if(gpio_periph == (uint32_t)GPIOA){
000168  4b1d              LDR      r3,|L1.480|
;;;279    		GPIOA_INTSTA |= ((uint32_t)pin & 0x000000FFUL);
00016a  4a22              LDR      r2,|L1.500|
;;;280    		GPIO_PTSC((uint32_t)GPIOA) |= GPIO_PTSC_ACK;
00016c  2404              MOVS     r4,#4
00016e  4298              CMP      r0,r3                 ;278
000170  d107              BNE      |L1.386|
000172  6950              LDR      r0,[r2,#0x14]         ;279
000174  4308              ORRS     r0,r0,r1              ;279
000176  6150              STR      r0,[r2,#0x14]         ;279
000178  6918              LDR      r0,[r3,#0x10]
00017a  4320              ORRS     r0,r0,r4
00017c  6118              STR      r0,[r3,#0x10]
;;;281    	}else if(gpio_periph == (uint32_t)GPIOB){
;;;282    		GPIOB_INTSTA |= ((uint32_t)pin & 0x000000FFUL);
;;;283    		GPIO_PTSC((uint32_t)GPIOB) |= GPIO_PTSC_ACK;
;;;284    	}else if(gpio_periph == (uint32_t)GPIOD){
;;;285    		GPIOD_INTSTA |= ((uint32_t)pin & 0x000000FFUL);
;;;286    		GPIO_PTSC((uint32_t)GPIOD) |= GPIO_PTSC_ACK;
;;;287    	}else{
;;;288    		/* error port */
;;;289    	}
;;;290    }
00017e  bc30              POP      {r4,r5}
000180  4770              BX       lr
                  |L1.386|
000182  4d18              LDR      r5,|L1.484|
000184  42a8              CMP      r0,r5                 ;281
000186  d107              BNE      |L1.408|
000188  6990              LDR      r0,[r2,#0x18]         ;282
00018a  4308              ORRS     r0,r0,r1              ;282
00018c  6190              STR      r0,[r2,#0x18]         ;282
00018e  6ad8              LDR      r0,[r3,#0x2c]         ;283
000190  4320              ORRS     r0,r0,r4              ;283
000192  62d8              STR      r0,[r3,#0x2c]         ;283
                  |L1.404|
000194  bc30              POP      {r4,r5}
000196  4770              BX       lr
                  |L1.408|
000198  4b13              LDR      r3,|L1.488|
00019a  4298              CMP      r0,r3                 ;284
00019c  d1fa              BNE      |L1.404|
00019e  69d0              LDR      r0,[r2,#0x1c]         ;285
0001a0  4308              ORRS     r0,r0,r1              ;285
0001a2  61d0              STR      r0,[r2,#0x1c]         ;285
0001a4  4814              LDR      r0,|L1.504|
0001a6  6981              LDR      r1,[r0,#0x18]         ;286
0001a8  4321              ORRS     r1,r1,r4              ;286
0001aa  6181              STR      r1,[r0,#0x18]         ;286
0001ac  bc30              POP      {r4,r5}
0001ae  4770              BX       lr
;;;291    
                          ENDP

                  clr_nmi_interrupt_flag PROC
;;;314    */
;;;315    void clr_nmi_interrupt_flag(void)
0001b0  4810              LDR      r0,|L1.500|
;;;316    {
;;;317    	NMISC |= ((uint32_t)NMISC_ACK & 0x000000FFUL);
0001b2  6a01              LDR      r1,[r0,#0x20]
0001b4  2204              MOVS     r2,#4
0001b6  4311              ORRS     r1,r1,r2
0001b8  6201              STR      r1,[r0,#0x20]
;;;318    }
0001ba  4770              BX       lr
                          ENDP

                  nmi_init PROC
;;;298    */
;;;299    void nmi_init(uint8_t trigg_mode,FunctionalState state)
0001bc  b410              PUSH     {r4}
0001be  4a0d              LDR      r2,|L1.500|
0001c0  6a13              LDR      r3,[r2,#0x20]
0001c2  2404              MOVS     r4,#4
0001c4  4323              ORRS     r3,r3,r4
0001c6  6213              STR      r3,[r2,#0x20]
;;;300    {
;;;301    	clr_nmi_interrupt_flag();
;;;302    	NMISC = (trigg_mode | (uint8_t)NMISC_PE);
0001c8  2310              MOVS     r3,#0x10
0001ca  4318              ORRS     r0,r0,r3
0001cc  6210              STR      r0,[r2,#0x20]
;;;303    	if(state == ENABLE){
0001ce  2901              CMP      r1,#1
0001d0  d103              BNE      |L1.474|
;;;304    		NMISC |= ((uint32_t)NMISC_IE & 0x000000FFUL);
0001d2  6a10              LDR      r0,[r2,#0x20]
0001d4  2102              MOVS     r1,#2
0001d6  4308              ORRS     r0,r0,r1
0001d8  6210              STR      r0,[r2,#0x20]
                  |L1.474|
;;;305    	}
;;;306    }
0001da  bc10              POP      {r4}
0001dc  4770              BX       lr
;;;307    
                          ENDP

0001de  0000              DCW      0x0000
                  |L1.480|
                          DCD      0x500a0000
                  |L1.484|
                          DCD      0x500a001c
                  |L1.488|
                          DCD      0x500a0048
                  |L1.492|
                          DCD      0xe000e180
                  |L1.496|
                          DCD      0xe000e100
                  |L1.500|
                          DCD      0x500a0080
                  |L1.504|
                          DCD      0x500a0040

;*** Start embedded assembler ***

#line 1 "RTE\\Device\\BF7006AM64\\BF7006AMxx_gpio.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___17_BF7006AMxx_gpio_c_c8a4be98____REV16|
#line 447 ".\\RTE\\CMSIS\\BF7006AM64\\cmsis_armcc.h"
|__asm___17_BF7006AMxx_gpio_c_c8a4be98____REV16| PROC
#line 448

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___17_BF7006AMxx_gpio_c_c8a4be98____REVSH|
#line 462
|__asm___17_BF7006AMxx_gpio_c_c8a4be98____REVSH| PROC
#line 463

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

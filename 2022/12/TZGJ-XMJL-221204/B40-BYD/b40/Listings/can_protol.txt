; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--list --debug -c --asm --interleave --gnu -o.\obj\can_protol.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\obj\can_protol.d --cpu=Cortex-M0 --apcs=interwork -Otime --diag_suppress=9931 -I.\src\pt -I.\src -I.\config -I.\RTE\CMSIS\BF7006AM64 -I.\RTE\Device\BF7006AM64 -I.\RTE\SEGGER -I.\RTE\Startup\BF7006AM64 -I.\RTE\_b40 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.8.0\CMSIS\Core\Include -IC:\Keil_v5\ARM\PACK\BYD\BYDMicro_DFP\1.1.0\Device\Include\BF7006AMxx -D__UVISION_VERSION=536 -D_RTE_ -D_RTE_ --omf_browse=.\obj\can_protol.crf src\can_protol.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  protothread_can PROC
;;;20      */
;;;21     int protothread_can(struct pt *pt)
000000  b5f0              PUSH     {r4-r7,lr}
;;;22     {
000002  4604              MOV      r4,r0
;;;23     	PT_BEGIN(pt);
000004  6800              LDR      r0,[r0,#0]
000006  b083              SUB      sp,sp,#0xc            ;22
000008  2800              CMP      r0,#0
00000a  d000              BEQ      |L1.14|
00000c  4700              BX       r0
                  |L1.14|
;;;24     
;;;25     	uint8_t data[8];
;;;26     	static uint32_t time;
;;;27     	static uint8_t count = 0;
;;;28     
;;;29     	/* We loop forever here. */
;;;30     	while (1)
;;;31     	{
;;;32     		time = systick_ms + 100;
00000e  48fe              LDR      r0,|L1.1032|
000010  6800              LDR      r0,[r0,#0]  ; systick_ms
000012  4efe              LDR      r6,|L1.1036|
000014  3064              ADDS     r0,r0,#0x64
;;;33     		{
;;;34     			uint16_t speed = freq * 3600 / param.pluse;
000016  60f0              STR      r0,[r6,#0xc]  ; time
000018  48fd              LDR      r0,|L1.1040|
00001a  8801              LDRH     r1,[r0,#0]  ; param
00001c  48fd              LDR      r0,|L1.1044|
00001e  8805              LDRH     r5,[r0,#0]  ; freq
000020  20e1              MOVS     r0,#0xe1
000022  0100              LSLS     r0,r0,#4
000024  4368              MULS     r0,r5,r0
000026  f7fffffe          BL       __aeabi_uidivmod
;;;35     			data[0] = in_sw[0];
00002a  49fb              LDR      r1,|L1.1048|
00002c  466a              MOV      r2,sp
00002e  780b              LDRB     r3,[r1,#0]  ; in_sw
000030  7013              STRB     r3,[r2,#0]
;;;36     			data[1] = in_sw[1];
000032  784b              LDRB     r3,[r1,#1]  ; in_sw
000034  7053              STRB     r3,[r2,#1]
;;;37     			data[2] = in_sw[2];
000036  7889              LDRB     r1,[r1,#2]  ; in_sw
000038  7091              STRB     r1,[r2,#2]
;;;38     			data[3] = freq;
00003a  70d5              STRB     r5,[r2,#3]
;;;39     			data[4] = freq >> 8;
00003c  0a29              LSRS     r1,r5,#8
00003e  7111              STRB     r1,[r2,#4]
;;;40     			data[5] = speed;
000040  7150              STRB     r0,[r2,#5]
;;;41     			data[6] = speed >> 8;
000042  0a00              LSRS     r0,r0,#8
;;;42     			can_send_bytes(ID_TX_SW + MOD_ADDR, 0, data, 7);
000044  4df5              LDR      r5,|L1.1052|
000046  7190              STRB     r0,[r2,#6]            ;41
000048  7828              LDRB     r0,[r5,#0]  ; mod_addr
00004a  270d              MOVS     r7,#0xd
00004c  01ff              LSLS     r7,r7,#7
00004e  2307              MOVS     r3,#7
000050  2100              MOVS     r1,#0
000052  19c0              ADDS     r0,r0,r7
000054  f7fffffe          BL       can_send_bytes
;;;43     		}
;;;44     
;;;45     		count++;
000058  7830              LDRB     r0,[r6,#0]  ; count
00005a  1c40              ADDS     r0,r0,#1
00005c  7030              STRB     r0,[r6,#0]
;;;46     		switch (count & 3)
00005e  0780              LSLS     r0,r0,#30
000060  0f80              LSRS     r0,r0,#30
000062  d004              BEQ      |L1.110|
000064  2801              CMP      r0,#1
000066  d017              BEQ      |L1.152|
000068  2802              CMP      r0,#2
00006a  d17d              BNE      |L1.360|
00006c  e0a3              B        |L1.438|
                  |L1.110|
;;;47     		{
;;;48     		case 0:
;;;49     			data[0] = P25;
00006e  48ec              LDR      r0,|L1.1056|
000070  4669              MOV      r1,sp
000072  8800              LDRH     r0,[r0,#0]  ; P25
000074  7008              STRB     r0,[r1,#0]
;;;50     			data[1] = P25 >> 8;
000076  0a00              LSRS     r0,r0,#8
000078  7048              STRB     r0,[r1,#1]
;;;51     			data[2] = P40;
00007a  48ea              LDR      r0,|L1.1060|
;;;52     			data[3] = P40 >> 8;
;;;53     			// data[4] = P25_VOL;
;;;54     			// data[5] = P25_VOL >> 8;
;;;55     			// data[6] = P40_VOL;
;;;56     			// data[7] = P40_VOL >> 8;
;;;57     			can_send_bytes(ID_TX_AD + MOD_ADDR, 0, data, 8);
00007c  2308              MOVS     r3,#8
00007e  8800              LDRH     r0,[r0,#0]            ;51  ; P40
000080  7088              STRB     r0,[r1,#2]            ;51
000082  0a00              LSRS     r0,r0,#8              ;52
000084  70c8              STRB     r0,[r1,#3]            ;52
000086  7828              LDRB     r0,[r5,#0]  ; mod_addr
000088  2567              MOVS     r5,#0x67
00008a  012d              LSLS     r5,r5,#4
00008c  466a              MOV      r2,sp
00008e  2100              MOVS     r1,#0
000090  1940              ADDS     r0,r0,r5
000092  f7fffffe          BL       can_send_bytes
;;;58     			break;
000096  e0ab              B        |L1.496|
                  |L1.152|
;;;59     		case 1:
;;;60     		{
;;;61     			uint8_t i;
;;;62     			uint8_t j;
;;;63     			data[0] = 0;
000098  2700              MOVS     r7,#0
00009a  4668              MOV      r0,sp
;;;64     			for (i = 0, j = 0; i < 8; i++, j++)
;;;65     			{
;;;66     				data[0] |= (PoutS[i].cmd) << i;
00009c  4ee2              LDR      r6,|L1.1064|
00009e  7007              STRB     r7,[r0,#0]            ;63
0000a0  4639              MOV      r1,r7                 ;64
                  |L1.162|
0000a2  466a              MOV      r2,sp
0000a4  7810              LDRB     r0,[r2,#0]
0000a6  2234              MOVS     r2,#0x34
0000a8  434a              MULS     r2,r1,r2
0000aa  1992              ADDS     r2,r2,r6
0000ac  3220              ADDS     r2,r2,#0x20
0000ae  7a92              LDRB     r2,[r2,#0xa]
0000b0  408a              LSLS     r2,r2,r1
0000b2  4310              ORRS     r0,r0,r2
0000b4  1c49              ADDS     r1,r1,#1
0000b6  466a              MOV      r2,sp
0000b8  b2c9              UXTB     r1,r1                 ;64
0000ba  7010              STRB     r0,[r2,#0]
0000bc  2908              CMP      r1,#8                 ;64
0000be  d3f0              BCC      |L1.162|
;;;67     			}
;;;68     
;;;69     			data[1] = 0;
0000c0  7057              STRB     r7,[r2,#1]
;;;70     			for (j = 0; i < POUT_COUNT; i++, j++)
0000c2  2200              MOVS     r2,#0
0000c4  290f              CMP      r1,#0xf
0000c6  d210              BCS      |L1.234|
                  |L1.200|
;;;71     			{
;;;72     				data[1] |= (PoutS[i].cmd) << j;
0000c8  466b              MOV      r3,sp
0000ca  7858              LDRB     r0,[r3,#1]
0000cc  2334              MOVS     r3,#0x34
0000ce  434b              MULS     r3,r1,r3
0000d0  199b              ADDS     r3,r3,r6
0000d2  3320              ADDS     r3,r3,#0x20
0000d4  7a9b              LDRB     r3,[r3,#0xa]
0000d6  4093              LSLS     r3,r3,r2
0000d8  4318              ORRS     r0,r0,r3
0000da  1c49              ADDS     r1,r1,#1
0000dc  1c52              ADDS     r2,r2,#1              ;70
0000de  466b              MOV      r3,sp
0000e0  b2c9              UXTB     r1,r1                 ;70
0000e2  7058              STRB     r0,[r3,#1]
0000e4  b2d2              UXTB     r2,r2                 ;70
0000e6  290f              CMP      r1,#0xf               ;70
0000e8  d3ee              BCC      |L1.200|
                  |L1.234|
;;;73     			}
;;;74     			data[1] |= OD_IN() << 7;
0000ea  4669              MOV      r1,sp
0000ec  7848              LDRB     r0,[r1,#1]
0000ee  49cf              LDR      r1,|L1.1068|
0000f0  6b49              LDR      r1,[r1,#0x34]
0000f2  0649              LSLS     r1,r1,#25
0000f4  0fc9              LSRS     r1,r1,#31
0000f6  01c9              LSLS     r1,r1,#7
0000f8  4308              ORRS     r0,r0,r1
0000fa  4669              MOV      r1,sp
0000fc  7048              STRB     r0,[r1,#1]
;;;75     
;;;76     			data[2] = 0;
0000fe  708f              STRB     r7,[r1,#2]
;;;77     			for (i = 0, j = 0; i < 4; i++, j += 2)
000100  2000              MOVS     r0,#0
000102  4601              MOV      r1,r0
                  |L1.260|
;;;78     			{
;;;79     				data[2] |= (PoutS[i].diag) << j;
000104  466b              MOV      r3,sp
000106  789a              LDRB     r2,[r3,#2]
000108  2334              MOVS     r3,#0x34
00010a  4343              MULS     r3,r0,r3
00010c  199b              ADDS     r3,r3,r6
00010e  3320              ADDS     r3,r3,#0x20
000110  7adb              LDRB     r3,[r3,#0xb]
000112  408b              LSLS     r3,r3,r1
000114  431a              ORRS     r2,r2,r3
000116  1c40              ADDS     r0,r0,#1
000118  1c89              ADDS     r1,r1,#2              ;77
00011a  466b              MOV      r3,sp
00011c  b2c0              UXTB     r0,r0                 ;77
00011e  709a              STRB     r2,[r3,#2]
000120  b2c9              UXTB     r1,r1                 ;77
000122  2804              CMP      r0,#4                 ;77
000124  d3ee              BCC      |L1.260|
;;;80     			}
;;;81     
;;;82     			data[3] = 0;
;;;83     			for (j = 0; i < 8; i++, j += 2)
000126  2100              MOVS     r1,#0
000128  70df              STRB     r7,[r3,#3]            ;82
00012a  2808              CMP      r0,#8
00012c  d20f              BCS      |L1.334|
                  |L1.302|
;;;84     			{
;;;85     				data[3] |= (PoutS[i].diag) << j;
00012e  78da              LDRB     r2,[r3,#3]
000130  2334              MOVS     r3,#0x34
000132  4343              MULS     r3,r0,r3
000134  199b              ADDS     r3,r3,r6
000136  3320              ADDS     r3,r3,#0x20
000138  7adb              LDRB     r3,[r3,#0xb]
00013a  408b              LSLS     r3,r3,r1
00013c  431a              ORRS     r2,r2,r3
00013e  1c40              ADDS     r0,r0,#1
000140  1c89              ADDS     r1,r1,#2              ;83
000142  466b              MOV      r3,sp
000144  b2c0              UXTB     r0,r0                 ;83
000146  70da              STRB     r2,[r3,#3]
000148  b2c9              UXTB     r1,r1                 ;83
00014a  2808              CMP      r0,#8                 ;83
00014c  d3ef              BCC      |L1.302|
                  |L1.334|
;;;86     			}
;;;87     
;;;88     			data[4] = 0;
;;;89     			for (j = 0; i < 12; i++, j += 2)
00014e  2100              MOVS     r1,#0
000150  711f              STRB     r7,[r3,#4]            ;88
000152  280c              CMP      r0,#0xc
000154  d211              BCS      |L1.378|
                  |L1.342|
;;;90     			{
;;;91     				data[4] |= (PoutS[i].diag) << j;
000156  791a              LDRB     r2,[r3,#4]
000158  2334              MOVS     r3,#0x34
00015a  4343              MULS     r3,r0,r3
00015c  199b              ADDS     r3,r3,r6
00015e  3320              ADDS     r3,r3,#0x20
000160  7adb              LDRB     r3,[r3,#0xb]
000162  408b              LSLS     r3,r3,r1
000164  431a              ORRS     r2,r2,r3
000166  e000              B        |L1.362|
                  |L1.360|
000168  e042              B        |L1.496|
                  |L1.362|
00016a  1c40              ADDS     r0,r0,#1
00016c  1c89              ADDS     r1,r1,#2              ;89
00016e  466b              MOV      r3,sp
000170  b2c0              UXTB     r0,r0                 ;89
000172  711a              STRB     r2,[r3,#4]
000174  b2c9              UXTB     r1,r1                 ;89
000176  280c              CMP      r0,#0xc               ;89
000178  d3ed              BCC      |L1.342|
                  |L1.378|
;;;92     			}
;;;93     
;;;94     			data[5] = 0;
;;;95     			for (j = 0; i < POUT_COUNT; i++, j += 2)
00017a  2100              MOVS     r1,#0
00017c  715f              STRB     r7,[r3,#5]            ;94
00017e  280f              CMP      r0,#0xf
000180  d20f              BCS      |L1.418|
                  |L1.386|
;;;96     			{
;;;97     				data[5] |= (PoutS[i].diag) << j;
000182  795a              LDRB     r2,[r3,#5]
000184  2334              MOVS     r3,#0x34
000186  4343              MULS     r3,r0,r3
000188  199b              ADDS     r3,r3,r6
00018a  3320              ADDS     r3,r3,#0x20
00018c  7adb              LDRB     r3,[r3,#0xb]
00018e  408b              LSLS     r3,r3,r1
000190  431a              ORRS     r2,r2,r3
000192  1c40              ADDS     r0,r0,#1
000194  1c89              ADDS     r1,r1,#2              ;95
000196  466b              MOV      r3,sp
000198  b2c0              UXTB     r0,r0                 ;95
00019a  715a              STRB     r2,[r3,#5]
00019c  b2c9              UXTB     r1,r1                 ;95
00019e  280f              CMP      r0,#0xf               ;95
0001a0  d3ef              BCC      |L1.386|
                  |L1.418|
;;;98     			}
;;;99     			can_send_bytes(ID_TX_ST + MOD_ADDR, 0, data, 6);
0001a2  7828              LDRB     r0,[r5,#0]  ; mod_addr
0001a4  252b              MOVS     r5,#0x2b
0001a6  016d              LSLS     r5,r5,#5
0001a8  2306              MOVS     r3,#6
0001aa  466a              MOV      r2,sp
0001ac  2100              MOVS     r1,#0
0001ae  1940              ADDS     r0,r0,r5
0001b0  f7fffffe          BL       can_send_bytes
;;;100    		}
;;;101    		break;
0001b4  e01c              B        |L1.496|
                  |L1.438|
;;;102    		case 2:
;;;103    			data[0] = odo_100m;
0001b6  489e              LDR      r0,|L1.1072|
0001b8  4669              MOV      r1,sp
0001ba  6800              LDR      r0,[r0,#0]  ; odo_100m
0001bc  7008              STRB     r0,[r1,#0]
;;;104    			data[1] = odo_100m >> 8;
0001be  0a02              LSRS     r2,r0,#8
0001c0  704a              STRB     r2,[r1,#1]
;;;105    			data[2] = odo_100m >> 16;
0001c2  0c02              LSRS     r2,r0,#16
0001c4  708a              STRB     r2,[r1,#2]
;;;106    			data[3] = odo_100m >> 24;
0001c6  0e00              LSRS     r0,r0,#24
0001c8  70c8              STRB     r0,[r1,#3]
;;;107    			data[4] = trip_100m;
0001ca  489a              LDR      r0,|L1.1076|
;;;108    			data[5] = trip_100m >> 8;
;;;109    			data[6] = param.pluse;
;;;110    			data[7] = param.pluse >> 8;
;;;111    			can_send_bytes(ID_TX_MILE + MOD_ADDR, 0, data, 8);
0001cc  460a              MOV      r2,r1
0001ce  8800              LDRH     r0,[r0,#0]            ;107  ; trip_100m
0001d0  7108              STRB     r0,[r1,#4]            ;107
0001d2  0a00              LSRS     r0,r0,#8              ;108
0001d4  7148              STRB     r0,[r1,#5]            ;108
0001d6  488e              LDR      r0,|L1.1040|
0001d8  2308              MOVS     r3,#8
0001da  8800              LDRH     r0,[r0,#0]            ;109  ; param
0001dc  7188              STRB     r0,[r1,#6]            ;109
0001de  0a00              LSRS     r0,r0,#8              ;110
0001e0  71c8              STRB     r0,[r1,#7]            ;110
0001e2  7828              LDRB     r0,[r5,#0]  ; mod_addr
0001e4  2545              MOVS     r5,#0x45
0001e6  012d              LSLS     r5,r5,#4
0001e8  2100              MOVS     r1,#0
0001ea  1940              ADDS     r0,r0,r5
0001ec  f7fffffe          BL       can_send_bytes
                  |L1.496|
;;;112    			break;
;;;113    #ifdef CURRENT_SEND
;;;114    		case 3:
;;;115    		{
;;;116    			data[0] = PoutS[0].cur_100ma;
;;;117    			data[1] = PoutS[1].cur_100ma;
;;;118    			data[2] = PoutS[2].cur_100ma;
;;;119    			data[3] = PoutS[3].cur_100ma;
;;;120    			data[4] = PoutS[4].cur_100ma;
;;;121    			data[5] = PoutS[5].cur_100ma;
;;;122    			data[6] = PoutS[6].cur_100ma;
;;;123    			data[7] = PoutS[7].cur_100ma;
;;;124    			can_send_bytes(ID_TX_CURRENT + 2 * MOD_ADDR - 2, 0, data, 8);
;;;125    
;;;126    			data[0] = PoutS[8].cur_100ma;
;;;127    			data[1] = PoutS[9].cur_100ma;
;;;128    			data[2] = PoutS[10].cur_100ma;
;;;129    			data[3] = PoutS[11].cur_100ma;
;;;130    			data[4] = PoutS[12].cur_100ma;
;;;131    			data[5] = PoutS[13].cur_100ma;
;;;132    			data[6] = PoutS[14].cur_100ma;
;;;133    			can_send_bytes(ID_TX_CURRENT + 2 * MOD_ADDR - 1, 0, data, 7);
;;;134    		}
;;;135    		break;
;;;136    #endif
;;;137    		}
;;;138    
;;;139    		wdt_clear();
0001f0  f7fffffe          BL       wdt_clear
                  LC_LABEL141
;;;140    
;;;141    		PT_WAIT_UNTIL(pt, ((int)(systick_ms - time) >= 0));
0001f4  4890              LDR      r0,|L1.1080|
0001f6  6020              STR      r0,[r4,#0]
0001f8  4883              LDR      r0,|L1.1032|
0001fa  6801              LDR      r1,[r0,#0]  ; systick_ms
0001fc  4883              LDR      r0,|L1.1036|
0001fe  68c0              LDR      r0,[r0,#0xc]  ; time
000200  1a08              SUBS     r0,r1,r0
000202  d400              BMI      |L1.518|
000204  e703              B        |L1.14|
                  |L1.518|
000206  2000              MOVS     r0,#0
;;;142    	}
;;;143    	PT_INFINITE_LOOP_END(pt);
;;;144    }
000208  b003              ADD      sp,sp,#0xc
00020a  bdf0              POP      {r4-r7,pc}
;;;145    
                          ENDP

                  InitSoftVer PROC
;;;162    
;;;163    void InitSoftVer()
00020c  b570              PUSH     {r4-r6,lr}
;;;164    {
;;;165    	int i;
;;;166    
;;;167    	//	for(i = 0;((i<(sizeof(ordv)-1)) && (i<6));i+=2)
;;;168    	//		SoftVer[i>>1] = STR2BCD(ordv, i);
;;;169    	//
;;;170    	//	if(i<sizeof(ordv))
;;;171    	//		SoftVer[i>>1] = STRBIN2BCD(ordv, i, 0);
;;;172    	//	i+=2;
;;;173    	//
;;;174    	//	for(;i<6;i+= 2)
;;;175    	//		SoftVer[i>>1] = 0;
;;;176    
;;;177    	SoftVer[0] = STR2BCD(ordv, 0);	//获取版本号转为BCD
00020e  4c8b              LDR      r4,|L1.1084|
000210  2022              MOVS     r0,#0x22
000212  7020              STRB     r0,[r4,#0]
;;;178    	SoftVer[1] = STR2BCD(ordv, 2);
000214  2508              MOVS     r5,#8
000216  7065              STRB     r5,[r4,#1]
;;;179    	SoftVer[2] = STR2BCD(ordv, 4);
000218  2001              MOVS     r0,#1
00021a  70a0              STRB     r0,[r4,#2]
;;;180    
;;;181    	for (i = 0; i < 12; i++)
;;;182    	{
;;;183    		if ((date[0] == month[i][0]) && (date[1] == month[i][1]) && (date[2] == month[i][2]))
00021c  4a88              LDR      r2,|L1.1088|
00021e  2000              MOVS     r0,#0                 ;181
                  |L1.544|
000220  0081              LSLS     r1,r0,#2
000222  5851              LDR      r1,[r2,r1]
000224  780b              LDRB     r3,[r1,#0]
000226  2b44              CMP      r3,#0x44
000228  d105              BNE      |L1.566|
00022a  784b              LDRB     r3,[r1,#1]
00022c  2b65              CMP      r3,#0x65
00022e  d102              BNE      |L1.566|
000230  7889              LDRB     r1,[r1,#2]
000232  2963              CMP      r1,#0x63
000234  d00a              BEQ      |L1.588|
                  |L1.566|
000236  1c40              ADDS     r0,r0,#1
000238  280c              CMP      r0,#0xc               ;181
00023a  dbf1              BLT      |L1.544|
                  |L1.572|
;;;184    		{
;;;185    			i++;
;;;186    			SoftVer[3] = BIN2BCD(i);	 //获取月份并转为BCD，例如Oct转为10。
;;;187    			break;
;;;188    		}
;;;189    	}
;;;190    	SoftVer[4] = STR2BCD(date, 4); //获取日期并转为BCD，例如3转为03。
00023c  2012              MOVS     r0,#0x12
00023e  7120              STRB     r0,[r4,#4]
;;;191    	SoftVer[5] = STR2BCD(time, 0); //获取小时并转为BCD，例如3转为03。
000240  7165              STRB     r5,[r4,#5]
;;;192    	SoftVer[6] = STR2BCD(time, 3); //获取分钟并转为BCD，例如59转为59。
000242  2054              MOVS     r0,#0x54
000244  71a0              STRB     r0,[r4,#6]
;;;193    	SoftVer[7] = STR2BCD(time, 6); //获取秒并转为BCD，例如59转为59。
000246  2024              MOVS     r0,#0x24
000248  71e0              STRB     r0,[r4,#7]
;;;194    }
00024a  bd70              POP      {r4-r6,pc}
                  |L1.588|
00024c  210a              MOVS     r1,#0xa               ;186
00024e  1c40              ADDS     r0,r0,#1              ;186
000250  f7fffffe          BL       __aeabi_idivmod
000254  0100              LSLS     r0,r0,#4              ;186
000256  4308              ORRS     r0,r0,r1              ;186
000258  70e0              STRB     r0,[r4,#3]            ;186
00025a  e7ef              B        |L1.572|
;;;195    
                          ENDP

                  protothread_can_test PROC
;;;197    
;;;198    int protothread_can_test(struct pt *pt)
00025c  b570              PUSH     {r4-r6,lr}
;;;199    {
;;;200    	PT_BEGIN(pt);
00025e  6801              LDR      r1,[r0,#0]
;;;201    
;;;202    	static uint32_t time;
;;;203    	uint8_t data[8];
;;;204    
;;;205    	/* We loop forever here. */
;;;206    	while (1)
;;;207    	{
;;;208    		// 500ms
;;;209    		data[0] = 6;
;;;210    		data[1] = 5;
;;;211    		data[2] = 0x23;
;;;212    		data[3] = 0x11;
;;;213    		data[4] = 0;
;;;214    		data[5] = 0x19;
;;;215    		data[6] = 0x05;
;;;216    		data[7] = 0x14;
;;;217    		can_send_bytes(0x52E, 0, data, 8);
;;;218    
;;;219    		PT_DELAY_MS(pt, 500);
000260  4d69              LDR      r5,|L1.1032|
000262  4e6a              LDR      r6,|L1.1036|
000264  b082              SUB      sp,sp,#8              ;199
000266  4604              MOV      r4,r0                 ;199
000268  2900              CMP      r1,#0                 ;200
00026a  d000              BEQ      |L1.622|
00026c  4708              BX       r1                    ;200
                  |L1.622|
00026e  2006              MOVS     r0,#6                 ;209
000270  466a              MOV      r2,sp                 ;209
000272  7010              STRB     r0,[r2,#0]            ;209
000274  2005              MOVS     r0,#5                 ;210
000276  7050              STRB     r0,[r2,#1]            ;210
000278  2123              MOVS     r1,#0x23              ;211
00027a  7091              STRB     r1,[r2,#2]            ;211
00027c  2111              MOVS     r1,#0x11              ;212
00027e  70d1              STRB     r1,[r2,#3]            ;212
000280  2100              MOVS     r1,#0                 ;213
000282  7111              STRB     r1,[r2,#4]            ;213
000284  2119              MOVS     r1,#0x19              ;214
000286  7151              STRB     r1,[r2,#5]            ;214
000288  7190              STRB     r0,[r2,#6]            ;215
00028a  2014              MOVS     r0,#0x14              ;216
00028c  71d0              STRB     r0,[r2,#7]            ;216
00028e  2308              MOVS     r3,#8                 ;217
000290  2100              MOVS     r1,#0                 ;217
000292  486c              LDR      r0,|L1.1092|
000294  f7fffffe          BL       can_send_bytes
000298  6828              LDR      r0,[r5,#0]  ; systick_ms
00029a  30ff              ADDS     r0,r0,#0xff
00029c  30f5              ADDS     r0,r0,#0xf5
00029e  6130              STR      r0,[r6,#0x10]  ; time
                  LC_LABEL219
0002a0  4869              LDR      r0,|L1.1096|
0002a2  6020              STR      r0,[r4,#0]
0002a4  6828              LDR      r0,[r5,#0]  ; systick_ms
0002a6  6931              LDR      r1,[r6,#0x10]  ; time
0002a8  1a40              SUBS     r0,r0,r1
0002aa  d5e0              BPL      |L1.622|
0002ac  2000              MOVS     r0,#0
;;;220    		/* And we loop. */
;;;221    	}
;;;222    	PT_INFINITE_LOOP_END(pt);
;;;223    }
0002ae  b002              ADD      sp,sp,#8
0002b0  bd70              POP      {r4-r6,pc}
;;;224    
                          ENDP

                  dash_cmd_parse PROC
;;;350    
;;;351    inline void dash_cmd_parse(uint16_t cmd, uint16_t cmd_ext)
0002b2  b5f8              PUSH     {r3-r7,lr}
;;;352    {
0002b4  4606              MOV      r6,r0
0002b6  460d              MOV      r5,r1
;;;353    	int i;
;;;354    
;;;355    	KEY_ON = (cmd_ext & 0x10) > 0;
0002b8  06c8              LSLS     r0,r1,#27
0002ba  0fc1              LSRS     r1,r0,#31
0002bc  4853              LDR      r0,|L1.1036|
0002be  7041              STRB     r1,[r0,#1]
;;;356    	KEY_ACC = (cmd_ext & 0x20) > 0;
0002c0  06a9              LSLS     r1,r5,#26
0002c2  0fc9              LSRS     r1,r1,#31
0002c4  7081              STRB     r1,[r0,#2]
;;;357    	
;;;358    #ifdef KEY_SOS_ENABLE
;;;359    	KEY_SOS = (cmd_ext & 0x80) > 0;
0002c6  0629              LSLS     r1,r5,#24
0002c8  0fc9              LSRS     r1,r1,#31
0002ca  70c1              STRB     r1,[r0,#3]
;;;360    #endif
;;;361    
;;;362    #ifndef WIPER_DISABLE
;;;363      WIPER_DISABLE = (cmd_ext & 0x400) > 0;
;;;364    #endif
;;;365    	
;;;366    #if SUPPORT_WIPER == 1
;;;367    	if ((WIPER_DISABLE == 0) && (MOD_ADDR == ADDR1_MOD))
0002cc  4953              LDR      r1,|L1.1052|
0002ce  780a              LDRB     r2,[r1,#0]  ; mod_addr
0002d0  2a01              CMP      r2,#1
0002d2  d008              BEQ      |L1.742|
;;;368    		i = 2; //快档和慢档输出受雨刮逻辑控制，这边跳过
;;;369    	else
;;;370    #endif
;;;371    		i = 0;
0002d4  2400              MOVS     r4,#0
                  |L1.726|
;;;372    
;;;373    	for (; i < POUT_COUNT; i++)
;;;374    	{
;;;375    		if ((KEY_ON == 0) && (KEY_ACC == 0)
0002d6  484d              LDR      r0,|L1.1036|
0002d8  7841              LDRB     r1,[r0,#1]  ; KEY_ON
0002da  7882              LDRB     r2,[r0,#2]  ; KEY_ACC
0002dc  78c0              LDRB     r0,[r0,#3]  ; KEY_SOS
0002de  4311              ORRS     r1,r1,r2
0002e0  4301              ORRS     r1,r1,r0
0002e2  d002              BEQ      |L1.746|
0002e4  e022              B        |L1.812|
                  |L1.742|
0002e6  2402              MOVS     r4,#2                 ;368
0002e8  e7f5              B        |L1.726|
                  |L1.746|
;;;376    		#ifdef  KEY_SOS_ENABLE
;;;377    			&& (KEY_SOS == 0)
;;;378    		#endif
;;;379    		)
;;;380    		{
;;;381    #ifdef PROTECTION_MAX_RETRY_COUNT_RESET
;;;382    			PoutS[i].errcount = 0;
;;;383    #endif
;;;384    
;;;385    			switch (MOD_ADDR)
0002ea  484c              LDR      r0,|L1.1052|
0002ec  7802              LDRB     r2,[r0,#0]  ; mod_addr
0002ee  2a01              CMP      r2,#1
0002f0  d004              BEQ      |L1.764|
0002f2  2a02              CMP      r2,#2
0002f4  d01a              BEQ      |L1.812|
0002f6  2a03              CMP      r2,#3
0002f8  d118              BNE      |L1.812|
0002fa  e00e              B        |L1.794|
                  |L1.764|
;;;386    			{
;;;387    			case ADDR1_MOD:
;;;388    #ifdef LOGIC_OUTS_MOD1
;;;389    				if (strstr(LOGIC_OUTS_MOD1, PoutS[i].name))
;;;390    				{
;;;391    					continue;
;;;392    				}
;;;393    #endif
;;;394    #ifdef NORMOL_OUTS_MOD1
;;;395    				if (strstr(NORMOL_OUTS_MOD1, PoutS[i].name))
0002fc  2034              MOVS     r0,#0x34
0002fe  4621              MOV      r1,r4
000300  4341              MULS     r1,r0,r1
000302  4849              LDR      r0,|L1.1064|
000304  1809              ADDS     r1,r1,r0
000306  460f              MOV      r7,r1
000308  a050              ADR      r0,|L1.1100|
00030a  f7fffffe          BL       strstr
00030e  2800              CMP      r0,#0
000310  d00c              BEQ      |L1.812|
;;;396    				{
;;;397    					PoutS[i].cmd = 1;
000312  2001              MOVS     r0,#1
000314  3720              ADDS     r7,r7,#0x20
000316  72b8              STRB     r0,[r7,#0xa]
;;;398    					continue;
000318  e012              B        |L1.832|
                  |L1.794|
;;;399    				}
;;;400    #endif
;;;401    				break;
;;;402    			case ADDR2_MOD:
;;;403    #ifdef LOGIC_OUTS_MOD2
;;;404    				if (strstr(LOGIC_OUTS_MOD2, PoutS[i].name))
;;;405    				{
;;;406    					continue;
;;;407    				}
;;;408    #endif
;;;409    #ifdef NORMOL_OUTS_MOD2
;;;410    				if (strstr(NORMOL_OUTS_MOD2, PoutS[i].name))
;;;411    				{
;;;412    					PoutS[i].cmd = 1;
;;;413    					continue;
;;;414    				}
;;;415    #endif
;;;416    				break;
;;;417    			case ADDR3_MOD:
;;;418    #ifdef LOGIC_OUTS_MOD3
;;;419    				if (strstr(LOGIC_OUTS_MOD3, PoutS[i].name))
00031a  2034              MOVS     r0,#0x34
00031c  4942              LDR      r1,|L1.1064|
00031e  4360              MULS     r0,r4,r0
000320  1841              ADDS     r1,r0,r1
000322  a04c              ADR      r0,|L1.1108|
000324  f7fffffe          BL       strstr
000328  2800              CMP      r0,#0
00032a  d109              BNE      |L1.832|
                  |L1.812|
00032c  4630              MOV      r0,r6
;;;420    				{
;;;421    					continue;
;;;422    				}
;;;423    #endif
;;;424    #ifdef NORMOL_OUTS_MOD3
;;;425    				if (strstr(NORMOL_OUTS_MOD3, PoutS[i].name))
;;;426    				{
;;;427    					PoutS[i].cmd = 1;
;;;428    					continue;
;;;429    				}
;;;430    #endif
;;;431    				break;
;;;432    			case ADDR4_MOD:
;;;433    #ifdef LOGIC_OUTS_MOD4
;;;434    				if (strstr(LOGIC_OUTS_MOD4, PoutS[i].name))
;;;435    				{
;;;436    					continue;
;;;437    				}
;;;438    #endif
;;;439    #ifdef NORMOL_OUTS_MOD4
;;;440    				if (strstr(NORMOL_OUTS_MOD4, PoutS[i].name))
;;;441    				{
;;;442    					PoutS[i].cmd = 1;
;;;443    					continue;
;;;444    				}
;;;445    #endif
;;;446    				break;
;;;447    			default:
;;;448    				break;
;;;449    			}
;;;450    		}
;;;451    		PoutS[i].cmd = ((cmd >> i) & 1) > 0;
00032e  40e0              LSRS     r0,r0,r4
000330  07c2              LSLS     r2,r0,#31
000332  2034              MOVS     r0,#0x34
000334  493c              LDR      r1,|L1.1064|
000336  4360              MULS     r0,r4,r0
000338  0fd2              LSRS     r2,r2,#31
00033a  1840              ADDS     r0,r0,r1
00033c  3020              ADDS     r0,r0,#0x20
00033e  7282              STRB     r2,[r0,#0xa]
                  |L1.832|
000340  1c64              ADDS     r4,r4,#1
000342  2c0f              CMP      r4,#0xf               ;373
000344  dbc7              BLT      |L1.726|
;;;452    	}
;;;453    
;;;454    #if SUPPORT_WIPER == 1
;;;455    	if ((WIPER_DISABLE == 0) && (MOD_ADDR == ADDR1_MOD))
000346  4835              LDR      r0,|L1.1052|
000348  7800              LDRB     r0,[r0,#0]  ; mod_addr
00034a  2801              CMP      r0,#1
00034c  d102              BNE      |L1.852|
;;;456    	{
;;;457    		rain_cmd_parse(cmd_ext);
00034e  4628              MOV      r0,r5
000350  f7fffffe          BL       rain_cmd_parse
                  |L1.852|
;;;458    #ifdef RAIN_TEST
;;;459    		extern uint8_t rain_test_delay;
;;;460    		rain_test_delay = cmd_ext >> 8;
;;;461    #endif
;;;462    	}
;;;463    #endif
;;;464    	
;;;465    	OD_OUT((cmd & 0x8000) > 0);
000354  0bf2              LSRS     r2,r6,#15
000356  2140              MOVS     r1,#0x40
000358  4840              LDR      r0,|L1.1116|
00035a  f7fffffe          BL       gpio_bit_write
;;;466    }
00035e  bdf8              POP      {r3-r7,pc}
;;;467    
                          ENDP

                  protothread_can_recv PROC
;;;502    #endif
;;;503    int protothread_can_recv(struct pt *pt)
000360  b5f0              PUSH     {r4-r7,lr}
;;;504    {
000362  4604              MOV      r4,r0
;;;505    	PT_BEGIN(pt);
000364  6800              LDR      r0,[r0,#0]
000366  b08d              SUB      sp,sp,#0x34           ;504
000368  2800              CMP      r0,#0
00036a  d000              BEQ      |L1.878|
00036c  4700              BX       r0
                  |L1.878|
;;;506    	static uint32_t timeout_6a4;
;;;507    	static uint8_t data[8];
;;;508    	static uint16_t cmd_ext;
;;;509    	int i;
;;;510    
;;;511    	timeout_6a4 = systick_ms + 4000;
00036e  4826              LDR      r0,|L1.1032|
000370  6801              LDR      r1,[r0,#0]  ; systick_ms
000372  207d              MOVS     r0,#0x7d
000374  0140              LSLS     r0,r0,#5
000376  1809              ADDS     r1,r1,r0
000378  4824              LDR      r0,|L1.1036|
00037a  6141              STR      r1,[r0,#0x14]  ; timeout_6a4
                  |L1.892|
                  LC_LABEL516
;;;512    
;;;513    	/* We loop forever here. */
;;;514    	while (1)
;;;515    	{
;;;516    		PT_WAIT_UNTIL(pt, (can_frame_received() || ((int)(systick_ms - timeout_6a4) >= 0)));
;;;517    		if (((int)(systick_ms - timeout_6a4) >= 0))
;;;518    		{
;;;519    			timeout_6a4 = systick_ms + 10000;
;;;520    			cmd_ext = 0;
;;;521    			dash_cmd_parse(0, cmd_ext);
;;;522    		}
;;;523    
;;;524    		if (can_frame_received())
;;;525    		{
;;;526    			can_recv_frame(&canrx);
00037c  4838              LDR      r0,|L1.1120|
;;;527    
;;;528    			switch (canrx.id)
;;;529    			{
;;;530    #ifdef MOD1_SW_DATA
;;;531    			case 0x681: // PWM
;;;532    			{
;;;533    				sw_1[0] = canrx.data[0];
;;;534    				sw_1[1] = canrx.data[1];
;;;535    				sw_1[2] = canrx.data[2];
;;;536    			}
;;;537    			break;
;;;538    #endif
;;;539    #ifdef MOD2_SW_DATA
;;;540    			case 0x682: // PWM
;;;541    			{
;;;542    				sw_2[0] = canrx.data[0];
;;;543    				sw_2[1] = canrx.data[1];
;;;544    				sw_2[2] = canrx.data[2];
;;;545    			}
;;;546    			break;
;;;547    #endif
;;;548    #ifdef MOD3_SW_DATA
;;;549    			case 0x683: // PWM
;;;550    			{
;;;551    				sw_3[0] = canrx.data[0];
;;;552    				sw_3[1] = canrx.data[1];
;;;553    				sw_3[2] = canrx.data[2];
;;;554    			}
;;;555    			break;
;;;556    #endif
;;;557    #ifdef MOD4_SW_DATA
;;;558    			case 0x684: // PWM
;;;559    			{
;;;560    				sw_4[0] = canrx.data[0];
;;;561    				sw_4[1] = canrx.data[1];
;;;562    				sw_4[2] = canrx.data[2];
;;;563    			}
;;;564    			break;
;;;565    #endif
;;;566    
;;;567    			case ID_RX_DASH:
;;;568    			{
;;;569    				timeout_6a4 = systick_ms + 4000;
;;;570    				cmd_ext = canrx.data[6] + (((uint16_t)canrx.data[7]) << 8);
;;;571    
;;;572    				if (MOD_ADDR != ADDR4_MOD)
;;;573    				{
;;;574    					dash_cmd_parse(*((uint16_t *)(canrx.data + (MOD_ADDR << 1) - 2)), cmd_ext); // normal
;;;575    				}
;;;576    			}
;;;577    			break;
;;;578    
;;;579    #ifdef MOD4
;;;580    			case ID_ADD_DASH:
;;;581    			{
;;;582    				if (MOD_ADDR == ADDR4_MOD)
;;;583    				{
;;;584    					dash_cmd_parse(*((uint16_t *)(canrx.data + MOD4_BYTE_START)), cmd_ext); // normal
;;;585    				}
;;;586    			}
;;;587    			break;
;;;588    #endif
;;;589    			
;;;590    #ifdef PWMTIME_SET_ENABLE
;;;591    			case ID_PWMTIME_SET:  //0x6F0
;;;592    			case ID_PWMTIME_SET+1:
;;;593    				
;;;594    			case ID_PWMTIME_SET+2:
;;;595    			case ID_PWMTIME_SET+3:
;;;596    				
;;;597    			case ID_PWMTIME_SET+4:
;;;598    			case ID_PWMTIME_SET+5:
;;;599    				
;;;600    #ifdef MOD4
;;;601    			case ID_PWMTIME_SET+6:
;;;602    			case ID_PWMTIME_SET+7:
;;;603    #endif
;;;604    				{
;;;605    					uint8_t addr = canrx.id - ID_PWMTIME_SET;
;;;606    					if ((addr >> 1) == MOD_ADDR_S0)
;;;607    					{
;;;608    						uint8_t index = (addr & 1) *8;
;;;609    						
;;;610    						for (i = 0; i < 8; i++)
;;;611    						{								
;;;612    								PoutS[index].pwmend = canrx.data[i];
;;;613    							
;;;614    								if((++index) >= POUT_COUNT)
;;;615    										break;							 
;;;616    						}
;;;617    					}
;;;618    				}
;;;619    				break;
;;;620    #endif
;;;621    				
;;;622    			case ID_RX_PWM: // PWM
;;;623    			{
;;;624    				uint8_t startbyte = (MOD_ADDR << 1) - 2;
;;;625    				uint16_t *temp = (uint16_t *)(canrx.data + startbyte);
;;;626    
;;;627    				for (i = 0; i < POUT_COUNT; i++)
;;;628    				{
;;;629    					if(PoutS[i].pwmfixed == 0)
00037e  4e2a              LDR      r6,|L1.1064|
;;;630    					{
;;;631    							PoutS[i].pwmable = (((*temp) >> i) & 1) > 0;
;;;632    					}
;;;633    				}
;;;634    			}
;;;635    			break;
;;;636    
;;;637    			case ID_BOOTLOADER:
;;;638    			case 0x520:
;;;639    			case 0x521:
;;;640    			case 0x522:
;;;641    #ifdef MOD4
;;;642    			case 0x523:
;;;643    #endif
;;;644    				if ((0x51F + MOD_ADDR) == canrx.id)
;;;645    				{
;;;646    					if (canrx.data[0] == 0x5)
;;;647    					{
;;;648    #define PASSWORD_ADDR 0x17C00
;;;649    #include "BF7006AMxx_eflash.h"
;;;1      /*!
;;;650    						flash_sector_erase(PASSWORD_ADDR >> 10, true);
;;;651    						NVIC_SystemReset();
;;;652    					}
;;;653    					else if (canrx.data[0] == 0x6)
;;;654    					{
;;;655    						data[0] = 7;
;;;656    						data[1] = (((0x51f + MOD_ADDR) >> 8) & 0xff);
;;;657    						data[2] = (0x51f + MOD_ADDR) & 0xff;
;;;658    						data[3] = 0x70; //芯片型号
;;;659    						data[4] = 0x01; //版本号
;;;660    						data[5] = 0x21;
;;;661    						data[6] = 0x05;
;;;662    						data[7] = 0x10;
;;;663    
;;;664    						can_send_bytes(0x052e, 0, data, 8);
;;;665    					}
;;;666    				}
;;;667    				else
;;;668    				{
;;;669    					if (canrx.data[0] == 0x01)
;;;670    					{
;;;671    						cmd_ext = 0;
;;;672    						dash_cmd_parse(0, cmd_ext);
;;;673    						can_send_enable(0);
;;;674    					}
;;;675    					else if (canrx.data[0] == 0x03)
;;;676    					{
;;;677    						can_send_enable(1);
;;;678    					}
;;;679    				}
;;;680    				break;
;;;681    			case ID_FW_UPDATE:
;;;682    			case ID_FW_UPDATE + 1:
;;;683    			case ID_FW_UPDATE + 2:
;;;684    #ifdef MOD4
;;;685    			case ID_FW_UPDATE + 3:
;;;686    #endif
;;;687    				if ((ID_FW_UPDATE + MOD_ADDR) == canrx.id)
;;;688    				{
;;;689    					if (canrx.data[0] == 0xAE && canrx.data[1] == 0xEA)
;;;690    					{
;;;691    						NVIC_SystemReset();
;;;692    					}
;;;693    				}
;;;694    				break;
;;;695    			case ID_TX_TEST:
;;;696    				switch (canrx.data[0])
;;;697    				{
;;;698    				case 0x56: /* 读取165，返回开关输入状态数据 */
;;;699    					data[0] = in_sw[0];
;;;700    					data[1] = in_sw[1];
;;;701    					can_send_bytes(ID_TX_TEST, 0, data, 2);
;;;702    					break;
;;;703    
;;;704    				case 0x57: /* 打开、关闭指定输出 */
;;;705    					PoutS[canrx.data[1]].cmd = canrx.data[2] > 0;
;;;706    					break;
;;;707    
;;;708    				case 0x58: /* 读取输出反馈值 */
;;;709    					data[0] = PoutS[canrx.data[1]].cur_100ma;
;;;710    					data[1] = PoutS[canrx.data[1]].cur_100ma >> 8;
;;;711    					can_send_bytes(ID_TX_TEST, 0, data, 2);
;;;712    					break;
;;;713    
;;;714    				case 0x59: /* 两路电压输入信号读取*/
;;;715    					data[0] = P25;
;;;716    					data[1] = P25 >> 8;
;;;717    					data[2] = P40;
;;;718    					data[3] = P40 >> 8;
;;;719    					can_send_bytes(ID_TX_TEST, 0, data, 4);
;;;720    					break;
;;;721    
;;;722    				case 0x60: /* 获取输入脉冲频率*/
;;;723    					data[0] = freq;
;;;724    					data[0] = freq >> 8;
;;;725    					can_send_bytes(ID_TX_TEST, 0, data, 2);
;;;726    					break;
;;;727    
;;;728    				case 0x63: /* 检测ADD1& NK1两路输入 */
;;;729    					data[0] = in_sw[2] & 3;
;;;730    					can_send_bytes(ID_TX_TEST, 0, data, 2);
;;;731    					break;
;;;732    				default:
;;;733    					break;
;;;734    				}
;;;735    			case ID_TX_TEST + 1:
;;;736    			case ID_TX_TEST + 2:
;;;737    			case ID_TX_TEST + 3:
;;;738    #ifdef MOD4
;;;739    			case ID_TX_TEST + 4:
;;;740    #endif
;;;741    				if ((ID_TX_TEST + MOD_ADDR) == canrx.id)
;;;742    				{
;;;743    					switch (canrx.data[0])
;;;744    					{
;;;745    					case 0x56: /*设置百米脉冲数*/
;;;746    						param.pluse = (uint16_t)(canrx.data[2] << 8) | canrx.data[1];
;;;747    						PT_WAIT_UNTIL(pt, (EepromFlag == 0));
;;;748    						EepromFlag = 1;
;;;749    						save_param();
;;;750    						EepromFlag = 0;
;;;751    						can_send_bytes(ID_TX_TEST + MOD_ADDR, 0, (uint8_t *)"\x56\x55", 2);
;;;752    						break;
;;;753    					case 0xA0: /*读取百米脉冲数*/
;;;754    						data[0] = 0xA0;
;;;755    						data[1] = param.pluse;
;;;756    						data[2] = (param.pluse >> 8);
;;;757    						can_send_bytes(ID_TX_TEST + MOD_ADDR, 0, data, 3);
;;;758    						break;
;;;759    					case 0x59: /*设置总里程数*/
;;;760    
;;;761    						odo_100m = (uint32_t)canrx.data[4] << 24;
;;;762    						odo_100m |= (uint32_t)canrx.data[3] << 16;
;;;763    						odo_100m |= (uint32_t)canrx.data[2] << 8;
;;;764    						odo_100m |= (uint32_t)canrx.data[1];
;;;765    
;;;766    						PT_WAIT_UNTIL(pt, (EepromFlag == 0));
;;;767    						EepromFlag = 1;
;;;768    						PT_SPAWN(pt, &ptx, save_odo_pt(&ptx));
;;;769    						EepromFlag = 0;
;;;770    
;;;771    						can_send_bytes(ID_TX_TEST + MOD_ADDR, 0, (uint8_t *)"\x59\x55", 2);
;;;772    						break;
;;;773    
;;;774    					case 0xA1: /*读取总里程数*/
;;;775    						data[0] = 0xA1;
;;;776    						data[1] = (uint8_t)odo_100m;
;;;777    						data[2] = (uint8_t)(odo_100m >> 8);
;;;778    						data[3] = (uint8_t)(odo_100m >> 16);
;;;779    						data[4] = (uint8_t)(odo_100m >> 24);
;;;780    						can_send_bytes(ID_TX_TEST + MOD_ADDR, 0, data, 5);
;;;781    						break;
;;;782    
;;;783    					case 0x5C: /*设置单次里程*/
;;;784    
;;;785    						trip_100m = (uint16_t)(canrx.data[2] << 8 | canrx.data[1]);
;;;786    
;;;787    						PT_WAIT_UNTIL(pt, (EepromFlag == 0));
;;;788    						EepromFlag = 1;
;;;789    						PT_SPAWN(pt, &ptx, save_odo_pt(&ptx));
;;;790    						EepromFlag = 0;
;;;791    						can_send_bytes(ID_TX_TEST + MOD_ADDR, 0, (uint8_t *)"\x5C\x55", 2);
;;;792    						break;
;;;793    					case 0xA3: /*读取单次里程*/
;;;794    						data[0] = 0xA3;
;;;795    						data[1] = trip_100m;
;;;796    						data[2] = (trip_100m >> 8);
;;;797    						can_send_bytes(ID_TX_TEST + MOD_ADDR, 0, data, 3);
;;;798    						break;
;;;799    
;;;800    					case 0xFE: /*读取版本号*/
;;;801    						can_send_bytes(ID_TX_TEST + MOD_ADDR, 0, SoftVer, 8);
;;;802    						break;
;;;803    
;;;804    					case 0xFF: /*读取反馈电流，分辨率0.1A*/
;;;805    						data[0] = PoutS[0].cur_100ma > 0xFF ? 0xFF : (uint8_t)PoutS[0].cur_100ma;
;;;806    						data[1] = PoutS[1].cur_100ma > 0xFF ? 0xFF : (uint8_t)PoutS[1].cur_100ma;
000380  9003              STR      r0,[sp,#0xc]
000382  4630              MOV      r0,r6
000384  3040              ADDS     r0,r0,#0x40
;;;807    						data[2] = PoutS[2].cur_100ma > 0xFF ? 0xFF : (uint8_t)PoutS[2].cur_100ma;
000386  900b              STR      r0,[sp,#0x2c]
000388  3040              ADDS     r0,r0,#0x40
;;;808    						data[3] = PoutS[3].cur_100ma > 0xFF ? 0xFF : (uint8_t)PoutS[3].cur_100ma;
;;;809    						data[4] = PoutS[4].cur_100ma > 0xFF ? 0xFF : (uint8_t)PoutS[4].cur_100ma;
00038a  9002              STR      r0,[sp,#8]
00038c  3040              ADDS     r0,r0,#0x40
;;;810    						data[5] = PoutS[5].cur_100ma > 0xFF ? 0xFF : (uint8_t)PoutS[5].cur_100ma;
00038e  900a              STR      r0,[sp,#0x28]
000390  3040              ADDS     r0,r0,#0x40
;;;811    						data[6] = PoutS[6].cur_100ma > 0xFF ? 0xFF : (uint8_t)PoutS[6].cur_100ma;
000392  9009              STR      r0,[sp,#0x24]
000394  3040              ADDS     r0,r0,#0x40
;;;812    						data[7] = PoutS[7].cur_100ma > 0xFF ? 0xFF : (uint8_t)PoutS[7].cur_100ma;
000396  9008              STR      r0,[sp,#0x20]
000398  3040              ADDS     r0,r0,#0x40
;;;813    						can_send_bytes(ID_TX_CURRENT + 2 * MOD_ADDR - 2, 0, data, 8);
;;;814    
;;;815    						data[0] = PoutS[8].cur_100ma > 0xFF ? 0xFF : (uint8_t)PoutS[8].cur_100ma;
00039a  9007              STR      r0,[sp,#0x1c]
00039c  3040              ADDS     r0,r0,#0x40
;;;816    						data[1] = PoutS[9].cur_100ma > 0xFF ? 0xFF : (uint8_t)PoutS[9].cur_100ma;
;;;817    						data[2] = PoutS[10].cur_100ma > 0xFF ? 0xFF : (uint8_t)PoutS[10].cur_100ma;
00039e  9001              STR      r0,[sp,#4]
0003a0  3040              ADDS     r0,r0,#0x40
;;;818    						data[3] = PoutS[11].cur_100ma > 0xFF ? 0xFF : (uint8_t)PoutS[11].cur_100ma;
0003a2  9006              STR      r0,[sp,#0x18]
0003a4  2009              MOVS     r0,#9
0003a6  0180              LSLS     r0,r0,#6
0003a8  1830              ADDS     r0,r6,r0
;;;819    						data[4] = PoutS[12].cur_100ma > 0xFF ? 0xFF : (uint8_t)PoutS[12].cur_100ma;
0003aa  9005              STR      r0,[sp,#0x14]
0003ac  2005              MOVS     r0,#5
0003ae  01c0              LSLS     r0,r0,#7
0003b0  1830              ADDS     r0,r6,r0
;;;820    						data[5] = PoutS[13].cur_100ma > 0xFF ? 0xFF : (uint8_t)PoutS[13].cur_100ma;
0003b2  9004              STR      r0,[sp,#0x10]
0003b4  200b              MOVS     r0,#0xb
0003b6  0180              LSLS     r0,r0,#6
0003b8  1830              ADDS     r0,r6,r0
0003ba  4d2a              LDR      r5,|L1.1124|
0003bc  9000              STR      r0,[sp,#0]            ;655
                  |L1.958|
0003be  482a              LDR      r0,|L1.1128|
0003c0  6020              STR      r0,[r4,#0]            ;516
0003c2  f7fffffe          BL       can_frame_received
0003c6  2800              CMP      r0,#0                 ;516
0003c8  d105              BNE      |L1.982|
0003ca  480f              LDR      r0,|L1.1032|
0003cc  6801              LDR      r1,[r0,#0]            ;516  ; systick_ms
0003ce  480f              LDR      r0,|L1.1036|
0003d0  6940              LDR      r0,[r0,#0x14]         ;516  ; timeout_6a4
0003d2  1a08              SUBS     r0,r1,r0              ;516
0003d4  d47e              BMI      |L1.1236|
                  |L1.982|
0003d6  480c              LDR      r0,|L1.1032|
0003d8  6801              LDR      r1,[r0,#0]            ;517  ; systick_ms
0003da  480c              LDR      r0,|L1.1036|
0003dc  6940              LDR      r0,[r0,#0x14]         ;517  ; timeout_6a4
0003de  1a08              SUBS     r0,r1,r0              ;517
0003e0  d40a              BMI      |L1.1016|
0003e2  4809              LDR      r0,|L1.1032|
0003e4  6800              LDR      r0,[r0,#0]            ;519  ; systick_ms
0003e6  4921              LDR      r1,|L1.1132|
0003e8  1841              ADDS     r1,r0,r1              ;519
0003ea  4808              LDR      r0,|L1.1036|
0003ec  6141              STR      r1,[r0,#0x14]         ;520  ; timeout_6a4
0003ee  2100              MOVS     r1,#0                 ;520
0003f0  8081              STRH     r1,[r0,#4]            ;520
0003f2  4608              MOV      r0,r1                 ;521
0003f4  f7fffffe          BL       dash_cmd_parse
                  |L1.1016|
0003f8  f7fffffe          BL       can_frame_received
0003fc  2800              CMP      r0,#0                 ;524
0003fe  d0de              BEQ      |L1.958|
000400  481b              LDR      r0,|L1.1136|
000402  f7fffffe          BL       can_recv_frame
000406  e035              B        |L1.1140|
                  |L1.1032|
                          DCD      systick_ms
                  |L1.1036|
                          DCD      ||area_number.10||
                  |L1.1040|
                          DCD      param
                  |L1.1044|
                          DCD      freq
                  |L1.1048|
                          DCD      in_sw
                  |L1.1052|
                          DCD      mod_addr
                  |L1.1056|
                          DCD      P25
                  |L1.1060|
                          DCD      P40
                  |L1.1064|
                          DCD      PoutS
                  |L1.1068|
                          DCD      0x500a0040
                  |L1.1072|
                          DCD      odo_100m
                  |L1.1076|
                          DCD      trip_100m
                  |L1.1080|
                          DCD      LC_LABEL141
                  |L1.1084|
                          DCD      ||area_number.10||+0x2c
                  |L1.1088|
                          DCD      ||area_number.10||+0x34
                  |L1.1092|
                          DCD      0x0000052e
                  |L1.1096|
                          DCD      LC_LABEL219
                  |L1.1100|
00044c  41303720          DCB      "A07 A12",0
000450  41313200
                  |L1.1108|
000454  41303220          DCB      "A02 A13",0
000458  41313300
                  |L1.1116|
                          DCD      0x500a0074
                  |L1.1120|
                          DCD      ||.bss||+0x1
                  |L1.1124|
                          DCD      ||area_number.10||+0x24
                  |L1.1128|
                          DCD      LC_LABEL516
                  |L1.1132|
                          DCD      0x00002710
                  |L1.1136|
                          DCD      ||.bss||
                  |L1.1140|
000474  4ff9              LDR      r7,|L1.2140|
000476  4afa              LDR      r2,|L1.2144|
000478  6838              LDR      r0,[r7,#0]            ;528  ; canrx
00047a  1a81              SUBS     r1,r0,r2              ;528
00047c  4290              CMP      r0,r2                 ;528
00047e  d071              BEQ      |L1.1380|
000480  dc33              BGT      |L1.1258|
000482  4af8              LDR      r2,|L1.2148|
000484  1a81              SUBS     r1,r0,r2              ;528
000486  4290              CMP      r0,r2                 ;528
000488  d007              BEQ      |L1.1178|
00048a  dc27              BGT      |L1.1244|
00048c  49f6              LDR      r1,|L1.2152|
00048e  1a41              SUBS     r1,r0,r1              ;528
000490  d003              BEQ      |L1.1178|
000492  2901              CMP      r1,#1                 ;528
000494  d001              BEQ      |L1.1178|
000496  2902              CMP      r1,#2                 ;528
                  |L1.1176|
000498  d191              BNE      |L1.958|
                  |L1.1178|
00049a  49f4              LDR      r1,|L1.2156|
00049c  780a              LDRB     r2,[r1,#0]            ;644  ; mod_addr
00049e  49f4              LDR      r1,|L1.2160|
0004a0  1851              ADDS     r1,r2,r1              ;644
0004a2  4288              CMP      r0,r1                 ;644
0004a4  7a38              LDRB     r0,[r7,#8]            ;669  ; canrx
0004a6  d175              BNE      |L1.1428|
0004a8  2805              CMP      r0,#5                 ;646
0004aa  d065              BEQ      |L1.1400|
0004ac  2806              CMP      r0,#6                 ;653
0004ae  d186              BNE      |L1.958|
0004b0  2007              MOVS     r0,#7                 ;655
0004b2  7028              STRB     r0,[r5,#0]            ;655
0004b4  0a08              LSRS     r0,r1,#8              ;656
0004b6  7068              STRB     r0,[r5,#1]            ;656
0004b8  70a9              STRB     r1,[r5,#2]            ;657
0004ba  2070              MOVS     r0,#0x70              ;658
0004bc  70e8              STRB     r0,[r5,#3]            ;658
0004be  2001              MOVS     r0,#1                 ;659
0004c0  7128              STRB     r0,[r5,#4]            ;659
0004c2  2021              MOVS     r0,#0x21              ;660
0004c4  7168              STRB     r0,[r5,#5]            ;660
0004c6  2005              MOVS     r0,#5                 ;661
0004c8  71a8              STRB     r0,[r5,#6]            ;661
0004ca  2010              MOVS     r0,#0x10              ;662
0004cc  71e8              STRB     r0,[r5,#7]            ;662
0004ce  2308              MOVS     r3,#8                 ;664
0004d0  4ae8              LDR      r2,|L1.2164|
0004d2  e000              B        |L1.1238|
                  |L1.1236|
0004d4  e18b              B        |L1.2030|
                  |L1.1238|
0004d6  2100              MOVS     r1,#0                 ;664
0004d8  48e7              LDR      r0,|L1.2168|
0004da  e102              B        |L1.1762|
                  |L1.1244|
0004dc  29ea              CMP      r1,#0xea              ;528
0004de  d07c              BEQ      |L1.1498|
0004e0  29eb              CMP      r1,#0xeb              ;528
0004e2  d03f              BEQ      |L1.1380|
0004e4  29ec              CMP      r1,#0xec              ;528
0004e6  d1d7              BNE      |L1.1176|
0004e8  e0de              B        |L1.1704|
                  |L1.1258|
0004ea  299e              CMP      r1,#0x9e              ;528
0004ec  d062              BEQ      |L1.1460|
0004ee  dc06              BGT      |L1.1278|
0004f0  2970              CMP      r1,#0x70              ;528
0004f2  d018              BEQ      |L1.1318|
0004f4  2991              CMP      r1,#0x91              ;528
0004f6  d01e              BEQ      |L1.1334|
0004f8  299d              CMP      r1,#0x9d              ;528
0004fa  d1cd              BNE      |L1.1176|
0004fc  e05a              B        |L1.1460|
                  |L1.1278|
0004fe  299f              CMP      r1,#0x9f              ;528
000500  d058              BEQ      |L1.1460|
000502  29d1              CMP      r1,#0xd1              ;528
000504  d1c8              BNE      |L1.1176|
000506  48d9              LDR      r0,|L1.2156|
000508  2100              MOVS     r1,#0                 ;627
00050a  7800              LDRB     r0,[r0,#0]            ;624  ; mod_addr
00050c  0040              LSLS     r0,r0,#1              ;624
00050e  1e80              SUBS     r0,r0,#2              ;624
000510  b2c0              UXTB     r0,r0                 ;624
000512  183b              ADDS     r3,r7,r0              ;625
000514  3308              ADDS     r3,r3,#8              ;627
                  |L1.1302|
000516  2034              MOVS     r0,#0x34              ;629
000518  4348              MULS     r0,r1,r0              ;629
00051a  1980              ADDS     r0,r0,r6              ;629
00051c  3020              ADDS     r0,r0,#0x20           ;629
00051e  7c02              LDRB     r2,[r0,#0x10]         ;629
000520  2a00              CMP      r2,#0                 ;629
000522  d020              BEQ      |L1.1382|
000524  e024              B        |L1.1392|
                  |L1.1318|
000526  48d5              LDR      r0,|L1.2172|
000528  7a39              LDRB     r1,[r7,#8]            ;551  ; canrx
00052a  7001              STRB     r1,[r0,#0]            ;551
00052c  7a79              LDRB     r1,[r7,#9]            ;552  ; canrx
00052e  7041              STRB     r1,[r0,#1]            ;552
000530  7ab9              LDRB     r1,[r7,#0xa]          ;553  ; canrx
000532  7081              STRB     r1,[r0,#2]            ;553
                  |L1.1332|
000534  e743              B        |L1.958|
                  |L1.1334|
000536  48d2              LDR      r0,|L1.2176|
000538  6801              LDR      r1,[r0,#0]            ;569  ; systick_ms
00053a  207d              MOVS     r0,#0x7d              ;569
00053c  0140              LSLS     r0,r0,#5              ;569
00053e  1809              ADDS     r1,r1,r0              ;569
000540  48d0              LDR      r0,|L1.2180|
000542  6141              STR      r1,[r0,#0x14]         ;570  ; timeout_6a4
000544  7bfa              LDRB     r2,[r7,#0xf]          ;570  ; canrx
000546  7bb9              LDRB     r1,[r7,#0xe]          ;570  ; canrx
000548  0212              LSLS     r2,r2,#8              ;570
00054a  1889              ADDS     r1,r1,r2              ;570
00054c  b289              UXTH     r1,r1                 ;570
00054e  8081              STRH     r1,[r0,#4]            ;570
000550  48c6              LDR      r0,|L1.2156|
000552  7800              LDRB     r0,[r0,#0]            ;572  ; mod_addr
000554  2804              CMP      r0,#4                 ;572
000556  d0ed              BEQ      |L1.1332|
000558  0040              LSLS     r0,r0,#1              ;574
00055a  19c0              ADDS     r0,r0,r7              ;574
00055c  88c0              LDRH     r0,[r0,#6]            ;574
00055e  f7fffffe          BL       dash_cmd_parse
000562  e72c              B        |L1.958|
                  |L1.1380|
000564  e093              B        |L1.1678|
                  |L1.1382|
000566  881a              LDRH     r2,[r3,#0]            ;631
000568  40ca              LSRS     r2,r2,r1              ;631
00056a  07d2              LSLS     r2,r2,#31             ;631
00056c  0fd2              LSRS     r2,r2,#31             ;631
00056e  73c2              STRB     r2,[r0,#0xf]          ;631
                  |L1.1392|
000570  1c49              ADDS     r1,r1,#1              ;631
000572  290f              CMP      r1,#0xf               ;627
000574  dbcf              BLT      |L1.1302|
000576  e722              B        |L1.958|
                  |L1.1400|
000578  2101              MOVS     r1,#1                 ;650
00057a  205f              MOVS     r0,#0x5f              ;650
00057c  f7fffffe          BL       flash_sector_erase
000580  f3bf8f4f          DSB                            ;650
000584  48c1              LDR      r0,|L1.2188|
000586  49c0              LDR      r1,|L1.2184|
000588  60c1              STR      r1,[r0,#0xc]          ;650
00058a  f3bf8f4f          DSB                            ;650
                  |L1.1422|
00058e  bf00              NOP                            ;650
000590  e7fd              B        |L1.1422|
000592  e7ff              B        |L1.1428|
                  |L1.1428|
000594  2801              CMP      r0,#1                 ;669
000596  d005              BEQ      |L1.1444|
000598  2803              CMP      r0,#3                 ;675
00059a  d1cb              BNE      |L1.1332|
00059c  2001              MOVS     r0,#1                 ;677
                  |L1.1438|
00059e  f7fffffe          BL       can_send_enable
0005a2  e70c              B        |L1.958|
                  |L1.1444|
0005a4  48b7              LDR      r0,|L1.2180|
0005a6  2100              MOVS     r1,#0                 ;671
0005a8  8081              STRH     r1,[r0,#4]            ;671
0005aa  4608              MOV      r0,r1                 ;672
0005ac  f7fffffe          BL       dash_cmd_parse
0005b0  2000              MOVS     r0,#0                 ;673
0005b2  e7f4              B        |L1.1438|
                  |L1.1460|
0005b4  49ad              LDR      r1,|L1.2156|
0005b6  226b              MOVS     r2,#0x6b              ;687
0005b8  7809              LDRB     r1,[r1,#0]            ;687  ; mod_addr
0005ba  0112              LSLS     r2,r2,#4              ;687
0005bc  1889              ADDS     r1,r1,r2              ;687
0005be  4288              CMP      r0,r1                 ;687
0005c0  d1b8              BNE      |L1.1332|
0005c2  7a38              LDRB     r0,[r7,#8]            ;689  ; canrx
0005c4  28ae              CMP      r0,#0xae              ;689
                  |L1.1478|
0005c6  d1b5              BNE      |L1.1332|
0005c8  7a78              LDRB     r0,[r7,#9]            ;689  ; canrx
0005ca  28ea              CMP      r0,#0xea              ;689
0005cc  d1b2              BNE      |L1.1332|
0005ce  f3bf8f4f          DSB                            ;689
0005d2  48ae              LDR      r0,|L1.2188|
0005d4  49ac              LDR      r1,|L1.2184|
0005d6  60c1              STR      r1,[r0,#0xc]          ;689
0005d8  e000              B        |L1.1500|
                  |L1.1498|
0005da  e003              B        |L1.1508|
                  |L1.1500|
0005dc  f3bf8f4f          DSB                            ;689
                  |L1.1504|
0005e0  bf00              NOP                            ;689
0005e2  e7fd              B        |L1.1504|
                  |L1.1508|
0005e4  7a38              LDRB     r0,[r7,#8]            ;696  ; canrx
0005e6  2859              CMP      r0,#0x59              ;696
0005e8  d034              BEQ      |L1.1620|
0005ea  dc06              BGT      |L1.1530|
0005ec  2856              CMP      r0,#0x56              ;696
0005ee  d009              BEQ      |L1.1540|
0005f0  2857              CMP      r0,#0x57              ;696
0005f2  d014              BEQ      |L1.1566|
0005f4  2858              CMP      r0,#0x58              ;696
0005f6  d157              BNE      |L1.1704|
0005f8  e01c              B        |L1.1588|
                  |L1.1530|
0005fa  2860              CMP      r0,#0x60              ;696
0005fc  d03c              BEQ      |L1.1656|
0005fe  2863              CMP      r0,#0x63              ;696
000600  d152              BNE      |L1.1704|
000602  e045              B        |L1.1680|
                  |L1.1540|
000604  48a2              LDR      r0,|L1.2192|
000606  2302              MOVS     r3,#2                 ;701
000608  7801              LDRB     r1,[r0,#0]            ;699  ; in_sw
00060a  7029              STRB     r1,[r5,#0]            ;699
00060c  7840              LDRB     r0,[r0,#1]            ;700  ; in_sw
00060e  7068              STRB     r0,[r5,#1]            ;700
000610  2061              MOVS     r0,#0x61              ;701
000612  4a98              LDR      r2,|L1.2164|
000614  2100              MOVS     r1,#0                 ;701
000616  0100              LSLS     r0,r0,#4              ;701
000618  f7fffffe          BL       can_send_bytes
00061c  e044              B        |L1.1704|
                  |L1.1566|
00061e  7ab8              LDRB     r0,[r7,#0xa]          ;705  ; canrx
000620  2800              CMP      r0,#0                 ;705
000622  d000              BEQ      |L1.1574|
000624  2001              MOVS     r0,#1                 ;705
                  |L1.1574|
000626  7a79              LDRB     r1,[r7,#9]            ;705  ; canrx
000628  2234              MOVS     r2,#0x34              ;705
00062a  4351              MULS     r1,r2,r1              ;705
00062c  1989              ADDS     r1,r1,r6              ;705
00062e  3120              ADDS     r1,r1,#0x20           ;705
000630  7288              STRB     r0,[r1,#0xa]          ;705
000632  e039              B        |L1.1704|
                  |L1.1588|
000634  7a78              LDRB     r0,[r7,#9]            ;709  ; canrx
000636  2134              MOVS     r1,#0x34              ;709
000638  4348              MULS     r0,r1,r0              ;709
00063a  1980              ADDS     r0,r0,r6              ;709
00063c  8c40              LDRH     r0,[r0,#0x22]         ;709
00063e  7028              STRB     r0,[r5,#0]            ;709
000640  0a00              LSRS     r0,r0,#8              ;710
000642  7068              STRB     r0,[r5,#1]            ;710
000644  2061              MOVS     r0,#0x61              ;711
000646  2302              MOVS     r3,#2                 ;711
000648  4a8a              LDR      r2,|L1.2164|
00064a  2100              MOVS     r1,#0                 ;711
00064c  0100              LSLS     r0,r0,#4              ;711
00064e  f7fffffe          BL       can_send_bytes
000652  e029              B        |L1.1704|
                  |L1.1620|
000654  488f              LDR      r0,|L1.2196|
000656  2304              MOVS     r3,#4                 ;719
000658  8800              LDRH     r0,[r0,#0]            ;715  ; P25
00065a  7028              STRB     r0,[r5,#0]            ;715
00065c  0a00              LSRS     r0,r0,#8              ;716
00065e  7068              STRB     r0,[r5,#1]            ;716
000660  488d              LDR      r0,|L1.2200|
000662  4a84              LDR      r2,|L1.2164|
000664  8800              LDRH     r0,[r0,#0]            ;717  ; P40
000666  70a8              STRB     r0,[r5,#2]            ;717
000668  0a00              LSRS     r0,r0,#8              ;718
00066a  70e8              STRB     r0,[r5,#3]            ;718
00066c  2061              MOVS     r0,#0x61              ;719
00066e  2100              MOVS     r1,#0                 ;719
000670  0100              LSLS     r0,r0,#4              ;719
000672  f7fffffe          BL       can_send_bytes
000676  e017              B        |L1.1704|
                  |L1.1656|
000678  4888              LDR      r0,|L1.2204|
00067a  2302              MOVS     r3,#2                 ;725
00067c  8800              LDRH     r0,[r0,#0]            ;723  ; freq
00067e  4a7d              LDR      r2,|L1.2164|
000680  0a00              LSRS     r0,r0,#8              ;724
000682  7028              STRB     r0,[r5,#0]            ;724
000684  2061              MOVS     r0,#0x61              ;725
000686  2100              MOVS     r1,#0                 ;725
000688  0100              LSLS     r0,r0,#4              ;725
00068a  f7fffffe          BL       can_send_bytes
                  |L1.1678|
00068e  e00b              B        |L1.1704|
                  |L1.1680|
000690  487f              LDR      r0,|L1.2192|
000692  2302              MOVS     r3,#2                 ;730
000694  7880              LDRB     r0,[r0,#2]            ;729  ; in_sw
000696  4a77              LDR      r2,|L1.2164|
000698  0780              LSLS     r0,r0,#30             ;729
00069a  0f80              LSRS     r0,r0,#30             ;729
00069c  7028              STRB     r0,[r5,#0]            ;729
00069e  2061              MOVS     r0,#0x61              ;730
0006a0  2100              MOVS     r1,#0                 ;730
0006a2  0100              LSLS     r0,r0,#4              ;730
0006a4  f7fffffe          BL       can_send_bytes
                  |L1.1704|
0006a8  4b70              LDR      r3,|L1.2156|
0006aa  2061              MOVS     r0,#0x61              ;741
0006ac  781a              LDRB     r2,[r3,#0]            ;741  ; mod_addr
0006ae  0100              LSLS     r0,r0,#4              ;741
0006b0  6839              LDR      r1,[r7,#0]            ;741  ; canrx
0006b2  1810              ADDS     r0,r2,r0              ;741
0006b4  4281              CMP      r1,r0                 ;741
                  |L1.1718|
0006b6  d186              BNE      |L1.1478|
0006b8  7a39              LDRB     r1,[r7,#8]            ;743  ; canrx
0006ba  29a1              CMP      r1,#0xa1              ;743
0006bc  d06a              BEQ      |L1.1940|
0006be  dc13              BGT      |L1.1768|
0006c0  2956              CMP      r1,#0x56              ;743
0006c2  d01c              BEQ      |L1.1790|
0006c4  2959              CMP      r1,#0x59              ;743
0006c6  d038              BEQ      |L1.1850|
0006c8  295c              CMP      r1,#0x5c              ;743
0006ca  d075              BEQ      |L1.1976|
0006cc  29a0              CMP      r1,#0xa0              ;743
0006ce  d1f2              BNE      |L1.1718|
0006d0  7029              STRB     r1,[r5,#0]            ;754
0006d2  4973              LDR      r1,|L1.2208|
0006d4  2303              MOVS     r3,#3                 ;757
0006d6  8809              LDRH     r1,[r1,#0]            ;755  ; param
0006d8  7069              STRB     r1,[r5,#1]            ;755
0006da  0a09              LSRS     r1,r1,#8              ;756
0006dc  70a9              STRB     r1,[r5,#2]            ;756
0006de  4a65              LDR      r2,|L1.2164|
0006e0  2100              MOVS     r1,#0                 ;757
                  |L1.1762|
0006e2  f7fffffe          BL       can_send_bytes
                  |L1.1766|
0006e6  e66a              B        |L1.958|
                  |L1.1768|
0006e8  29a3              CMP      r1,#0xa3              ;743
0006ea  d07d              BEQ      |L1.2024|
0006ec  29fe              CMP      r1,#0xfe              ;743
0006ee  d07c              BEQ      |L1.2026|
0006f0  29ff              CMP      r1,#0xff              ;743
0006f2  d1f8              BNE      |L1.1766|
0006f4  8c70              LDRH     r0,[r6,#0x22]         ;805  ; PoutS
0006f6  28ff              CMP      r0,#0xff              ;805
0006f8  d978              BLS      |L1.2028|
0006fa  20ff              MOVS     r0,#0xff              ;805
0006fc  e09f              B        |L1.2110|
                  |L1.1790|
0006fe  9803              LDR      r0,[sp,#0xc]          ;746
000700  7a41              LDRB     r1,[r0,#9]            ;746  ; canrx
000702  7a02              LDRB     r2,[r0,#8]            ;746  ; canrx
000704  0208              LSLS     r0,r1,#8              ;746
000706  4966              LDR      r1,|L1.2208|
000708  4310              ORRS     r0,r0,r2              ;746
00070a  8008              STRH     r0,[r1,#0]            ;746
                  LC_LABEL747
00070c  4865              LDR      r0,|L1.2212|
00070e  4d66              LDR      r5,|L1.2216|
000710  6020              STR      r0,[r4,#0]            ;747
000712  6828              LDR      r0,[r5,#0]            ;747  ; EepromFlag
000714  2800              CMP      r0,#0                 ;747
000716  d16d              BNE      |L1.2036|
000718  2001              MOVS     r0,#1                 ;748
00071a  6028              STR      r0,[r5,#0]            ;749  ; EepromFlag
00071c  f7fffffe          BL       save_param
000720  2000              MOVS     r0,#0                 ;750
000722  4601              MOV      r1,r0                 ;751
000724  6028              STR      r0,[r5,#0]            ;751  ; EepromFlag
000726  4851              LDR      r0,|L1.2156|
000728  2302              MOVS     r3,#2                 ;751
00072a  7805              LDRB     r5,[r0,#0]            ;751  ; mod_addr
00072c  2061              MOVS     r0,#0x61              ;751
00072e  0100              LSLS     r0,r0,#4              ;751
000730  a25e              ADR      r2,|L1.2220|
000732  1828              ADDS     r0,r5,r0              ;751
000734  f7fffffe          BL       can_send_bytes
000738  e620              B        |L1.892|
                  |L1.1850|
00073a  4848              LDR      r0,|L1.2140|
00073c  4b5c              LDR      r3,|L1.2224|
00073e  7b01              LDRB     r1,[r0,#0xc]          ;761  ; canrx
000740  7ac2              LDRB     r2,[r0,#0xb]          ;762  ; canrx
000742  0609              LSLS     r1,r1,#24             ;761
000744  0412              LSLS     r2,r2,#16             ;762
000746  430a              ORRS     r2,r2,r1              ;762
000748  7a81              LDRB     r1,[r0,#0xa]          ;763  ; canrx
00074a  7a40              LDRB     r0,[r0,#9]            ;764  ; canrx
00074c  0209              LSLS     r1,r1,#8              ;763
00074e  4311              ORRS     r1,r1,r2              ;763
000750  4308              ORRS     r0,r0,r1              ;764
000752  6018              STR      r0,[r3,#0]            ;764  ; odo_100m
                  LC_LABEL766
000754  4857              LDR      r0,|L1.2228|
000756  6020              STR      r0,[r4,#0]            ;766
000758  4853              LDR      r0,|L1.2216|
00075a  6801              LDR      r1,[r0,#0]            ;766  ; EepromFlag
00075c  2900              CMP      r1,#0                 ;766
00075e  d149              BNE      |L1.2036|
000760  2101              MOVS     r1,#1                 ;767
000762  6001              STR      r1,[r0,#0]            ;768  ; EepromFlag
000764  4954              LDR      r1,|L1.2232|
000766  2000              MOVS     r0,#0                 ;768
000768  6008              STR      r0,[r1,#0]            ;768  ; ptx
                  LC_LABEL768
00076a  4854              LDR      r0,|L1.2236|
00076c  6020              STR      r0,[r4,#0]            ;768
00076e  4852              LDR      r0,|L1.2232|
000770  f7fffffe          BL       save_odo_pt
000774  2802              CMP      r0,#2                 ;768
000776  db3d              BLT      |L1.2036|
000778  494b              LDR      r1,|L1.2216|
00077a  2000              MOVS     r0,#0                 ;769
00077c  6008              STR      r0,[r1,#0]            ;771  ; EepromFlag
00077e  4601              MOV      r1,r0                 ;771
000780  483a              LDR      r0,|L1.2156|
000782  2302              MOVS     r3,#2                 ;771
000784  7805              LDRB     r5,[r0,#0]            ;771  ; mod_addr
000786  2061              MOVS     r0,#0x61              ;771
000788  0100              LSLS     r0,r0,#4              ;771
00078a  a24d              ADR      r2,|L1.2240|
00078c  1828              ADDS     r0,r5,r0              ;771
00078e  f7fffffe          BL       can_send_bytes
000792  e5f3              B        |L1.892|
                  |L1.1940|
000794  21a1              MOVS     r1,#0xa1              ;775
000796  7029              STRB     r1,[r5,#0]            ;775
000798  4945              LDR      r1,|L1.2224|
00079a  2305              MOVS     r3,#5                 ;780
00079c  6809              LDR      r1,[r1,#0]            ;776  ; odo_100m
00079e  7069              STRB     r1,[r5,#1]            ;776
0007a0  0a0a              LSRS     r2,r1,#8              ;777
0007a2  70aa              STRB     r2,[r5,#2]            ;777
0007a4  0c0a              LSRS     r2,r1,#16             ;778
0007a6  70ea              STRB     r2,[r5,#3]            ;778
0007a8  0e09              LSRS     r1,r1,#24             ;779
0007aa  7129              STRB     r1,[r5,#4]            ;779
0007ac  4a31              LDR      r2,|L1.2164|
0007ae  2100              MOVS     r1,#0                 ;780
0007b0  f7fffffe          BL       can_send_bytes
0007b4  e603              B        |L1.958|
0007b6  e7ff              B        |L1.1976|
                  |L1.1976|
0007b8  9803              LDR      r0,[sp,#0xc]          ;785
0007ba  7a41              LDRB     r1,[r0,#9]            ;785  ; canrx
0007bc  7a02              LDRB     r2,[r0,#8]            ;785  ; canrx
0007be  0208              LSLS     r0,r1,#8              ;785
0007c0  4940              LDR      r1,|L1.2244|
0007c2  4310              ORRS     r0,r0,r2              ;785
0007c4  8008              STRH     r0,[r1,#0]            ;785
                  LC_LABEL787
0007c6  4840              LDR      r0,|L1.2248|
0007c8  6020              STR      r0,[r4,#0]            ;787
0007ca  4837              LDR      r0,|L1.2216|
0007cc  6801              LDR      r1,[r0,#0]            ;787  ; EepromFlag
0007ce  2900              CMP      r1,#0                 ;787
0007d0  d110              BNE      |L1.2036|
0007d2  2101              MOVS     r1,#1                 ;788
0007d4  6001              STR      r1,[r0,#0]            ;789  ; EepromFlag
0007d6  4938              LDR      r1,|L1.2232|
0007d8  2000              MOVS     r0,#0                 ;789
0007da  6008              STR      r0,[r1,#0]            ;789  ; ptx
                  LC_LABEL789
0007dc  483b              LDR      r0,|L1.2252|
0007de  6020              STR      r0,[r4,#0]            ;789
0007e0  4835              LDR      r0,|L1.2232|
0007e2  f7fffffe          BL       save_odo_pt
0007e6  e003              B        |L1.2032|
                  |L1.2024|
0007e8  e015              B        |L1.2070|
                  |L1.2026|
0007ea  e021              B        |L1.2096|
                  |L1.2028|
0007ec  e026              B        |L1.2108|
                  |L1.2030|
0007ee  e001              B        |L1.2036|
                  |L1.2032|
0007f0  2802              CMP      r0,#2                 ;789
0007f2  da02              BGE      |L1.2042|
                  |L1.2036|
0007f4  2000              MOVS     r0,#0                 ;789
;;;821    						data[6] = PoutS[14].cur_100ma > 0xFF ? 0xFF : (uint8_t)PoutS[14].cur_100ma;
;;;822    						data[7] = 0; // PoutS[15].cur_100ma > 0xFF ? 0xFF : (uint8_t)PoutS[15].cur_100ma;
;;;823    						can_send_bytes(ID_TX_CURRENT + 2 * MOD_ADDR - 1, 0, data, 8);
;;;824    						break;
;;;825    					}
;;;826    				}
;;;827    				break;
;;;828    
;;;829    			default:
;;;830    				break;
;;;831    			}
;;;832    		}
;;;833    	}
;;;834    	PT_INFINITE_LOOP_END(pt);
;;;835    }
0007f6  b00d              ADD      sp,sp,#0x34
0007f8  bdf0              POP      {r4-r7,pc}
                  |L1.2042|
0007fa  492b              LDR      r1,|L1.2216|
0007fc  2000              MOVS     r0,#0                 ;790
0007fe  6008              STR      r0,[r1,#0]            ;791  ; EepromFlag
000800  4601              MOV      r1,r0                 ;791
000802  481a              LDR      r0,|L1.2156|
000804  2302              MOVS     r3,#2                 ;791
000806  7805              LDRB     r5,[r0,#0]            ;791  ; mod_addr
000808  2061              MOVS     r0,#0x61              ;791
00080a  0100              LSLS     r0,r0,#4              ;791
00080c  a230              ADR      r2,|L1.2256|
00080e  1828              ADDS     r0,r5,r0              ;791
000810  f7fffffe          BL       can_send_bytes
000814  e5b2              B        |L1.892|
                  |L1.2070|
000816  21a3              MOVS     r1,#0xa3              ;794
000818  7029              STRB     r1,[r5,#0]            ;794
00081a  492a              LDR      r1,|L1.2244|
00081c  2303              MOVS     r3,#3                 ;797
00081e  8809              LDRH     r1,[r1,#0]            ;795  ; trip_100m
000820  7069              STRB     r1,[r5,#1]            ;795
000822  0a09              LSRS     r1,r1,#8              ;796
000824  70a9              STRB     r1,[r5,#2]            ;796
000826  4a13              LDR      r2,|L1.2164|
000828  2100              MOVS     r1,#0                 ;797
00082a  f7fffffe          BL       can_send_bytes
00082e  e5c6              B        |L1.958|
                  |L1.2096|
000830  2308              MOVS     r3,#8                 ;801
000832  4a28              LDR      r2,|L1.2260|
000834  2100              MOVS     r1,#0                 ;801
000836  f7fffffe          BL       can_send_bytes
00083a  e5c0              B        |L1.958|
                  |L1.2108|
00083c  b2c0              UXTB     r0,r0                 ;805
                  |L1.2110|
00083e  7028              STRB     r0,[r5,#0]            ;805
000840  980b              LDR      r0,[sp,#0x2c]         ;806
000842  8ac0              LDRH     r0,[r0,#0x16]         ;806  ; PoutS
000844  28ff              CMP      r0,#0xff              ;806
000846  d901              BLS      |L1.2124|
000848  20ff              MOVS     r0,#0xff              ;806
00084a  e000              B        |L1.2126|
                  |L1.2124|
00084c  b2c0              UXTB     r0,r0                 ;806
                  |L1.2126|
00084e  7068              STRB     r0,[r5,#1]            ;806
000850  9802              LDR      r0,[sp,#8]            ;807
000852  8940              LDRH     r0,[r0,#0xa]          ;807  ; PoutS
000854  28ff              CMP      r0,#0xff              ;807
000856  d93f              BLS      |L1.2264|
000858  20ff              MOVS     r0,#0xff              ;807
00085a  e03e              B        |L1.2266|
                  |L1.2140|
                          DCD      ||.bss||
                  |L1.2144|
                          DCD      0x00000613
                  |L1.2148|
                          DCD      0x00000526
                  |L1.2152|
                          DCD      0x00000520
                  |L1.2156|
                          DCD      mod_addr
                  |L1.2160|
                          DCD      0x0000051f
                  |L1.2164|
                          DCD      ||area_number.10||+0x24
                  |L1.2168|
                          DCD      0x0000052e
                  |L1.2172|
                          DCD      ||area_number.10||+0x6
                  |L1.2176|
                          DCD      systick_ms
                  |L1.2180|
                          DCD      ||area_number.10||
                  |L1.2184|
                          DCD      0x05fa0004
                  |L1.2188|
                          DCD      0xe000ed00
                  |L1.2192|
                          DCD      in_sw
                  |L1.2196|
                          DCD      P25
                  |L1.2200|
                          DCD      P40
                  |L1.2204|
                          DCD      freq
                  |L1.2208|
                          DCD      param
                  |L1.2212|
                          DCD      LC_LABEL747
                  |L1.2216|
                          DCD      EepromFlag
                  |L1.2220|
0008ac  565500            DCB      "VU",0
0008af  00                DCB      0
                  |L1.2224|
                          DCD      odo_100m
                  |L1.2228|
                          DCD      LC_LABEL766
                  |L1.2232|
                          DCD      ||area_number.10||+0x18
                  |L1.2236|
                          DCD      LC_LABEL768
                  |L1.2240|
0008c0  595500            DCB      "YU",0
0008c3  00                DCB      0
                  |L1.2244|
                          DCD      trip_100m
                  |L1.2248|
                          DCD      LC_LABEL787
                  |L1.2252|
                          DCD      LC_LABEL789
                  |L1.2256|
0008d0  5c5500            DCB      "\\U",0
0008d3  00                DCB      0
                  |L1.2260|
                          DCD      ||area_number.10||+0x2c
                  |L1.2264|
0008d8  b2c0              UXTB     r0,r0                 ;807
                  |L1.2266|
0008da  70a8              STRB     r0,[r5,#2]            ;807
0008dc  9802              LDR      r0,[sp,#8]            ;808
0008de  8fc0              LDRH     r0,[r0,#0x3e]         ;808  ; PoutS
0008e0  28ff              CMP      r0,#0xff              ;808
0008e2  d901              BLS      |L1.2280|
0008e4  20ff              MOVS     r0,#0xff              ;808
0008e6  e000              B        |L1.2282|
                  |L1.2280|
0008e8  b2c0              UXTB     r0,r0                 ;808
                  |L1.2282|
0008ea  70e8              STRB     r0,[r5,#3]            ;808
0008ec  980a              LDR      r0,[sp,#0x28]         ;809
0008ee  8e40              LDRH     r0,[r0,#0x32]         ;809  ; PoutS
0008f0  28ff              CMP      r0,#0xff              ;809
0008f2  d901              BLS      |L1.2296|
0008f4  20ff              MOVS     r0,#0xff              ;809
0008f6  e000              B        |L1.2298|
                  |L1.2296|
0008f8  b2c0              UXTB     r0,r0                 ;809
                  |L1.2298|
0008fa  7128              STRB     r0,[r5,#4]            ;809
0008fc  9809              LDR      r0,[sp,#0x24]         ;810
0008fe  8cc0              LDRH     r0,[r0,#0x26]         ;810  ; PoutS
000900  28ff              CMP      r0,#0xff              ;810
000902  d901              BLS      |L1.2312|
000904  20ff              MOVS     r0,#0xff              ;810
000906  e000              B        |L1.2314|
                  |L1.2312|
000908  b2c0              UXTB     r0,r0                 ;810
                  |L1.2314|
00090a  7168              STRB     r0,[r5,#5]            ;810
00090c  9808              LDR      r0,[sp,#0x20]         ;811
00090e  8b40              LDRH     r0,[r0,#0x1a]         ;811  ; PoutS
000910  28ff              CMP      r0,#0xff              ;811
000912  d901              BLS      |L1.2328|
000914  20ff              MOVS     r0,#0xff              ;811
000916  e000              B        |L1.2330|
                  |L1.2328|
000918  b2c0              UXTB     r0,r0                 ;811
                  |L1.2330|
00091a  71a8              STRB     r0,[r5,#6]            ;811
00091c  9807              LDR      r0,[sp,#0x1c]         ;812
00091e  89c0              LDRH     r0,[r0,#0xe]          ;812  ; PoutS
000920  28ff              CMP      r0,#0xff              ;812
000922  d901              BLS      |L1.2344|
000924  20ff              MOVS     r0,#0xff              ;812
000926  e000              B        |L1.2346|
                  |L1.2344|
000928  b2c0              UXTB     r0,r0                 ;812
                  |L1.2346|
00092a  71e8              STRB     r0,[r5,#7]            ;812
00092c  0050              LSLS     r0,r2,#1              ;813
00092e  4933              LDR      r1,|L1.2556|
000930  461f              MOV      r7,r3                 ;813
000932  1840              ADDS     r0,r0,r1              ;813
000934  2308              MOVS     r3,#8                 ;813
000936  4a32              LDR      r2,|L1.2560|
000938  2100              MOVS     r1,#0                 ;813
00093a  f7fffffe          BL       can_send_bytes
00093e  9801              LDR      r0,[sp,#4]            ;815
000940  8840              LDRH     r0,[r0,#2]            ;815  ; PoutS
000942  28ff              CMP      r0,#0xff              ;815
000944  d901              BLS      |L1.2378|
000946  20ff              MOVS     r0,#0xff              ;815
000948  e000              B        |L1.2380|
                  |L1.2378|
00094a  b2c0              UXTB     r0,r0                 ;815
                  |L1.2380|
00094c  7028              STRB     r0,[r5,#0]            ;815
00094e  9801              LDR      r0,[sp,#4]            ;816
000950  8ec0              LDRH     r0,[r0,#0x36]         ;816  ; PoutS
000952  28ff              CMP      r0,#0xff              ;816
000954  d901              BLS      |L1.2394|
000956  20ff              MOVS     r0,#0xff              ;816
000958  e000              B        |L1.2396|
                  |L1.2394|
00095a  b2c0              UXTB     r0,r0                 ;816
                  |L1.2396|
00095c  7068              STRB     r0,[r5,#1]            ;816
00095e  9806              LDR      r0,[sp,#0x18]         ;817
000960  8d40              LDRH     r0,[r0,#0x2a]         ;817  ; PoutS
000962  28ff              CMP      r0,#0xff              ;817
000964  d901              BLS      |L1.2410|
000966  20ff              MOVS     r0,#0xff              ;817
000968  e000              B        |L1.2412|
                  |L1.2410|
00096a  b2c0              UXTB     r0,r0                 ;817
                  |L1.2412|
00096c  70a8              STRB     r0,[r5,#2]            ;817
00096e  9805              LDR      r0,[sp,#0x14]         ;818
000970  8bc0              LDRH     r0,[r0,#0x1e]         ;818  ; PoutS
000972  28ff              CMP      r0,#0xff              ;818
000974  d901              BLS      |L1.2426|
000976  20ff              MOVS     r0,#0xff              ;818
000978  e000              B        |L1.2428|
                  |L1.2426|
00097a  b2c0              UXTB     r0,r0                 ;818
                  |L1.2428|
00097c  70e8              STRB     r0,[r5,#3]            ;818
00097e  9804              LDR      r0,[sp,#0x10]         ;819
000980  8a40              LDRH     r0,[r0,#0x12]         ;819  ; PoutS
000982  28ff              CMP      r0,#0xff              ;819
000984  d901              BLS      |L1.2442|
000986  20ff              MOVS     r0,#0xff              ;819
000988  e000              B        |L1.2444|
                  |L1.2442|
00098a  b2c0              UXTB     r0,r0                 ;819
                  |L1.2444|
00098c  7128              STRB     r0,[r5,#4]            ;819
00098e  9800              LDR      r0,[sp,#0]            ;820
000990  88c0              LDRH     r0,[r0,#6]            ;820  ; PoutS
000992  28ff              CMP      r0,#0xff              ;820
000994  d901              BLS      |L1.2458|
000996  20ff              MOVS     r0,#0xff              ;820
000998  e000              B        |L1.2460|
                  |L1.2458|
00099a  b2c0              UXTB     r0,r0                 ;820
                  |L1.2460|
00099c  7168              STRB     r0,[r5,#5]            ;820
00099e  9800              LDR      r0,[sp,#0]            ;821
0009a0  8f40              LDRH     r0,[r0,#0x3a]         ;821  ; PoutS
0009a2  28ff              CMP      r0,#0xff              ;821
0009a4  d901              BLS      |L1.2474|
0009a6  20ff              MOVS     r0,#0xff              ;821
0009a8  e000              B        |L1.2476|
                  |L1.2474|
0009aa  b2c0              UXTB     r0,r0                 ;821
                  |L1.2476|
0009ac  71a8              STRB     r0,[r5,#6]            ;821
0009ae  2000              MOVS     r0,#0                 ;822
0009b0  71e8              STRB     r0,[r5,#7]            ;822
0009b2  7838              LDRB     r0,[r7,#0]            ;823  ; mod_addr
0009b4  4913              LDR      r1,|L1.2564|
0009b6  0040              LSLS     r0,r0,#1              ;823
0009b8  1840              ADDS     r0,r0,r1              ;823
0009ba  2308              MOVS     r3,#8                 ;823
0009bc  4a10              LDR      r2,|L1.2560|
0009be  2100              MOVS     r1,#0                 ;823
0009c0  f7fffffe          BL       can_send_bytes
0009c4  e4fb              B        |L1.958|
;;;836    
                          ENDP

                  can_app_init PROC
;;;838    
;;;839    static void can_app_init()
0009c6  4910              LDR      r1,|L1.2568|
;;;840    {
;;;841    	PT_INIT(&ptcansend);
0009c8  2000              MOVS     r0,#0
;;;842    	PT_INIT(&ptcanrecv);
0009ca  6008              STR      r0,[r1,#0]  ; ptcansend
0009cc  490f              LDR      r1,|L1.2572|
0009ce  6008              STR      r0,[r1,#0]  ; ptcanrecv
;;;843    }
0009d0  4770              BX       lr
;;;844    
                          ENDP

                  can_app PROC
;;;846    
;;;847    void can_app()
0009d2  b510              PUSH     {r4,lr}
;;;848    {
;;;849    	protothread_can(&ptcansend);
0009d4  480c              LDR      r0,|L1.2568|
0009d6  f7fffffe          BL       protothread_can
;;;850    #ifndef TEMP_TEST
;;;851    	protothread_can_recv(&ptcanrecv);
0009da  480c              LDR      r0,|L1.2572|
0009dc  f7fffffe          BL       protothread_can_recv
;;;852    #endif
;;;853    }
0009e0  bd10              POP      {r4,pc}
;;;854    // INIT_APP_LOOP_EXPORT(can_app);
                          ENDP

                  testmod_can_app PROC
;;;856    #ifndef MOD4
;;;857    static void testmod_can_app()
0009e2  480b              LDR      r0,|L1.2576|
;;;858    {
;;;859    	if (MOD_ADDR == ADDR4_MOD)
0009e4  7800              LDRB     r0,[r0,#0]  ; mod_addr
0009e6  2804              CMP      r0,#4
0009e8  d107              BNE      |L1.2554|
0009ea  b510              PUSH     {r4,lr}               ;858
                  |L1.2540|
;;;860    	{
;;;861    		while (1)
;;;862    		{
;;;863    			protothread_can_test(&ptcansend);
0009ec  4806              LDR      r0,|L1.2568|
0009ee  f7fffffe          BL       protothread_can_test
;;;864    			protothread_can_recv(&ptcanrecv);
0009f2  4806              LDR      r0,|L1.2572|
0009f4  f7fffffe          BL       protothread_can_recv
0009f8  e7f8              B        |L1.2540|
                  |L1.2554|
0009fa  4770              BX       lr
;;;865    		}
;;;866    	}
;;;867    }
;;;868    INIT_APP_EXPORT(testmod_can_app);
                          ENDP

                  |L1.2556|
                          DCD      0x0000068e
                  |L1.2560|
                          DCD      ||area_number.10||+0x24
                  |L1.2564|
                          DCD      0x0000068f
                  |L1.2568|
                          DCD      ||area_number.10||+0x1c
                  |L1.2572|
                          DCD      ||area_number.10||+0x20
                  |L1.2576|
                          DCD      mod_addr

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  canrx
                          %        16

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  date
000000  44656320          DCB      0x44,0x65,0x63,0x20
000004  31322032          DCB      0x31,0x32,0x20,0x32
000008  30323200          DCB      0x30,0x32,0x32,0x00

                          AREA ||area_number.6||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.6||, ||.constdata||
                  time
000000  30383a35          DCB      0x30,0x38,0x3a,0x35
000004  343a3234          DCB      0x34,0x3a,0x32,0x34
000008  00                DCB      0x00

                          AREA ||area_number.7||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.7||, ||.constdata||
                  ordv
000000  32323038          DCB      0x32,0x32,0x30,0x38
000004  303100            DCB      0x30,0x31,0x00

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  4a616e00          DCB      "Jan",0
000004  46656200          DCB      "Feb",0
000008  4d617200          DCB      "Mar",0
00000c  41707200          DCB      "Apr",0
000010  4d617900          DCB      "May",0
000014  4a756e00          DCB      "Jun",0
000018  4a756c00          DCB      "Jul",0
00001c  41756700          DCB      "Aug",0
000020  53657000          DCB      "Sep",0
000024  4f637400          DCB      "Oct",0
000028  4e6f7600          DCB      "Nov",0
00002c  44656300          DCB      "Dec",0

                          AREA ||.data||, DATA, ALIGN=0

                  flag_can_enable
000000  01                DCB      0x01

                          AREA ||area_number.10||, DATA, ALIGN=2

                          EXPORTAS ||area_number.10||, ||.data||
                  count
000000  00                DCB      0x00
                  KEY_ON
000001  00                DCB      0x00
                  KEY_ACC
000002  00                DCB      0x00
                  KEY_SOS
000003  00                DCB      0x00
                  cmd_ext
000004  0000              DCB      0x00,0x00
                  sw_3
000006  0000              DCB      0x00,0x00
000008  00000000          DCB      0x00,0x00,0x00,0x00
                  |symbol_number.25|
                          DCD      0x00000000
                  |symbol_number.26|
                          DCD      0x00000000
                  timeout_6a4
                          DCD      0x00000000
                  ptx
                          DCD      0x00000000
                  ptcansend
                          DCD      0x00000000
                  ptcanrecv
                          DCD      0x00000000
                  data
                          %        8
                  SoftVer
                          %        8
                  month
                          DCD      ||.conststring||
                          DCD      ||.conststring||+0x4
                          DCD      ||.conststring||+0x8
                          DCD      ||.conststring||+0xc
                          DCD      ||.conststring||+0x10
                          DCD      ||.conststring||+0x14
                          DCD      ||.conststring||+0x18
                          DCD      ||.conststring||+0x1c
                          DCD      ||.conststring||+0x20
                          DCD      ||.conststring||+0x24
                          DCD      ||.conststring||+0x28
                          DCD      ||.conststring||+0x2c

                          AREA ||area_number.11||, DATA, ALIGN=0

                          EXPORTAS ||area_number.11||, ||.data||
                  flag_can
000000  00                DCB      0x00

                          AREA ||.init_fn.4||, DATA, READONLY, ALIGN=2

                  __stan_init_can_app_init
                  ||__tagsym$$used||
                          DCD      can_app_init

                          AREA ||.init_fn.6||, DATA, READONLY, ALIGN=2

                  __stan_init_InitSoftVer
                  |symbol_number.45|
                          DCD      InitSoftVer
                  __stan_init_testmod_can_app
                  |symbol_number.46|
                          DCD      testmod_can_app

;*** Start embedded assembler ***

#line 1 "src\\can_protol.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___12_can_protol_c_56804b9e____REV16|
#line 447 ".\\RTE\\CMSIS\\BF7006AM64\\cmsis_armcc.h"
|__asm___12_can_protol_c_56804b9e____REV16| PROC
#line 448

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___12_can_protol_c_56804b9e____REVSH|
#line 462
|__asm___12_can_protol_c_56804b9e____REVSH| PROC
#line 463

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--list --debug -c --asm --interleave --gnu -o.\obj\system_bf7006amxx.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\obj\system_bf7006amxx.d --cpu=Cortex-M0 --apcs=interwork -Otime --diag_suppress=9931 -I.\src\pt -I.\src -I.\config -I.\RTE\CMSIS\BF7006AM64 -I.\RTE\Device\BF7006AM64 -I.\RTE\SEGGER -I.\RTE\Startup\BF7006AM64 -I.\RTE\_b40 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.8.0\CMSIS\Core\Include -IC:\Keil_v5\ARM\PACK\BYD\BYDMicro_DFP\1.1.0\Device\Include\BF7006AMxx -D__UVISION_VERSION=536 -D_RTE_ -D_RTE_ --omf_browse=.\obj\system_bf7006amxx.crf RTE\Startup\BF7006AM64\system_BF7006AMxx.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  SystemCoreClockUpdate PROC
;;;179     *----------------------------------------------------------------------------*/
;;;180    void SystemCoreClockUpdate (void)                   /* Get Core Clock Frequency */
000000  b410              PUSH     {r4}
;;;181    {
;;;182        if(SYS_CLK_SEL == SYS_CLK_XTAL){
000002  4816              LDR      r0,|L1.92|
000004  68c3              LDR      r3,[r0,#0xc]
000006  4c16              LDR      r4,|L1.96|
;;;183            #ifdef XTAL
;;;184                SystemCoreClock = XTAL;
000008  4a16              LDR      r2,|L1.100|
00000a  4917              LDR      r1,|L1.104|
00000c  42a3              CMP      r3,r4                 ;182
00000e  d102              BNE      |L1.22|
                  |L1.16|
000010  600a              STR      r2,[r1,#0]  ; SystemCoreClock
;;;185            #endif
;;;186        }else{
;;;187            switch(SYS_CLK_SEL){
;;;188            case SYS_CLK_32M:
;;;189                SystemCoreClock = (uint32_t)32000000;
;;;190                break;
;;;191            case SYS_CLK_16M:
;;;192                SystemCoreClock = (uint32_t)16000000;
;;;193                break;
;;;194            case SYS_CLK_8M:
;;;195                SystemCoreClock = (uint32_t)8000000;
;;;196                break;
;;;197            default:
;;;198                #ifdef XTAL
;;;199                    SystemCoreClock = XTAL;
;;;200                #endif
;;;201            }
;;;202        }
;;;203    }
000012  bc10              POP      {r4}
000014  4770              BX       lr
                  |L1.22|
000016  68c0              LDR      r0,[r0,#0xc]          ;187
000018  4b14              LDR      r3,|L1.108|
00001a  18c0              ADDS     r0,r0,r3              ;187
00001c  d004              BEQ      |L1.40|
00001e  4b14              LDR      r3,|L1.112|
000020  18c0              ADDS     r0,r0,r3              ;187
000022  d1f5              BNE      |L1.16|
000024  4813              LDR      r0,|L1.116|
000026  e000              B        |L1.42|
                  |L1.40|
000028  4813              LDR      r0,|L1.120|
                  |L1.42|
00002a  6008              STR      r0,[r1,#0]            ;189  ; SystemCoreClock
00002c  bc10              POP      {r4}
00002e  4770              BX       lr
;;;204    
                          ENDP

                  SystemInit PROC
;;;213     */
;;;214    void SystemInit (void)
000030  b510              PUSH     {r4,lr}
;;;215    {
;;;216    //  <o>System interrupt vector offset
;;;217        //#define SYSTEM_INTERRUPT_VECTOR_OFFSET 0x00000000UL
;;;218    	  extern uint32_t __Vectors;
;;;219    
;;;220        /* system interrupt vector offset set */
;;;221        system_intvector_offset((uint32_t)&__Vectors);
000032  4812              LDR      r0,|L1.124|
000034  f7fffffe          BL       system_intvector_offset
;;;222    
;;;223        system_clk_sel(PLL_SOURCE_SEL,SYSTEM_CLK_FREQ,XTAL_FREQ);
000038  2203              MOVS     r2,#3
00003a  4911              LDR      r1,|L1.128|
00003c  4811              LDR      r0,|L1.132|
00003e  f7fffffe          BL       system_clk_sel
;;;224    
;;;225    //  <h> BOR
;;;226    //    <q0> BOR enable
;;;227    //    <i> Brown out reset enable
;;;228    //    <o1> BOR delay 
;;;229    //      <0=>No delay
;;;230    //      <1=>Delay 100 us
;;;231    //    <i> Brown out reset delay config
;;;232    //  </h>
;;;233    #define BOR_ENABLE 1
;;;234    #define BOR_DELAY 1
;;;235    #if BOR_ENABLE == 1
;;;236        #define BOR_ENABLE_OPTION ENABLE
;;;237    #else
;;;238        #define BOR_ENABLE_OPTION DISABLE
;;;239    #endif
;;;240    #if BOR_DELAY == 1
;;;241        #define BOR_DELAY_OPTION ENABLE
;;;242    #else
;;;243        #define BOR_DELAY_OPTION DISABLE
;;;244    #endif
;;;245        bor_init(BOR_ENABLE_OPTION,BOR_DELAY_OPTION);
000042  2101              MOVS     r1,#1
000044  4608              MOV      r0,r1
000046  f7fffffe          BL       bor_init
;;;246    
;;;247    //  <h> LVDT
;;;248    //    <q0> LVDT enable
;;;249    //    <i> Low voltage detect enable
;;;250    //    <o1> LVDT gear
;;;251    //      <0=> 3.5V
;;;252    //      <1=> 4.0V
;;;253    //      <2=> 4.5V
;;;254    //    <i> LVDT gear select
;;;255    //    <q2> LVDT interrupt enable
;;;256    //    <i> LVDT interrupt enable
;;;257    //  </h>
;;;258    #define LVDT_ENABLE 1
;;;259    #define LVDT_GEAR 0
;;;260    #define LVDT_INT_ENABLE 1
;;;261    #if LVDT_ENABLE == 1
;;;262        #define LVDT_ENABLE_OPTION ENABLE
;;;263    #else
;;;264        #define LVDT_ENABLE_OPTION DISABLE
;;;265    #endif
;;;266    #if LVDT_INT_ENABLE == 1
;;;267        #define LVDT_INT_ENABLE_OPTION ENABLE
;;;268    #else
;;;269        #define LVDT_INT_ENABLE_OPTION DISABLE
;;;270    #endif
;;;271        lvdt_init(LVDT_ENABLE_OPTION,LVDT_GEAR,LVDT_INT_ENABLE_OPTION);
00004a  2201              MOVS     r2,#1
00004c  2100              MOVS     r1,#0
00004e  4610              MOV      r0,r2
000050  f7fffffe          BL       lvdt_init
;;;272    
;;;273    //  <q> RESET filter enable
;;;274    //  <i> RESET pin filter enable
;;;275    #define RESET_FILTER_ENABLE 1
;;;276    #if RESET_FILTER_ENABLE == 1
;;;277        #define RESET_FILTER_OPTION ENABLE
;;;278    #else
;;;279        #define RESET_FILTER_OPTION DISABLE
;;;280    #endif
;;;281        reset_filter(RESET_FILTER_OPTION);
000054  2001              MOVS     r0,#1
000056  f7fffffe          BL       reset_filter
;;;282    
;;;283    //  <o> FLASH protect size
;;;284    //    <0x0=> No protection
;;;285    //    <0x1=> 2k Bytes
;;;286    //    <0x2=> 4k Bytes
;;;287    //    <0x3=> 6k Bytes
;;;288    //    <0x4=> 8k Bytes
;;;289    //    <0x5=> 10k Bytes
;;;290    //    <0x6=> 12k Bytes
;;;291    //    <0x7=> 14k Bytes
;;;292    //    <0x8=> 16k Bytes
;;;293    //    <0x9=> 18k Bytes
;;;294    //    <0xA=> 20k Bytes
;;;295    //    <0xB=> 22k Bytes
;;;296    //    <0xC=> 24k Bytes
;;;297    //    <0xD=> 26k Bytes
;;;298    //    <0xE=> 28k Bytes
;;;299    //    <0xF=> 30k Bytes
;;;300    //    <0x10=> 32k Bytes
;;;301    //    <0x11=> 34k Bytes
;;;302    //    <0x12=> 36k Bytes
;;;303    //    <0x13=> 38k Bytes
;;;304    //    <0x14=> 40k Bytes
;;;305    //    <0x15=> 42k Bytes
;;;306    //    <0x16=> 44k Bytes
;;;307    //    <0x17=> 46k Bytes
;;;308    //    <0x18=> 48k Bytes
;;;309    //    <0x19=> 50k Bytes
;;;310    //    <0x1A=> 52k Bytes
;;;311    //    <0x1B=> 54k Bytes
;;;312    //    <0x1C=> 56k Bytes
;;;313    //    <0x1D=> 58k Bytes
;;;314    //    <0x1E=> 60k Bytes
;;;315    //    <0x1F=> 62k Bytes
;;;316    //    <0x20=> 64k Bytes
;;;317    //    <0x21=> 66k Bytes
;;;318    //    <0x22=> 68k Bytes
;;;319    //    <0x23=> 70k Bytes
;;;320    //    <0x24=> 72k Bytes
;;;321    //    <0x25=> 74k Bytes
;;;322    //    <0x26=> 76k Bytes
;;;323    //    <0x27=> 78k Bytes
;;;324    //    <0x28=> 80k Bytes
;;;325    //    <0x29=> 82k Bytes
;;;326    //    <0x2A=> 84k Bytes
;;;327    //    <0x2B=> 86k Bytes
;;;328    //    <0x2C=> 88k Bytes
;;;329    //    <0x2D=> 90k Bytes
;;;330    //    <0x2E=> 92k Bytes
;;;331    //    <0x2F=> 94k Bytes
;;;332    //    <0x30=> 96k Bytes
;;;333    //  <i> FLASH protect size select
;;;334    #ifdef BF7x06AMxx_EFLASH_DRIVER_PRESENT
;;;335        flash_protect(0);
;;;336    #endif
;;;337    
;;;338    //  <o> EEPROM protect size
;;;339    //    <0x0=> No protection
;;;340    //    <0x1=> 64 Bytes
;;;341    //    <0x2=> 128 Bytes
;;;342    //    <0x3=> 192 Bytes
;;;343    //    <0x4=> 256 Bytes
;;;344    //    <0x5=> 320 Bytes
;;;345    //    <0x6=> 384 Bytes
;;;346    //    <0x7=> 448 Bytes
;;;347    //    <0x8=> 512 Bytes
;;;348    //    <0x9=> 576 Bytes
;;;349    //    <0xA=> 640 Bytes
;;;350    //    <0xB=> 704 Bytes
;;;351    //    <0xC=> 768 Bytes
;;;352    //    <0xD=> 832 Bytes
;;;353    //    <0xE=> 896 Bytes
;;;354    //    <0xF=> 960 Bytes
;;;355    //    <0x10=> 1024 Bytes
;;;356    //    <0x11=> 1088 Bytes
;;;357    //    <0x12=> 1152 Bytes
;;;358    //    <0x13=> 1216 Bytes
;;;359    //    <0x14=> 1280 Bytes
;;;360    //    <0x15=> 1344 Bytes
;;;361    //    <0x16=> 1408 Bytes
;;;362    //    <0x17=> 1472 Bytes
;;;363    //    <0x18=> 1536 Bytes
;;;364    //    <0x19=> 1600 Bytes
;;;365    //    <0x1A=> 1664 Bytes
;;;366    //    <0x1B=> 1728 Bytes
;;;367    //    <0x1C=> 1792 Bytes
;;;368    //    <0x1D=> 1856 Bytes
;;;369    //    <0x1E=> 1920 Bytes
;;;370    //    <0x1F=> 1984 Bytes
;;;371    //    <0x20=> 2048 Bytes
;;;372    //  <i> EEPROM protect size select
;;;373    #ifdef BF7x06AMxx_EFLASH_DRIVER_PRESENT
;;;374        eeprom_protect(0);
;;;375    #endif
;;;376    }
00005a  bd10              POP      {r4,pc}
                          ENDP

                  |L1.92|
                          DCD      0x50010000
                  |L1.96|
                          DCD      0x00007c6b
                  |L1.100|
                          DCD      0x007a1200
                  |L1.104|
                          DCD      ||.data||
                  |L1.108|
                          DCD      0xffffc35e
                  |L1.112|
                          DCD      0xffffa1e5
                  |L1.116|
                          DCD      0x01e84800
                  |L1.120|
                          DCD      0x00f42400
                  |L1.124|
                          DCD      __Vectors
                  |L1.128|
                          DCD      0x00009abd
                  |L1.132|
                          DCD      0x00008d9c

                          AREA ||.data||, DATA, ALIGN=2

                  SystemCoreClock
                          DCD      0x01e84800

;*** Start embedded assembler ***

#line 1 "RTE\\Startup\\BF7006AM64\\system_BF7006AMxx.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___19_system_BF7006AMxx_c_5d646a67____REV16|
#line 447 ".\\RTE\\CMSIS\\BF7006AM64\\cmsis_armcc.h"
|__asm___19_system_BF7006AMxx_c_5d646a67____REV16| PROC
#line 448

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___19_system_BF7006AMxx_c_5d646a67____REVSH|
#line 462
|__asm___19_system_BF7006AMxx_c_5d646a67____REVSH| PROC
#line 463

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

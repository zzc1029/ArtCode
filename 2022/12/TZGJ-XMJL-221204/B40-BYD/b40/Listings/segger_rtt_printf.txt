; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--list --debug -c --asm --interleave --gnu -o.\obj\segger_rtt_printf.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\obj\segger_rtt_printf.d --cpu=Cortex-M0 --apcs=interwork -Otime --diag_suppress=9931 -I.\src\pt -I.\src -I.\config -I.\RTE\CMSIS\BF7006AM64 -I.\RTE\Device\BF7006AM64 -I.\RTE\SEGGER -I.\RTE\Startup\BF7006AM64 -I.\RTE\_b40 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.8.0\CMSIS\Core\Include -IC:\Keil_v5\ARM\PACK\BYD\BYDMicro_DFP\1.1.0\Device\Include\BF7006AMxx -D__UVISION_VERSION=536 -D_RTE_ -D_RTE_ --omf_browse=.\obj\segger_rtt_printf.crf RTE\SEGGER\SEGGER_RTT_printf.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _StoreChar PROC
;;;111    */
;;;112    static void _StoreChar(SEGGER_RTT_PRINTF_DESC * p, char c) {
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
;;;113      unsigned Cnt;
;;;114    
;;;115      Cnt = p->Cnt;
000004  6880              LDR      r0,[r0,#8]
;;;116      if ((Cnt + 1u) <= p->BufferSize) {
000006  6863              LDR      r3,[r4,#4]
000008  1c42              ADDS     r2,r0,#1
00000a  4293              CMP      r3,r2
00000c  d305              BCC      |L1.26|
;;;117        *(p->pBuffer + Cnt) = c;
00000e  6823              LDR      r3,[r4,#0]
000010  5419              STRB     r1,[r3,r0]
;;;118        p->Cnt = Cnt + 1u;
;;;119        p->ReturnValue++;
000012  60a2              STR      r2,[r4,#8]
000014  68e0              LDR      r0,[r4,#0xc]
000016  1c40              ADDS     r0,r0,#1
000018  60e0              STR      r0,[r4,#0xc]
                  |L1.26|
;;;120      }
;;;121      //
;;;122      // Write part of string, when the buffer is full
;;;123      //
;;;124      if (p->Cnt == p->BufferSize) {
00001a  68a2              LDR      r2,[r4,#8]
00001c  6860              LDR      r0,[r4,#4]
00001e  4282              CMP      r2,r0
000020  d109              BNE      |L1.54|
;;;125        if (SEGGER_RTT_Write(p->RTTBufferIndex, p->pBuffer, p->Cnt) != p->Cnt) {
000022  6821              LDR      r1,[r4,#0]
000024  6920              LDR      r0,[r4,#0x10]
000026  f7fffffe          BL       SEGGER_RTT_Write
00002a  68a1              LDR      r1,[r4,#8]
00002c  4288              CMP      r0,r1
00002e  d003              BEQ      |L1.56|
;;;126          p->ReturnValue = -1;
000030  2000              MOVS     r0,#0
000032  43c0              MVNS     r0,r0
000034  60e0              STR      r0,[r4,#0xc]
                  |L1.54|
;;;127        } else {
;;;128          p->Cnt = 0u;
;;;129        }
;;;130      }
;;;131    }
000036  bd10              POP      {r4,pc}
                  |L1.56|
000038  2000              MOVS     r0,#0                 ;128
00003a  60a0              STR      r0,[r4,#8]            ;128
00003c  bd10              POP      {r4,pc}
;;;132    
                          ENDP

                  _PrintUnsigned PROC
;;;136    */
;;;137    static void _PrintUnsigned(SEGGER_RTT_PRINTF_DESC * pBufferDesc, unsigned v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
00003e  b5ff              PUSH     {r0-r7,lr}
000040  b081              SUB      sp,sp,#4
;;;138      static const char _aV2C[16] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' };
;;;139      unsigned Div;
;;;140      unsigned Digit;
;;;141      unsigned Number;
;;;142      unsigned Width;
;;;143      char c;
;;;144    
;;;145      Number = v;
;;;146      Digit = 1u;
000042  2701              MOVS     r7,#1
;;;147      //
;;;148      // Get actual field width
;;;149      //
;;;150      Width = 1u;
;;;151      while (Number >= Base) {
000044  9903              LDR      r1,[sp,#0xc]
000046  9802              LDR      r0,[sp,#8]
000048  9c0a              LDR      r4,[sp,#0x28]
00004a  461e              MOV      r6,r3                 ;137
00004c  463d              MOV      r5,r7                 ;150
00004e  4288              CMP      r0,r1
000050  d305              BCC      |L1.94|
                  |L1.82|
;;;152        Number = (Number / Base);
000052  f7fffffe          BL       __aeabi_uidivmod
000056  9903              LDR      r1,[sp,#0xc]          ;151
000058  1c6d              ADDS     r5,r5,#1              ;151
00005a  4288              CMP      r0,r1                 ;151
00005c  d2f9              BCS      |L1.82|
                  |L1.94|
;;;153        Width++;
;;;154      }
;;;155      if (NumDigits > Width) {
00005e  42ae              CMP      r6,r5
000060  d900              BLS      |L1.100|
;;;156        Width = NumDigits;
000062  4635              MOV      r5,r6
                  |L1.100|
;;;157      }
;;;158      //
;;;159      // Print leading chars if necessary
;;;160      //
;;;161      if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
000064  980b              LDR      r0,[sp,#0x2c]
000066  07c0              LSLS     r0,r0,#31
000068  d118              BNE      |L1.156|
;;;162        if (FieldWidth != 0u) {
00006a  2c00              CMP      r4,#0
00006c  d016              BEQ      |L1.156|
;;;163          if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
00006e  980b              LDR      r0,[sp,#0x2c]
000070  0780              LSLS     r0,r0,#30
000072  d501              BPL      |L1.120|
000074  2e00              CMP      r6,#0
000076  d002              BEQ      |L1.126|
                  |L1.120|
;;;164            c = '0';
;;;165          } else {
;;;166            c = ' ';
000078  2020              MOVS     r0,#0x20
                  |L1.122|
00007a  9000              STR      r0,[sp,#0]            ;164
00007c  e00c              B        |L1.152|
                  |L1.126|
00007e  2030              MOVS     r0,#0x30              ;164
000080  e7fb              B        |L1.122|
                  |L1.130|
;;;167          }
;;;168          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
;;;169            FieldWidth--;
;;;170            _StoreChar(pBufferDesc, c);
000082  1e64              SUBS     r4,r4,#1
000084  9900              LDR      r1,[sp,#0]
000086  9801              LDR      r0,[sp,#4]
000088  f7fffffe          BL       _StoreChar
;;;171            if (pBufferDesc->ReturnValue < 0) {
00008c  9801              LDR      r0,[sp,#4]
00008e  68c0              LDR      r0,[r0,#0xc]
000090  2800              CMP      r0,#0
000092  db32              BLT      |L1.250|
000094  2c00              CMP      r4,#0                 ;168
000096  d001              BEQ      |L1.156|
                  |L1.152|
000098  42a5              CMP      r5,r4                 ;168
00009a  d3f2              BCC      |L1.130|
                  |L1.156|
;;;172              break;
;;;173            }
;;;174          }
;;;175        }
;;;176      }
;;;177      if (pBufferDesc->ReturnValue >= 0) {
00009c  9801              LDR      r0,[sp,#4]
00009e  68c0              LDR      r0,[r0,#0xc]
0000a0  2800              CMP      r0,#0
0000a2  db2a              BLT      |L1.250|
                  |L1.164|
;;;178        //
;;;179        // Compute Digit.
;;;180        // Loop until Digit has the value of the highest digit required.
;;;181        // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
;;;182        //
;;;183        while (1) {
;;;184          if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
0000a4  2e01              CMP      r6,#1
0000a6  d901              BLS      |L1.172|
0000a8  1e76              SUBS     r6,r6,#1
;;;185            NumDigits--;
0000aa  e006              B        |L1.186|
                  |L1.172|
;;;186          } else {
;;;187            Div = v / Digit;
0000ac  4639              MOV      r1,r7
0000ae  9802              LDR      r0,[sp,#8]
0000b0  f7fffffe          BL       __aeabi_uidivmod
;;;188            if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
0000b4  9903              LDR      r1,[sp,#0xc]
0000b6  4288              CMP      r0,r1
0000b8  d302              BCC      |L1.192|
                  |L1.186|
;;;189              break;
;;;190            }
;;;191          }
;;;192          Digit *= Base;
0000ba  9803              LDR      r0,[sp,#0xc]
0000bc  4347              MULS     r7,r0,r7
0000be  e7f1              B        |L1.164|
                  |L1.192|
;;;193        }
;;;194        //
;;;195        // Output digits
;;;196        //
;;;197        do {
;;;198          Div = v / Digit;
;;;199          v -= Div * Digit;
;;;200          _StoreChar(pBufferDesc, _aV2C[Div]);
0000c0  4ebb              LDR      r6,|L1.944|
                  |L1.194|
0000c2  4639              MOV      r1,r7                 ;198
0000c4  9802              LDR      r0,[sp,#8]            ;198
0000c6  f7fffffe          BL       __aeabi_uidivmod
0000ca  4601              MOV      r1,r0                 ;198
0000cc  9a02              LDR      r2,[sp,#8]            ;199
0000ce  4379              MULS     r1,r7,r1              ;199
0000d0  1a51              SUBS     r1,r2,r1              ;199
0000d2  9102              STR      r1,[sp,#8]
0000d4  5c31              LDRB     r1,[r6,r0]
0000d6  9801              LDR      r0,[sp,#4]
0000d8  f7fffffe          BL       _StoreChar
;;;201          if (pBufferDesc->ReturnValue < 0) {
0000dc  9801              LDR      r0,[sp,#4]
0000de  68c0              LDR      r0,[r0,#0xc]
0000e0  2800              CMP      r0,#0
0000e2  db05              BLT      |L1.240|
;;;202            break;
;;;203          }
;;;204          Digit /= Base;
0000e4  4638              MOV      r0,r7
0000e6  9903              LDR      r1,[sp,#0xc]
0000e8  f7fffffe          BL       __aeabi_uidivmod
0000ec  0007              MOVS     r7,r0
;;;205        } while (Digit);
0000ee  d1e8              BNE      |L1.194|
                  |L1.240|
;;;206        //
;;;207        // Print trailing spaces if necessary
;;;208        //
;;;209        if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
0000f0  980b              LDR      r0,[sp,#0x2c]
0000f2  07c0              LSLS     r0,r0,#31
0000f4  d001              BEQ      |L1.250|
;;;210          if (FieldWidth != 0u) {
0000f6  2c00              CMP      r4,#0
0000f8  d10c              BNE      |L1.276|
                  |L1.250|
;;;211            while ((FieldWidth != 0u) && (Width < FieldWidth)) {
;;;212              FieldWidth--;
;;;213              _StoreChar(pBufferDesc, ' ');
;;;214              if (pBufferDesc->ReturnValue < 0) {
;;;215                break;
;;;216              }
;;;217            }
;;;218          }
;;;219        }
;;;220      }
;;;221    }
0000fa  b005              ADD      sp,sp,#0x14
0000fc  bdf0              POP      {r4-r7,pc}
                  |L1.254|
0000fe  2120              MOVS     r1,#0x20              ;213
000100  1e64              SUBS     r4,r4,#1              ;213
000102  9801              LDR      r0,[sp,#4]            ;213
000104  f7fffffe          BL       _StoreChar
000108  9801              LDR      r0,[sp,#4]            ;214
00010a  68c0              LDR      r0,[r0,#0xc]          ;214
00010c  2800              CMP      r0,#0                 ;214
00010e  dbf4              BLT      |L1.250|
000110  2c00              CMP      r4,#0                 ;211
000112  d0f2              BEQ      |L1.250|
                  |L1.276|
000114  42a5              CMP      r5,r4                 ;211
000116  d3f2              BCC      |L1.254|
000118  b005              ADD      sp,sp,#0x14
00011a  bdf0              POP      {r4-r7,pc}
;;;222    
                          ENDP

                  SEGGER_RTT_vprintf PROC
;;;321    */
;;;322    int SEGGER_RTT_vprintf(unsigned BufferIndex, const char * sFormat, va_list * pParamList) {
00011c  b5f7              PUSH     {r0-r2,r4-r7,lr}
00011e  b09c              SUB      sp,sp,#0x70
;;;323      char c;
;;;324      SEGGER_RTT_PRINTF_DESC BufferDesc;
;;;325      int v;
;;;326      unsigned NumDigits;
;;;327      unsigned FormatFlags;
;;;328      unsigned FieldWidth;
;;;329      char acBuffer[SEGGER_RTT_PRINTF_BUFFER_SIZE];
;;;330    
;;;331      BufferDesc.pBuffer        = acBuffer;
000120  a808              ADD      r0,sp,#0x20
;;;332      BufferDesc.BufferSize     = SEGGER_RTT_PRINTF_BUFFER_SIZE;
000122  9002              STR      r0,[sp,#8]
000124  2040              MOVS     r0,#0x40
;;;333      BufferDesc.Cnt            = 0u;
000126  9003              STR      r0,[sp,#0xc]
000128  460c              MOV      r4,r1                 ;322
00012a  2000              MOVS     r0,#0
;;;334      BufferDesc.RTTBufferIndex = BufferIndex;
00012c  991c              LDR      r1,[sp,#0x70]
00012e  4616              MOV      r6,r2                 ;322
000130  9004              STR      r0,[sp,#0x10]
;;;335      BufferDesc.ReturnValue    = 0;
000132  9106              STR      r1,[sp,#0x18]
000134  9005              STR      r0,[sp,#0x14]
                  |L1.310|
;;;336    
;;;337      do {
;;;338        c = *sFormat;
000136  7821              LDRB     r1,[r4,#0]
000138  1c64              ADDS     r4,r4,#1
;;;339        sFormat++;
;;;340        if (c == 0u) {
00013a  2900              CMP      r1,#0
00013c  d071              BEQ      |L1.546|
;;;341          break;
;;;342        }
;;;343        if (c == '%') {
00013e  2925              CMP      r1,#0x25
000140  d007              BEQ      |L1.338|
;;;344          //
;;;345          // Filter out flags
;;;346          //
;;;347          FormatFlags = 0u;
;;;348          v = 1;
;;;349          do {
;;;350            c = *sFormat;
;;;351            switch (c) {
;;;352            case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
;;;353            case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
;;;354            case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
;;;355            case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
;;;356            default:  v = 0; break;
;;;357            }
;;;358          } while (v);
;;;359          //
;;;360          // filter out field with
;;;361          //
;;;362          FieldWidth = 0u;
;;;363          do {
;;;364            c = *sFormat;
;;;365            if ((c < '0') || (c > '9')) {
;;;366              break;
;;;367            }
;;;368            sFormat++;
;;;369            FieldWidth = (FieldWidth * 10u) + ((unsigned)c - '0');
;;;370          } while (1);
;;;371    
;;;372          //
;;;373          // Filter out precision (number of digits to display)
;;;374          //
;;;375          NumDigits = 0u;
;;;376          c = *sFormat;
;;;377          if (c == '.') {
;;;378            sFormat++;
;;;379            do {
;;;380              c = *sFormat;
;;;381              if ((c < '0') || (c > '9')) {
;;;382                break;
;;;383              }
;;;384              sFormat++;
;;;385              NumDigits = NumDigits * 10u + ((unsigned)c - '0');
;;;386            } while (1);
;;;387          }
;;;388          //
;;;389          // Filter out length modifier
;;;390          //
;;;391          c = *sFormat;
;;;392          do {
;;;393            if ((c == 'l') || (c == 'h')) {
;;;394              sFormat++;
;;;395              c = *sFormat;
;;;396            } else {
;;;397              break;
;;;398            }
;;;399          } while (1);
;;;400          //
;;;401          // Handle specifiers
;;;402          //
;;;403          switch (c) {
;;;404          case 'c': {
;;;405            char c0;
;;;406            v = va_arg(*pParamList, int);
;;;407            c0 = (char)v;
;;;408            _StoreChar(&BufferDesc, c0);
;;;409            break;
;;;410          }
;;;411          case 'd':
;;;412            v = va_arg(*pParamList, int);
;;;413            _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
;;;414            break;
;;;415          case 'u':
;;;416            v = va_arg(*pParamList, int);
;;;417            _PrintUnsigned(&BufferDesc, (unsigned)v, 10u, NumDigits, FieldWidth, FormatFlags);
;;;418            break;
;;;419          case 'x':
;;;420          case 'X':
;;;421            v = va_arg(*pParamList, int);
;;;422            _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, NumDigits, FieldWidth, FormatFlags);
;;;423            break;
;;;424          case 's':
;;;425            {
;;;426              const char * s = va_arg(*pParamList, const char *);
;;;427              do {
;;;428                c = *s;
;;;429                s++;
;;;430                if (c == '\0') {
;;;431                  break;
;;;432                }
;;;433               _StoreChar(&BufferDesc, c);
;;;434              } while (BufferDesc.ReturnValue >= 0);
;;;435            }
;;;436            break;
;;;437          case 'p':
;;;438            v = va_arg(*pParamList, int);
;;;439            _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, 8u, 8u, 0u);
;;;440            break;
;;;441          case '%':
;;;442            _StoreChar(&BufferDesc, '%');
;;;443            break;
;;;444          default:
;;;445            break;
;;;446          }
;;;447          sFormat++;
;;;448        } else {
;;;449          _StoreChar(&BufferDesc, c);
000142  a802              ADD      r0,sp,#8
000144  f7fffffe          BL       _StoreChar
                  |L1.328|
;;;450        }
;;;451      } while (BufferDesc.ReturnValue >= 0);
000148  9805              LDR      r0,[sp,#0x14]
00014a  2800              CMP      r0,#0
00014c  daf3              BGE      |L1.310|
                  |L1.334|
;;;452    
;;;453      if (BufferDesc.ReturnValue > 0) {
;;;454        //
;;;455        // Write remaining data, if any
;;;456        //
;;;457        if (BufferDesc.Cnt != 0u) {
;;;458          SEGGER_RTT_Write(BufferIndex, acBuffer, BufferDesc.Cnt);
;;;459        }
;;;460        BufferDesc.ReturnValue += (int)BufferDesc.Cnt;
;;;461      }
;;;462      return BufferDesc.ReturnValue;
;;;463    }
00014e  b01f              ADD      sp,sp,#0x7c
000150  bdf0              POP      {r4-r7,pc}
                  |L1.338|
000152  2301              MOVS     r3,#1                 ;348
000154  2000              MOVS     r0,#0                 ;347
000156  2702              MOVS     r7,#2                 ;353
000158  461d              MOV      r5,r3                 ;348
00015a  2208              MOVS     r2,#8                 ;355
                  |L1.348|
00015c  7821              LDRB     r1,[r4,#0]            ;350
00015e  2923              CMP      r1,#0x23              ;351
000160  d00d              BEQ      |L1.382|
000162  292b              CMP      r1,#0x2b              ;351
000164  d008              BEQ      |L1.376|
000166  292d              CMP      r1,#0x2d              ;351
000168  d002              BEQ      |L1.368|
00016a  2930              CMP      r1,#0x30              ;351
00016c  d10b              BNE      |L1.390|
00016e  e001              B        |L1.372|
                  |L1.368|
000170  4328              ORRS     r0,r0,r5              ;352
000172  e005              B        |L1.384|
                  |L1.372|
000174  4338              ORRS     r0,r0,r7              ;353
000176  e003              B        |L1.384|
                  |L1.376|
000178  2104              MOVS     r1,#4                 ;354
00017a  4308              ORRS     r0,r0,r1              ;354
00017c  e000              B        |L1.384|
                  |L1.382|
00017e  4310              ORRS     r0,r0,r2              ;355
                  |L1.384|
000180  1c64              ADDS     r4,r4,#1              ;355
000182  2b00              CMP      r3,#0                 ;358
000184  d1ea              BNE      |L1.348|
                  |L1.390|
000186  2500              MOVS     r5,#0                 ;362
                  |L1.392|
000188  7821              LDRB     r1,[r4,#0]            ;364
00018a  460b              MOV      r3,r1                 ;365
00018c  3b30              SUBS     r3,r3,#0x30           ;365
00018e  2b0a              CMP      r3,#0xa               ;365
000190  d205              BCS      |L1.414|
000192  230a              MOVS     r3,#0xa               ;369
000194  435d              MULS     r5,r3,r5              ;369
000196  186d              ADDS     r5,r5,r1              ;369
000198  1c64              ADDS     r4,r4,#1              ;369
00019a  3d30              SUBS     r5,r5,#0x30           ;369
00019c  e7f4              B        |L1.392|
                  |L1.414|
00019e  2300              MOVS     r3,#0                 ;375
0001a0  b2cf              UXTB     r7,r1                 ;376
0001a2  2f2e              CMP      r7,#0x2e              ;377
0001a4  d10b              BNE      |L1.446|
0001a6  1c64              ADDS     r4,r4,#1              ;377
                  |L1.424|
0001a8  7821              LDRB     r1,[r4,#0]            ;380
0001aa  460f              MOV      r7,r1                 ;381
0001ac  3f30              SUBS     r7,r7,#0x30           ;381
0001ae  2f0a              CMP      r7,#0xa               ;381
0001b0  d205              BCS      |L1.446|
0001b2  270a              MOVS     r7,#0xa               ;385
0001b4  437b              MULS     r3,r7,r3              ;385
0001b6  185b              ADDS     r3,r3,r1              ;385
0001b8  3b30              SUBS     r3,r3,#0x30           ;385
0001ba  1c64              ADDS     r4,r4,#1              ;385
0001bc  e7f4              B        |L1.424|
                  |L1.446|
0001be  296c              CMP      r1,#0x6c              ;393
0001c0  d00d              BEQ      |L1.478|
0001c2  2968              CMP      r1,#0x68              ;393
0001c4  d00b              BEQ      |L1.478|
0001c6  2970              CMP      r1,#0x70              ;403
0001c8  d07e              BEQ      |L1.712|
0001ca  dc0b              BGT      |L1.484|
0001cc  2925              CMP      r1,#0x25              ;403
0001ce  d07c              BEQ      |L1.714|
0001d0  2958              CMP      r1,#0x58              ;403
0001d2  d07b              BEQ      |L1.716|
0001d4  2963              CMP      r1,#0x63              ;403
0001d6  d00c              BEQ      |L1.498|
0001d8  2964              CMP      r1,#0x64              ;403
0001da  d178              BNE      |L1.718|
0001dc  e011              B        |L1.514|
                  |L1.478|
0001de  7861              LDRB     r1,[r4,#1]            ;395
0001e0  1c64              ADDS     r4,r4,#1              ;395
0001e2  e7ec              B        |L1.446|
                  |L1.484|
0001e4  2973              CMP      r1,#0x73              ;403
0001e6  d073              BEQ      |L1.720|
0001e8  2975              CMP      r1,#0x75              ;403
0001ea  d072              BEQ      |L1.722|
0001ec  2978              CMP      r1,#0x78              ;403
0001ee  d16e              BNE      |L1.718|
0001f0  e094              B        |L1.796|
                  |L1.498|
0001f2  6830              LDR      r0,[r6,#0]            ;406
0001f4  1d01              ADDS     r1,r0,#4              ;406
0001f6  6031              STR      r1,[r6,#0]            ;406
0001f8  7801              LDRB     r1,[r0,#0]            ;406
0001fa  a802              ADD      r0,sp,#8              ;408
0001fc  f7fffffe          BL       _StoreChar
000200  e0b7              B        |L1.882|
                  |L1.514|
000202  6831              LDR      r1,[r6,#0]            ;412
000204  1d0a              ADDS     r2,r1,#4              ;412
000206  6032              STR      r2,[r6,#0]            ;412
000208  6809              LDR      r1,[r1,#0]            ;412
00020a  9119              STR      r1,[sp,#0x64]         ;413
00020c  210a              MOVS     r1,#0xa               ;413
00020e  9107              STR      r1,[sp,#0x1c]         ;413
000210  9000              STR      r0,[sp,#0]            ;413
000212  9919              LDR      r1,[sp,#0x64]         ;413
000214  aa02              ADD      r2,sp,#8              ;413
000216  9218              STR      r2,[sp,#0x60]         ;413
000218  931a              STR      r3,[sp,#0x68]         ;413
00021a  2900              CMP      r1,#0                 ;413
00021c  da02              BGE      |L1.548|
00021e  4248              RSBS     r0,r1,#0              ;413
000220  e001              B        |L1.550|
                  |L1.546|
000222  e0a8              B        |L1.886|
                  |L1.548|
000224  4608              MOV      r0,r1                 ;413
                  |L1.550|
000226  2701              MOVS     r7,#1                 ;413
000228  280a              CMP      r0,#0xa               ;413
00022a  db06              BLT      |L1.570|
                  |L1.556|
00022c  9907              LDR      r1,[sp,#0x1c]         ;413
00022e  f7fffffe          BL       __aeabi_idivmod
000232  9907              LDR      r1,[sp,#0x1c]         ;413
000234  1c7f              ADDS     r7,r7,#1              ;413
000236  4288              CMP      r0,r1                 ;413
000238  daf8              BGE      |L1.556|
                  |L1.570|
00023a  981a              LDR      r0,[sp,#0x68]         ;413
00023c  42b8              CMP      r0,r7                 ;413
00023e  d900              BLS      |L1.578|
000240  4607              MOV      r7,r0                 ;413
                  |L1.578|
000242  2d00              CMP      r5,#0                 ;413
000244  d006              BEQ      |L1.596|
000246  9819              LDR      r0,[sp,#0x64]         ;413
000248  2800              CMP      r0,#0                 ;413
00024a  db02              BLT      |L1.594|
00024c  9800              LDR      r0,[sp,#0]            ;413
00024e  0740              LSLS     r0,r0,#29             ;413
000250  d500              BPL      |L1.596|
                  |L1.594|
000252  1e6d              SUBS     r5,r5,#1              ;413
                  |L1.596|
000254  9800              LDR      r0,[sp,#0]            ;413
000256  0780              LSLS     r0,r0,#30             ;413
000258  d502              BPL      |L1.608|
00025a  981a              LDR      r0,[sp,#0x68]         ;413
00025c  2800              CMP      r0,#0                 ;413
00025e  d012              BEQ      |L1.646|
                  |L1.608|
000260  9800              LDR      r0,[sp,#0]            ;413
000262  07c0              LSLS     r0,r0,#31             ;413
000264  d10f              BNE      |L1.646|
000266  2d00              CMP      r5,#0                 ;413
000268  d10b              BNE      |L1.642|
00026a  e00c              B        |L1.646|
                  |L1.620|
00026c  2120              MOVS     r1,#0x20              ;413
00026e  1e6d              SUBS     r5,r5,#1              ;413
000270  9818              LDR      r0,[sp,#0x60]         ;413
000272  f7fffffe          BL       _StoreChar
000276  9818              LDR      r0,[sp,#0x60]         ;413
000278  68c0              LDR      r0,[r0,#0xc]          ;413
00027a  2800              CMP      r0,#0                 ;413
00027c  db79              BLT      |L1.882|
00027e  2d00              CMP      r5,#0                 ;413
000280  d001              BEQ      |L1.646|
                  |L1.642|
000282  42af              CMP      r7,r5                 ;413
000284  d3f2              BCC      |L1.620|
                  |L1.646|
000286  9818              LDR      r0,[sp,#0x60]         ;413
000288  68c0              LDR      r0,[r0,#0xc]          ;413
00028a  2800              CMP      r0,#0                 ;413
00028c  db71              BLT      |L1.882|
00028e  9819              LDR      r0,[sp,#0x64]         ;413
000290  2800              CMP      r0,#0                 ;413
000292  da06              BGE      |L1.674|
000294  4240              RSBS     r0,r0,#0              ;413
000296  9019              STR      r0,[sp,#0x64]         ;413
000298  212d              MOVS     r1,#0x2d              ;413
00029a  9818              LDR      r0,[sp,#0x60]         ;413
00029c  f7fffffe          BL       _StoreChar
0002a0  e006              B        |L1.688|
                  |L1.674|
0002a2  9800              LDR      r0,[sp,#0]            ;413
0002a4  0740              LSLS     r0,r0,#29             ;413
0002a6  d507              BPL      |L1.696|
0002a8  212b              MOVS     r1,#0x2b              ;413
0002aa  9818              LDR      r0,[sp,#0x60]         ;413
0002ac  f7fffffe          BL       _StoreChar
                  |L1.688|
0002b0  9818              LDR      r0,[sp,#0x60]         ;413
0002b2  68c0              LDR      r0,[r0,#0xc]          ;413
0002b4  2800              CMP      r0,#0                 ;413
0002b6  db5c              BLT      |L1.882|
                  |L1.696|
0002b8  9800              LDR      r0,[sp,#0]            ;413
0002ba  0780              LSLS     r0,r0,#30             ;413
0002bc  0f80              LSRS     r0,r0,#30             ;413
0002be  2802              CMP      r0,#2                 ;413
0002c0  d119              BNE      |L1.758|
0002c2  981a              LDR      r0,[sp,#0x68]         ;413
0002c4  2800              CMP      r0,#0                 ;413
0002c6  e005              B        |L1.724|
                  |L1.712|
0002c8  e042              B        |L1.848|
                  |L1.714|
0002ca  e04e              B        |L1.874|
                  |L1.716|
0002cc  e026              B        |L1.796|
                  |L1.718|
0002ce  e050              B        |L1.882|
                  |L1.720|
0002d0  e02f              B        |L1.818|
                  |L1.722|
0002d2  e01a              B        |L1.778|
                  |L1.724|
0002d4  d10f              BNE      |L1.758|
0002d6  2d00              CMP      r5,#0                 ;413
0002d8  d10b              BNE      |L1.754|
0002da  e00c              B        |L1.758|
                  |L1.732|
0002dc  2130              MOVS     r1,#0x30              ;413
0002de  1e6d              SUBS     r5,r5,#1              ;413
0002e0  9818              LDR      r0,[sp,#0x60]         ;413
0002e2  f7fffffe          BL       _StoreChar
0002e6  9818              LDR      r0,[sp,#0x60]         ;413
0002e8  68c0              LDR      r0,[r0,#0xc]          ;413
0002ea  2800              CMP      r0,#0                 ;413
0002ec  db41              BLT      |L1.882|
0002ee  2d00              CMP      r5,#0                 ;413
0002f0  d001              BEQ      |L1.758|
                  |L1.754|
0002f2  42af              CMP      r7,r5                 ;413
0002f4  d3f2              BCC      |L1.732|
                  |L1.758|
0002f6  9800              LDR      r0,[sp,#0]            ;413
0002f8  9001              STR      r0,[sp,#4]            ;413
0002fa  9500              STR      r5,[sp,#0]            ;413
0002fc  9b1a              LDR      r3,[sp,#0x68]         ;413
0002fe  9a07              LDR      r2,[sp,#0x1c]         ;413
000300  9919              LDR      r1,[sp,#0x64]         ;413
000302  9818              LDR      r0,[sp,#0x60]         ;413
                  |L1.772|
000304  f7fffffe          BL       _PrintUnsigned
000308  e033              B        |L1.882|
                  |L1.778|
00030a  6831              LDR      r1,[r6,#0]            ;416
00030c  1d0a              ADDS     r2,r1,#4              ;416
00030e  6032              STR      r2,[r6,#0]            ;416
000310  6809              LDR      r1,[r1,#0]            ;416
000312  9001              STR      r0,[sp,#4]            ;417
000314  220a              MOVS     r2,#0xa               ;417
000316  9500              STR      r5,[sp,#0]            ;417
000318  a802              ADD      r0,sp,#8              ;417
00031a  e7f3              B        |L1.772|
                  |L1.796|
00031c  6831              LDR      r1,[r6,#0]            ;421
00031e  1d0a              ADDS     r2,r1,#4              ;421
000320  6032              STR      r2,[r6,#0]            ;421
000322  6809              LDR      r1,[r1,#0]            ;421
000324  9001              STR      r0,[sp,#4]            ;422
000326  2210              MOVS     r2,#0x10              ;422
000328  9500              STR      r5,[sp,#0]            ;422
00032a  a802              ADD      r0,sp,#8              ;422
00032c  f7fffffe          BL       _PrintUnsigned
000330  e01f              B        |L1.882|
                  |L1.818|
000332  6830              LDR      r0,[r6,#0]            ;426
000334  1d01              ADDS     r1,r0,#4              ;426
000336  6031              STR      r1,[r6,#0]            ;426
000338  6805              LDR      r5,[r0,#0]            ;426
                  |L1.826|
00033a  7829              LDRB     r1,[r5,#0]            ;428
00033c  1c6d              ADDS     r5,r5,#1              ;428
00033e  2900              CMP      r1,#0                 ;430
000340  d017              BEQ      |L1.882|
000342  a802              ADD      r0,sp,#8              ;433
000344  f7fffffe          BL       _StoreChar
000348  9805              LDR      r0,[sp,#0x14]         ;434
00034a  2800              CMP      r0,#0                 ;434
00034c  daf5              BGE      |L1.826|
00034e  e010              B        |L1.882|
                  |L1.848|
000350  6830              LDR      r0,[r6,#0]            ;438
000352  2308              MOVS     r3,#8                 ;439
000354  1d01              ADDS     r1,r0,#4              ;438
000356  6031              STR      r1,[r6,#0]            ;438
000358  6801              LDR      r1,[r0,#0]            ;439
00035a  2000              MOVS     r0,#0                 ;439
00035c  9200              STR      r2,[sp,#0]            ;439
00035e  9001              STR      r0,[sp,#4]            ;439
000360  2210              MOVS     r2,#0x10              ;439
000362  a802              ADD      r0,sp,#8              ;439
000364  f7fffffe          BL       _PrintUnsigned
000368  e003              B        |L1.882|
                  |L1.874|
00036a  2125              MOVS     r1,#0x25              ;442
00036c  a802              ADD      r0,sp,#8              ;442
00036e  f7fffffe          BL       _StoreChar
                  |L1.882|
000372  1c64              ADDS     r4,r4,#1              ;442
000374  e6e8              B        |L1.328|
                  |L1.886|
000376  2800              CMP      r0,#0                 ;453
000378  dc00              BGT      |L1.892|
00037a  e6e8              B        |L1.334|
                  |L1.892|
00037c  9804              LDR      r0,[sp,#0x10]         ;457
00037e  2800              CMP      r0,#0                 ;457
000380  d004              BEQ      |L1.908|
000382  4602              MOV      r2,r0                 ;458
000384  a908              ADD      r1,sp,#0x20           ;458
000386  981c              LDR      r0,[sp,#0x70]         ;458
000388  f7fffffe          BL       SEGGER_RTT_Write
                  |L1.908|
00038c  9904              LDR      r1,[sp,#0x10]         ;460
00038e  9805              LDR      r0,[sp,#0x14]         ;460
000390  1840              ADDS     r0,r0,r1              ;460
000392  9005              STR      r0,[sp,#0x14]         ;460
000394  b01f              ADD      sp,sp,#0x7c
000396  bdf0              POP      {r4-r7,pc}
;;;464    
                          ENDP

                  SEGGER_RTT_printf PROC
;;;495    */
;;;496    int SEGGER_RTT_printf(unsigned BufferIndex, const char * sFormat, ...) {
000398  b40f              PUSH     {r0-r3}
00039a  b508              PUSH     {r3,lr}
;;;497      int r;
;;;498      va_list ParamList;
;;;499    
;;;500      va_start(ParamList, sFormat);
00039c  a904              ADD      r1,sp,#0x10
;;;501      r = SEGGER_RTT_vprintf(BufferIndex, sFormat, &ParamList);
00039e  9100              STR      r1,[sp,#0]
0003a0  466a              MOV      r2,sp
0003a2  9903              LDR      r1,[sp,#0xc]
0003a4  f7fffffe          BL       SEGGER_RTT_vprintf
;;;502      va_end(ParamList);
;;;503      return r;
;;;504    }
0003a8  b001              ADD      sp,sp,#4
0003aa  bc08              POP      {r3}
0003ac  b004              ADD      sp,sp,#0x10
0003ae  4718              BX       r3
;;;505    /*************************** End of file ****************************/
                          ENDP

                  |L1.944|
                          DCD      ||.constdata||

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  _aV2C
000000  30313233          DCB      0x30,0x31,0x32,0x33
000004  34353637          DCB      0x34,0x35,0x36,0x37
000008  38394142          DCB      0x38,0x39,0x41,0x42
00000c  43444546          DCB      0x43,0x44,0x45,0x46

; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--list --debug -c --asm --interleave --gnu -o.\obj\switch.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\obj\switch.d --cpu=Cortex-M0 --apcs=interwork -Otime --diag_suppress=9931 -I.\src\pt -I.\src -I.\config -I.\RTE\CMSIS\BF7006AM64 -I.\RTE\Device\BF7006AM64 -I.\RTE\SEGGER -I.\RTE\Startup\BF7006AM64 -I.\RTE\_b40 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.8.0\CMSIS\Core\Include -IC:\Keil_v5\ARM\PACK\BYD\BYDMicro_DFP\1.1.0\Device\Include\BF7006AMxx -D__UVISION_VERSION=536 -D_RTE_ -D_RTE_ --omf_browse=.\obj\switch.crf src\switch.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  GetKeyIn PROC
;;;27     */
;;;28     static void GetKeyIn()
000000  b5f8              PUSH     {r3-r7,lr}
;;;29     {
;;;30         int i;
;;;31         uint16_t key_in = 0;
;;;32     
;;;33         PL_OFF();
000002  4e82              LDR      r6,|L1.524|
000004  2500              MOVS     r5,#0                 ;31
000006  2104              MOVS     r1,#4
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       gpio_bit_reset
00000e  bf00              NOP      
;;;34         NOP();
;;;35         PL_ON();
000010  2104              MOVS     r1,#4
000012  4630              MOV      r0,r6
000014  f7fffffe          BL       gpio_bit_set
;;;36     
;;;37         key_in = 0;
;;;38         for (i = 0; i < 16; i++)
;;;39         {
;;;40             CL_OFF();
000018  4f7d              LDR      r7,|L1.528|
00001a  2400              MOVS     r4,#0                 ;38
                  |L1.28|
00001c  2104              MOVS     r1,#4
00001e  4638              MOV      r0,r7
000020  f7fffffe          BL       gpio_bit_reset
;;;41             key_in <<= 1;
000024  0468              LSLS     r0,r5,#17
000026  0c06              LSRS     r6,r0,#16
;;;42             key_in |= MI_IN();
000028  2120              MOVS     r1,#0x20
00002a  4878              LDR      r0,|L1.524|
00002c  f7fffffe          BL       gpio_bit_get
000030  4330              ORRS     r0,r0,r6
000032  4605              MOV      r5,r0
;;;43             CL_ON();
000034  2104              MOVS     r1,#4
000036  4638              MOV      r0,r7
000038  f7fffffe          BL       gpio_bit_set
00003c  1c64              ADDS     r4,r4,#1
00003e  2c10              CMP      r4,#0x10              ;38
000040  dbec              BLT      |L1.28|
;;;44         }
;;;45     
;;;46         key_in = ~key_in;
;;;47     
;;;48         in_sw[0] = key_in;
000042  4974              LDR      r1,|L1.532|
000044  43e8              MVNS     r0,r5                 ;46
000046  7008              STRB     r0,[r1,#0]
;;;49         in_sw[1] = key_in >> 8;
000048  0a00              LSRS     r0,r0,#8
;;;50     
;;;51         in_sw[2] = ADD1_IN() == 0;
00004a  4a73              LDR      r2,|L1.536|
00004c  7048              STRB     r0,[r1,#1]            ;49
00004e  6a50              LDR      r0,[r2,#0x24]
;;;52         in_sw[2] <<= 1;
;;;53         in_sw[2] += KH1_IN();
000050  6a52              LDR      r2,[r2,#0x24]
000052  06c0              LSLS     r0,r0,#27             ;51
000054  17c0              ASRS     r0,r0,#31             ;51
000056  1c40              ADDS     r0,r0,#1              ;51
000058  0040              LSLS     r0,r0,#1              ;52
00005a  0712              LSLS     r2,r2,#28
00005c  0fd2              LSRS     r2,r2,#31
00005e  1880              ADDS     r0,r0,r2
000060  7088              STRB     r0,[r1,#2]
;;;54     }
000062  bdf8              POP      {r3-r7,pc}
;;;55     
                          ENDP

                  protothread_add_smooth PROC
;;;80     
;;;81     int protothread_add_smooth (struct pt *pt)
000064  b5f0              PUSH     {r4-r7,lr}
;;;82     {
000066  4605              MOV      r5,r0
;;;83         PT_BEGIN (pt);
000068  6800              LDR      r0,[r0,#0]
;;;84     
;;;85         static uint32_t time;
;;;86     
;;;87         /* We loop forever here. */
;;;88         while (1)
;;;89         {
;;;90     
;;;91             PT_DELAY_MS (pt, 1);
00006a  4f6c              LDR      r7,|L1.540|
00006c  b0c1              SUB      sp,sp,#0x104          ;82
00006e  2800              CMP      r0,#0                 ;83
000070  d000              BEQ      |L1.116|
000072  4700              BX       r0                    ;83
                  |L1.116|
000074  486a              LDR      r0,|L1.544|
000076  6800              LDR      r0,[r0,#0]  ; systick_ms
000078  1c40              ADDS     r0,r0,#1
00007a  60f8              STR      r0,[r7,#0xc]  ; time
                  LC_LABEL91
00007c  4869              LDR      r0,|L1.548|
00007e  6028              STR      r0,[r5,#0]
000080  4867              LDR      r0,|L1.544|
000082  6800              LDR      r0,[r0,#0]  ; systick_ms
000084  68f9              LDR      r1,[r7,#0xc]  ; time
000086  1a40              SUBS     r0,r0,r1
000088  d502              BPL      |L1.144|
00008a  2000              MOVS     r0,#0
;;;92     
;;;93             {
;;;94                 static uint16_t add = 0xFF; //low
;;;95                 static uint16_t kh1 = 0;  //high
;;;96                 add <<= 1;
;;;97                 add |= ADD1_IN();
;;;98     
;;;99                 kh1 <<= 1;
;;;100                kh1 |= KH1_IN();
;;;101    
;;;102                in_sw[2] = get_bit_count (kh1) >= 8;
;;;103                in_sw[2] += (get_bit_count (add) <= 8) << 1;
;;;104    
;;;105            }
;;;106            /* And we loop. */
;;;107        }
;;;108        PT_INFINITE_LOOP_END (pt);
;;;109    }
00008c  b041              ADD      sp,sp,#0x104
00008e  bdf0              POP      {r4-r7,pc}
                  |L1.144|
000090  8878              LDRH     r0,[r7,#2]            ;96  ; add
000092  4961              LDR      r1,|L1.536|
000094  0440              LSLS     r0,r0,#17             ;96
000096  6a4a              LDR      r2,[r1,#0x24]         ;97
000098  0c00              LSRS     r0,r0,#16             ;96
00009a  06d2              LSLS     r2,r2,#27             ;97
00009c  0fd6              LSRS     r6,r2,#31             ;97
00009e  4306              ORRS     r6,r6,r0              ;97
0000a0  807e              STRH     r6,[r7,#2]            ;97
0000a2  88b8              LDRH     r0,[r7,#4]            ;99  ; kh1
0000a4  6a49              LDR      r1,[r1,#0x24]         ;100
0000a6  0440              LSLS     r0,r0,#17             ;99
0000a8  0c00              LSRS     r0,r0,#16             ;99
0000aa  0709              LSLS     r1,r1,#28             ;100
0000ac  0fcc              LSRS     r4,r1,#31             ;100
0000ae  4304              ORRS     r4,r4,r0              ;100
0000b0  22ff              MOVS     r2,#0xff              ;100
0000b2  80bc              STRH     r4,[r7,#4]            ;100
0000b4  3201              ADDS     r2,#1                 ;100
0000b6  495c              LDR      r1,|L1.552|
0000b8  4668              MOV      r0,sp                 ;100
0000ba  f7fffffe          BL       __aeabi_memcpy4
0000be  b2e1              UXTB     r1,r4                 ;100
0000c0  4668              MOV      r0,sp                 ;100
0000c2  5c41              LDRB     r1,[r0,r1]            ;100
0000c4  0a22              LSRS     r2,r4,#8              ;100
0000c6  5c80              LDRB     r0,[r0,r2]            ;100
0000c8  1808              ADDS     r0,r1,r0              ;100
0000ca  b2c0              UXTB     r0,r0                 ;100
0000cc  2808              CMP      r0,#8                 ;102
0000ce  d301              BCC      |L1.212|
0000d0  2401              MOVS     r4,#1                 ;102
0000d2  e000              B        |L1.214|
                  |L1.212|
0000d4  2400              MOVS     r4,#0                 ;102
                  |L1.214|
0000d6  484f              LDR      r0,|L1.532|
0000d8  22ff              MOVS     r2,#0xff              ;102
0000da  7084              STRB     r4,[r0,#2]            ;102
0000dc  3201              ADDS     r2,#1                 ;102
0000de  4952              LDR      r1,|L1.552|
0000e0  4668              MOV      r0,sp                 ;102
0000e2  f7fffffe          BL       __aeabi_memcpy4
0000e6  b2f1              UXTB     r1,r6                 ;102
0000e8  4668              MOV      r0,sp                 ;102
0000ea  5c41              LDRB     r1,[r0,r1]            ;102
0000ec  0a32              LSRS     r2,r6,#8              ;102
0000ee  5c80              LDRB     r0,[r0,r2]            ;102
0000f0  1808              ADDS     r0,r1,r0              ;102
0000f2  b2c0              UXTB     r0,r0                 ;102
0000f4  2808              CMP      r0,#8                 ;103
0000f6  d801              BHI      |L1.252|
0000f8  2001              MOVS     r0,#1                 ;103
0000fa  e000              B        |L1.254|
                  |L1.252|
0000fc  2000              MOVS     r0,#0                 ;103
                  |L1.254|
0000fe  0041              LSLS     r1,r0,#1              ;103
000100  4844              LDR      r0,|L1.532|
000102  1909              ADDS     r1,r1,r4              ;103
000104  7081              STRB     r1,[r0,#2]            ;103
000106  e7b5              B        |L1.116|
;;;110    
                          ENDP

                  protothread_in PROC
;;;111    int protothread_in (struct pt *pt)
000108  b570              PUSH     {r4-r6,lr}
;;;112    {
;;;113        PT_BEGIN (pt);
00010a  6801              LDR      r1,[r0,#0]
;;;114    
;;;115        static uint32_t time;
;;;116    
;;;117        /* We loop forever here. */
;;;118        while (1)
;;;119        {
;;;120            PT_DELAY_MS (pt, 20);
00010c  4d44              LDR      r5,|L1.544|
00010e  4e43              LDR      r6,|L1.540|
000110  4604              MOV      r4,r0                 ;112
000112  2900              CMP      r1,#0                 ;113
000114  d000              BEQ      |L1.280|
000116  4708              BX       r1                    ;113
                  |L1.280|
000118  6828              LDR      r0,[r5,#0]  ; systick_ms
00011a  3014              ADDS     r0,r0,#0x14
00011c  6130              STR      r0,[r6,#0x10]  ; time
                  LC_LABEL120
00011e  4843              LDR      r0,|L1.556|
000120  6020              STR      r0,[r4,#0]
000122  6828              LDR      r0,[r5,#0]  ; systick_ms
000124  6931              LDR      r1,[r6,#0x10]  ; time
000126  1a40              SUBS     r0,r0,r1
000128  d501              BPL      |L1.302|
00012a  2000              MOVS     r0,#0
;;;121    
;;;122            GetKeyIn();
;;;123    
;;;124            /* And we loop. */
;;;125        }
;;;126        PT_INFINITE_LOOP_END (pt);
;;;127    }
00012c  bd70              POP      {r4-r6,pc}
                  |L1.302|
00012e  f7fffffe          BL       GetKeyIn
000132  e7f1              B        |L1.280|
;;;128    
                          ENDP

                  protothread_mod_addr_init PROC
;;;129    
;;;130    int protothread_mod_addr_init (struct pt *pt)
000134  b5f8              PUSH     {r3-r7,lr}
;;;131    {
000136  4604              MOV      r4,r0
;;;132        PT_BEGIN (pt);
;;;133    
;;;134        static uint32_t time;
;;;135    
;;;136    		PT_DELAY_MS (pt, 333);
000138  4d38              LDR      r5,|L1.540|
00013a  6800              LDR      r0,[r0,#0]            ;132
00013c  4e38              LDR      r6,|L1.544|
;;;137    		wdt_clear();						//看门狗0.5s溢出，所以此处需要喂狗，否则软件在执行下面一个PT_DELAY_MS()时会复位
;;;138    		PT_DELAY_MS (pt, 333);
;;;139    		wdt_clear();
;;;140    		PT_DELAY_MS (pt, 333);
;;;141    		wdt_clear();
;;;142    
;;;143        /* We loop forever here. */
;;;144        while (1)
;;;145        {
;;;146            PT_DELAY_MS (pt, 10);
;;;147    
;;;148            GetKeyIn();
;;;149            mod_addr_s0 = GET_MOD_ADDR();
00013e  1daf              ADDS     r7,r5,#6
000140  2800              CMP      r0,#0                 ;132
000142  d000              BEQ      |L1.326|
000144  4700              BX       r0                    ;132
                  |L1.326|
000146  6830              LDR      r0,[r6,#0]            ;136  ; systick_ms
000148  30ff              ADDS     r0,r0,#0xff           ;136
00014a  304e              ADDS     r0,r0,#0x4e           ;136
00014c  6168              STR      r0,[r5,#0x14]         ;136  ; time
                  LC_LABEL136
00014e  4838              LDR      r0,|L1.560|
000150  6020              STR      r0,[r4,#0]            ;136
000152  6830              LDR      r0,[r6,#0]            ;136  ; systick_ms
000154  6969              LDR      r1,[r5,#0x14]         ;136  ; time
000156  1a40              SUBS     r0,r0,r1              ;136
000158  d42d              BMI      |L1.438|
00015a  f7fffffe          BL       wdt_clear
00015e  6830              LDR      r0,[r6,#0]            ;138  ; systick_ms
000160  30ff              ADDS     r0,r0,#0xff           ;138
000162  304e              ADDS     r0,r0,#0x4e           ;138
000164  6168              STR      r0,[r5,#0x14]         ;138  ; time
                  LC_LABEL138
000166  4833              LDR      r0,|L1.564|
000168  6020              STR      r0,[r4,#0]            ;138
00016a  6830              LDR      r0,[r6,#0]            ;138  ; systick_ms
00016c  6969              LDR      r1,[r5,#0x14]         ;138  ; time
00016e  1a40              SUBS     r0,r0,r1              ;138
000170  d421              BMI      |L1.438|
000172  f7fffffe          BL       wdt_clear
000176  6830              LDR      r0,[r6,#0]            ;140  ; systick_ms
000178  30ff              ADDS     r0,r0,#0xff           ;140
00017a  304e              ADDS     r0,r0,#0x4e           ;140
00017c  6168              STR      r0,[r5,#0x14]         ;140  ; time
                  LC_LABEL140
00017e  482e              LDR      r0,|L1.568|
000180  6020              STR      r0,[r4,#0]            ;140
000182  6830              LDR      r0,[r6,#0]            ;140  ; systick_ms
000184  6969              LDR      r1,[r5,#0x14]         ;140  ; time
000186  1a40              SUBS     r0,r0,r1              ;140
000188  d415              BMI      |L1.438|
00018a  e01e              B        |L1.458|
                  |L1.396|
                  LC_LABEL146
00018c  482b              LDR      r0,|L1.572|
00018e  6020              STR      r0,[r4,#0]            ;146
000190  6830              LDR      r0,[r6,#0]            ;146  ; systick_ms
000192  6969              LDR      r1,[r5,#0x14]         ;146  ; time
000194  1a40              SUBS     r0,r0,r1              ;146
000196  d40e              BMI      |L1.438|
000198  f7fffffe          BL       GetKeyIn
00019c  7878              LDRB     r0,[r7,#1]  ; in_sw
00019e  0680              LSLS     r0,r0,#26
0001a0  0f80              LSRS     r0,r0,#30
0001a2  7068              STRB     r0,[r5,#1]
;;;150    
;;;151            PT_DELAY_MS (pt, 10);
0001a4  6830              LDR      r0,[r6,#0]  ; systick_ms
0001a6  300a              ADDS     r0,r0,#0xa
0001a8  6168              STR      r0,[r5,#0x14]  ; time
                  LC_LABEL151
0001aa  4825              LDR      r0,|L1.576|
0001ac  6020              STR      r0,[r4,#0]
0001ae  6830              LDR      r0,[r6,#0]  ; systick_ms
0001b0  6969              LDR      r1,[r5,#0x14]  ; time
0001b2  1a40              SUBS     r0,r0,r1
0001b4  d501              BPL      |L1.442|
                  |L1.438|
0001b6  2000              MOVS     r0,#0
;;;152    
;;;153            GetKeyIn();
;;;154            if (mod_addr_s0 == GET_MOD_ADDR())
;;;155            {
;;;156                break;
;;;157            }
;;;158            /* And we loop. */
;;;159    				wdt_clear();
;;;160        }
;;;161    
;;;162    		#ifdef DEBUG
;;;163    		mod_addr = 3;
;;;164    		#else
;;;165        mod_addr = mod_addr_s0 + 1;
;;;166    		#endif
;;;167    
;;;168        PT_END (pt);
;;;169    }
0001b8  bdf8              POP      {r3-r7,pc}
                  |L1.442|
0001ba  f7fffffe          BL       GetKeyIn
0001be  7878              LDRB     r0,[r7,#1]            ;154  ; in_sw
0001c0  0680              LSLS     r0,r0,#26             ;154
0001c2  0f81              LSRS     r1,r0,#30             ;154
0001c4  7868              LDRB     r0,[r5,#1]            ;154  ; mod_addr_s0
0001c6  4281              CMP      r1,r0                 ;154
0001c8  d005              BEQ      |L1.470|
                  |L1.458|
0001ca  f7fffffe          BL       wdt_clear
0001ce  6830              LDR      r0,[r6,#0]            ;146  ; systick_ms
0001d0  300a              ADDS     r0,r0,#0xa            ;146
0001d2  6168              STR      r0,[r5,#0x14]         ;146  ; time
0001d4  e7da              B        |L1.396|
                  |L1.470|
0001d6  1c40              ADDS     r0,r0,#1              ;146
0001d8  7028              STRB     r0,[r5,#0]            ;165
0001da  2000              MOVS     r0,#0                 ;168
0001dc  6020              STR      r0,[r4,#0]            ;168
0001de  2003              MOVS     r0,#3                 ;168
0001e0  bdf8              POP      {r3-r7,pc}
;;;170    
                          ENDP

                  din_init PROC
;;;173    //protothread_add_smooth(pts +POUT_COUNT + 6);
;;;174    static void din_init()
0001e2  b510              PUSH     {r4,lr}
;;;175    {
;;;176        PT_INIT (&pt1);
0001e4  4917              LDR      r1,|L1.580|
0001e6  2000              MOVS     r0,#0
;;;177    	
;;;178    		#ifdef B40V60
;;;179    		//PTF4 控低开关 上拉电控制，高有效
;;;180    		#define INPUT_PUPWR_ON()  gpio_bit_set(GPIOF, GPIO_PIN_4)
;;;181    		INPUT_PUPWR_ON();
0001e8  6008              STR      r0,[r1,#0]  ; pt1
0001ea  2110              MOVS     r1,#0x10
0001ec  4808              LDR      r0,|L1.528|
0001ee  f7fffffe          BL       gpio_bit_set
;;;182    		#endif
;;;183    }
0001f2  bd10              POP      {r4,pc}
;;;184    INIT_COMPONENT_EXPORT(din_init);
                          ENDP

                  din_app PROC
;;;185    
;;;186    void din_app()
0001f4  4813              LDR      r0,|L1.580|
;;;187    {
;;;188        protothread_in (&pt1);
0001f6  e7fe              B        protothread_in
;;;189    }
;;;190    //INIT_APP_LOOP_EXPORT(din_app);
                          ENDP

                  mod_addr_init PROC
;;;191    
;;;192    static void mod_addr_init()
0001f8  b510              PUSH     {r4,lr}
                  |L1.506|
;;;193    {
;;;194        while (protothread_mod_addr_init (&pt1) != PT_ENDED);
0001fa  4812              LDR      r0,|L1.580|
0001fc  f7fffffe          BL       protothread_mod_addr_init
000200  2803              CMP      r0,#3
000202  d1fa              BNE      |L1.506|
;;;195        PT_INIT (&pt1);
000204  490f              LDR      r1,|L1.580|
000206  2000              MOVS     r0,#0
000208  6008              STR      r0,[r1,#0]  ; pt1
;;;196    }
00020a  bd10              POP      {r4,pc}
;;;197    INIT_ENV_EXPORT(mod_addr_init);
                          ENDP

                  |L1.524|
                          DCD      0x500a0064
                  |L1.528|
                          DCD      0x500a0074
                  |L1.532|
                          DCD      ||.data||+0x6
                  |L1.536|
                          DCD      0x500a0040
                  |L1.540|
                          DCD      ||.data||
                  |L1.544|
                          DCD      systick_ms
                  |L1.548|
                          DCD      LC_LABEL91
                  |L1.552|
                          DCD      ||.constdata||
                  |L1.556|
                          DCD      LC_LABEL120
                  |L1.560|
                          DCD      LC_LABEL136
                  |L1.564|
                          DCD      LC_LABEL138
                  |L1.568|
                          DCD      LC_LABEL140
                  |L1.572|
                          DCD      LC_LABEL146
                  |L1.576|
                          DCD      LC_LABEL151
                  |L1.580|
                          DCD      ||.data||+0x18

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

000000  00010102          DCB      0x00,0x01,0x01,0x02
000004  01020203          DCB      0x01,0x02,0x02,0x03
000008  01020203          DCB      0x01,0x02,0x02,0x03
00000c  02030304          DCB      0x02,0x03,0x03,0x04
000010  01020203          DCB      0x01,0x02,0x02,0x03
000014  02030304          DCB      0x02,0x03,0x03,0x04
000018  02030304          DCB      0x02,0x03,0x03,0x04
00001c  03040405          DCB      0x03,0x04,0x04,0x05
000020  01020203          DCB      0x01,0x02,0x02,0x03
000024  02030304          DCB      0x02,0x03,0x03,0x04
000028  02030304          DCB      0x02,0x03,0x03,0x04
00002c  03040405          DCB      0x03,0x04,0x04,0x05
000030  02030304          DCB      0x02,0x03,0x03,0x04
000034  03040405          DCB      0x03,0x04,0x04,0x05
000038  03040405          DCB      0x03,0x04,0x04,0x05
00003c  04050506          DCB      0x04,0x05,0x05,0x06
000040  01020203          DCB      0x01,0x02,0x02,0x03
000044  02030304          DCB      0x02,0x03,0x03,0x04
000048  02030304          DCB      0x02,0x03,0x03,0x04
00004c  03040405          DCB      0x03,0x04,0x04,0x05
000050  02030304          DCB      0x02,0x03,0x03,0x04
000054  03040405          DCB      0x03,0x04,0x04,0x05
000058  03040405          DCB      0x03,0x04,0x04,0x05
00005c  04050506          DCB      0x04,0x05,0x05,0x06
000060  02030304          DCB      0x02,0x03,0x03,0x04
000064  03040405          DCB      0x03,0x04,0x04,0x05
000068  03040405          DCB      0x03,0x04,0x04,0x05
00006c  04050506          DCB      0x04,0x05,0x05,0x06
000070  03040405          DCB      0x03,0x04,0x04,0x05
000074  04050506          DCB      0x04,0x05,0x05,0x06
000078  04050506          DCB      0x04,0x05,0x05,0x06
00007c  05060607          DCB      0x05,0x06,0x06,0x07
000080  01020203          DCB      0x01,0x02,0x02,0x03
000084  02030304          DCB      0x02,0x03,0x03,0x04
000088  02030304          DCB      0x02,0x03,0x03,0x04
00008c  03040405          DCB      0x03,0x04,0x04,0x05
000090  02030304          DCB      0x02,0x03,0x03,0x04
000094  03040405          DCB      0x03,0x04,0x04,0x05
000098  03040405          DCB      0x03,0x04,0x04,0x05
00009c  04050506          DCB      0x04,0x05,0x05,0x06
0000a0  02030304          DCB      0x02,0x03,0x03,0x04
0000a4  03040405          DCB      0x03,0x04,0x04,0x05
0000a8  03040405          DCB      0x03,0x04,0x04,0x05
0000ac  04050506          DCB      0x04,0x05,0x05,0x06
0000b0  03040405          DCB      0x03,0x04,0x04,0x05
0000b4  04050506          DCB      0x04,0x05,0x05,0x06
0000b8  04050506          DCB      0x04,0x05,0x05,0x06
0000bc  05060607          DCB      0x05,0x06,0x06,0x07
0000c0  02030304          DCB      0x02,0x03,0x03,0x04
0000c4  03040405          DCB      0x03,0x04,0x04,0x05
0000c8  03040405          DCB      0x03,0x04,0x04,0x05
0000cc  04050506          DCB      0x04,0x05,0x05,0x06
0000d0  03040405          DCB      0x03,0x04,0x04,0x05
0000d4  04050506          DCB      0x04,0x05,0x05,0x06
0000d8  04050506          DCB      0x04,0x05,0x05,0x06
0000dc  05060607          DCB      0x05,0x06,0x06,0x07
0000e0  03040405          DCB      0x03,0x04,0x04,0x05
0000e4  04050506          DCB      0x04,0x05,0x05,0x06
0000e8  04050506          DCB      0x04,0x05,0x05,0x06
0000ec  05060607          DCB      0x05,0x06,0x06,0x07
0000f0  04050506          DCB      0x04,0x05,0x05,0x06
0000f4  05060607          DCB      0x05,0x06,0x06,0x07
0000f8  05060607          DCB      0x05,0x06,0x06,0x07
0000fc  06070708          DCB      0x06,0x07,0x07,0x08

                          AREA ||.data||, DATA, ALIGN=2

                  mod_addr
000000  00                DCB      0x00
                  mod_addr_s0
000001  00                DCB      0x00
                  add
000002  00ff              DCW      0x00ff
                  kh1
000004  0000              DCW      0x0000
                  in_sw
000006  0000              DCB      0x00,0x00
000008  00000000          DCB      0x00,0x00,0x00,0x00
                  time
                          DCD      0x00000000
                  |symbol_number.13|
                          DCD      0x00000000
                  |symbol_number.14|
                          DCD      0x00000000
                  pt1
                          DCD      0x00000000

                          AREA ||.init_fn.4||, DATA, READONLY, ALIGN=2

                  __stan_init_din_init
                  ||__tagsym$$used||
                          DCD      din_init

                          AREA ||.init_fn.5||, DATA, READONLY, ALIGN=2

                  __stan_init_mod_addr_init
                  |symbol_number.27|
                          DCD      mod_addr_init

;*** Start embedded assembler ***

#line 1 "src\\switch.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___8_switch_c_cec40734____REV16|
#line 447 ".\\RTE\\CMSIS\\BF7006AM64\\cmsis_armcc.h"
|__asm___8_switch_c_cec40734____REV16| PROC
#line 448

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___8_switch_c_cec40734____REVSH|
#line 462
|__asm___8_switch_c_cec40734____REVSH| PROC
#line 463

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

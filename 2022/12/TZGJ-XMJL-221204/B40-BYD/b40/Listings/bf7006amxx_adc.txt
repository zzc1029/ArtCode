; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--list --debug -c --asm --interleave --gnu -o.\obj\bf7006amxx_adc.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\obj\bf7006amxx_adc.d --cpu=Cortex-M0 --apcs=interwork -Otime --diag_suppress=9931 -I.\src\pt -I.\src -I.\config -I.\RTE\CMSIS\BF7006AM64 -I.\RTE\Device\BF7006AM64 -I.\RTE\SEGGER -I.\RTE\Startup\BF7006AM64 -I.\RTE\_b40 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.8.0\CMSIS\Core\Include -IC:\Keil_v5\ARM\PACK\BYD\BYDMicro_DFP\1.1.0\Device\Include\BF7006AMxx -D__UVISION_VERSION=536 -D_RTE_ -D_RTE_ --omf_browse=.\obj\bf7006amxx_adc.crf RTE\Device\BF7006AM64\BF7006AMxx_adc.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  adc_interrupt_set PROC
;;;99     */
;;;100    void adc_interrupt_set(FunctionalState en)
000000  2240              MOVS     r2,#0x40
;;;101    {
;;;102        if(en == ENABLE){
;;;103            ADC_SC1 |= ADC_SC1_AIEN;
000002  49b8              LDR      r1,|L1.740|
000004  0453              LSLS     r3,r2,#17
000006  2801              CMP      r0,#1                 ;102
;;;104            NVIC_EnableIRQ(ADC_IRQn);
;;;105        }else{
;;;106            ADC_SC1 &= ~ADC_SC1_AIEN;
000008  6808              LDR      r0,[r1,#0]
00000a  d008              BEQ      |L1.30|
00000c  4390              BICS     r0,r0,r2
00000e  6008              STR      r0,[r1,#0]
000010  48b5              LDR      r0,|L1.744|
000012  6003              STR      r3,[r0,#0]
000014  f3bf8f4f          DSB      
000018  f3bf8f6f          ISB      
;;;107            NVIC_DisableIRQ(ADC_IRQn);
;;;108        }
;;;109    }
00001c  4770              BX       lr
                  |L1.30|
00001e  4310              ORRS     r0,r0,r2              ;103
000020  6008              STR      r0,[r1,#0]            ;103
000022  48b2              LDR      r0,|L1.748|
000024  6003              STR      r3,[r0,#0]            ;103
000026  4770              BX       lr
;;;110    
                          ENDP

                  adc_powerdown PROC
;;;285    */
;;;286    void adc_powerdown(FunctionalState en)
000028  49b1              LDR      r1,|L1.752|
;;;287    {
;;;288        if(en == ENABLE){
00002a  2801              CMP      r0,#1
00002c  d000              BEQ      |L1.48|
;;;289            ADC_PD = 0x01U;
;;;290        }else{
;;;291            ADC_PD = 0x00U;
00002e  2000              MOVS     r0,#0
                  |L1.48|
000030  6008              STR      r0,[r1,#0]            ;289
;;;292        }
;;;293    }
000032  4770              BX       lr
;;;294    
                          ENDP

                  adc_channel_enable PROC
;;;300    */
;;;301    void adc_channel_enable(uint32_t ch)
000034  49ab              LDR      r1,|L1.740|
;;;302    {
;;;303        ADC_APCTL = 0x00U;
000036  2200              MOVS     r2,#0
000038  618a              STR      r2,[r1,#0x18]
;;;304        ADC_APCTL |= ch;
00003a  698a              LDR      r2,[r1,#0x18]
00003c  4302              ORRS     r2,r2,r0
00003e  618a              STR      r2,[r1,#0x18]
;;;305    }
000040  4770              BX       lr
;;;306    
                          ENDP

                  adc_compare_config PROC
;;;328    */
;;;329    void adc_compare_config(adc_compare_struct adc_compare)
000042  b2c2              UXTB     r2,r0
;;;330    {
;;;331        if(adc_compare.compare_en == ENABLE){
000044  2a01              CMP      r2,#1
000046  d13f              BNE      |L1.200|
000048  b470              PUSH     {r4-r6}               ;330
00004a  0402              LSLS     r2,r0,#16             ;330
00004c  0e13              LSRS     r3,r2,#24             ;330
;;;332            if(adc_compare.compare_condition == ADC_COMP_LESS){
;;;333                ADC_SC2 |= ADC_SC2_ACFE0;
00004e  4aa5              LDR      r2,|L1.740|
000050  2420              MOVS     r4,#0x20
;;;334                ADC_SC2 &= ~ADC_SC2_ACFE1;
000052  2508              MOVS     r5,#8
;;;335                ADC_SC2 &= ~ADC_SC2_ACFGT0;
000054  2610              MOVS     r6,#0x10
000056  b289              UXTH     r1,r1
000058  2b00              CMP      r3,#0                 ;332
00005a  d00c              BEQ      |L1.118|
00005c  0c00              LSRS     r0,r0,#16             ;331
;;;336                ADC_CV0 = adc_compare.higher_limit_val;
;;;337            }else if(adc_compare.compare_condition == ADC_COMP_LARGER){
00005e  2b01              CMP      r3,#1
000060  d015              BEQ      |L1.142|
;;;338                ADC_SC2 |= ADC_SC2_ACFE0;
;;;339                ADC_SC2 &= ~ADC_SC2_ACFE1;
;;;340                ADC_SC2 |= ADC_SC2_ACFGT0;
;;;341                ADC_CV0 = adc_compare.lower_limit_val;
;;;342            }else if(adc_compare.compare_condition == ADC_COMP_BETWEEN){
000062  2b02              CMP      r3,#2
000064  d01f              BEQ      |L1.166|
;;;343                ADC_SC2 |= ADC_SC2_ACFE0;
;;;344                ADC_SC2 |= ADC_SC2_ACFE1;
;;;345                ADC_SC2 |= ADC_SC2_ACFGT0;
;;;346                ADC_SC2 &= ~ADC_SC2_ACFGT1;
;;;347                ADC_CV0 = adc_compare.lower_limit_val;
;;;348                ADC_CV1 = adc_compare.higher_limit_val;
;;;349            }else{
;;;350                ADC_SC2 &= ~ADC_SC2_ACFE0;
000066  6850              LDR      r0,[r2,#4]
000068  43a0              BICS     r0,r0,r4
00006a  6050              STR      r0,[r2,#4]
;;;351                ADC_SC2 &= ~ADC_SC2_ACFE1;
00006c  6850              LDR      r0,[r2,#4]
00006e  43a8              BICS     r0,r0,r5
000070  6050              STR      r0,[r2,#4]
;;;352            }
;;;353        }
;;;354    }
000072  bc70              POP      {r4-r6}
000074  4770              BX       lr
                  |L1.118|
000076  6850              LDR      r0,[r2,#4]            ;333
000078  4320              ORRS     r0,r0,r4              ;333
00007a  6050              STR      r0,[r2,#4]            ;333
00007c  6850              LDR      r0,[r2,#4]            ;334
00007e  43a8              BICS     r0,r0,r5              ;334
000080  6050              STR      r0,[r2,#4]            ;334
000082  6850              LDR      r0,[r2,#4]            ;335
000084  43b0              BICS     r0,r0,r6              ;335
000086  6050              STR      r0,[r2,#4]            ;335
000088  60d1              STR      r1,[r2,#0xc]          ;336
00008a  bc70              POP      {r4-r6}
00008c  4770              BX       lr
                  |L1.142|
00008e  6851              LDR      r1,[r2,#4]            ;338
000090  4321              ORRS     r1,r1,r4              ;338
000092  6051              STR      r1,[r2,#4]            ;338
000094  6851              LDR      r1,[r2,#4]            ;339
000096  43a9              BICS     r1,r1,r5              ;339
000098  6051              STR      r1,[r2,#4]            ;339
00009a  6851              LDR      r1,[r2,#4]            ;340
00009c  4331              ORRS     r1,r1,r6              ;340
00009e  6051              STR      r1,[r2,#4]            ;340
0000a0  60d0              STR      r0,[r2,#0xc]          ;341
0000a2  bc70              POP      {r4-r6}
0000a4  4770              BX       lr
                  |L1.166|
0000a6  6853              LDR      r3,[r2,#4]            ;343
0000a8  4323              ORRS     r3,r3,r4              ;343
0000aa  6053              STR      r3,[r2,#4]            ;343
0000ac  6853              LDR      r3,[r2,#4]            ;344
0000ae  432b              ORRS     r3,r3,r5              ;344
0000b0  6053              STR      r3,[r2,#4]            ;344
0000b2  6853              LDR      r3,[r2,#4]            ;345
0000b4  4333              ORRS     r3,r3,r6              ;345
0000b6  6053              STR      r3,[r2,#4]            ;345
0000b8  6853              LDR      r3,[r2,#4]            ;346
0000ba  2404              MOVS     r4,#4                 ;346
0000bc  43a3              BICS     r3,r3,r4              ;346
0000be  6053              STR      r3,[r2,#4]            ;346
0000c0  60d0              STR      r0,[r2,#0xc]          ;347
0000c2  6111              STR      r1,[r2,#0x10]         ;348
0000c4  bc70              POP      {r4-r6}
0000c6  4770              BX       lr
                  |L1.200|
0000c8  4770              BX       lr
;;;355    
                          ENDP

                  adc_trigger_config PROC
;;;363    */
;;;364    void adc_trigger_config(adc_trigger_struct adc_trigger)
0000ca  b470              PUSH     {r4-r6}
;;;365    {
0000cc  b2c2              UXTB     r2,r0
;;;366        /* trigger mode select */
;;;367        if(adc_trigger.trigger_mode == ADC_TRIGG_SOFT){             //select software trigger adc scan
;;;368            ADC_SC2 &= ~ADC_SC2_ADTRG;
0000ce  4985              LDR      r1,|L1.740|
0000d0  2340              MOVS     r3,#0x40
0000d2  2a00              CMP      r2,#0                 ;367
0000d4  d014              BEQ      |L1.256|
;;;369        }else if(adc_trigger.trigger_mode == ADC_TRIGG_HARD){       //select hardware trigger adc scan
0000d6  2a01              CMP      r2,#1
;;;370            ADC_SC2 |= ADC_SC2_ADTRG;
;;;371        }else{
;;;372            ADC_SC2 &= ~ADC_SC2_ADTRG;
0000d8  684a              LDR      r2,[r1,#4]
0000da  d015              BEQ      |L1.264|
0000dc  439a              BICS     r2,r2,r3
                  |L1.222|
0000de  604a              STR      r2,[r1,#4]
                  |L1.224|
0000e0  0402              LSLS     r2,r0,#16
0000e2  0e12              LSRS     r2,r2,#24
0000e4  2600              MOVS     r6,#0
;;;373        }
;;;374        
;;;375        /* hardware trigger source select */
;;;376        if(adc_trigger.trigger_source == ADC_TRIGG_HARD_NMI){       //hardware source select NMI
;;;377            ADC_SC2 |= ADC_SC2_ADHTS;
0000e6  2402              MOVS     r4,#2
;;;378            ADC_IKW = 0x00U;
0000e8  4d81              LDR      r5,|L1.752|
0000ea  2a01              CMP      r2,#1                 ;376
0000ec  d00e              BEQ      |L1.268|
;;;379        }else if(adc_trigger.trigger_source == ADC_TRIGG_HARD_PWM){ //hardware source select PWM
0000ee  2a02              CMP      r2,#2
0000f0  d012              BEQ      |L1.280|
;;;380            ADC_SC2 &= ~ADC_SC2_ADHTS;
;;;381            ADC_IKW = 0x01U;
;;;382            PWM_ADC_CV = adc_trigger.pwm_trigger_delay;
;;;383        }else if(adc_trigger.trigger_source == ADC_TRIGG_HARD_RTC){ //hardware source select RTC
;;;384            ADC_SC2 &= ~ADC_SC2_ADHTS;
;;;385            ADC_IKW = 0x00U;
;;;386        }else{
;;;387            ADC_SC2 &= ~ADC_SC2_ADTRG;
0000f2  6848              LDR      r0,[r1,#4]
0000f4  2a03              CMP      r2,#3                 ;383
0000f6  d019              BEQ      |L1.300|
0000f8  4398              BICS     r0,r0,r3
0000fa  6048              STR      r0,[r1,#4]
;;;388        }
;;;389    }
0000fc  bc70              POP      {r4-r6}
0000fe  4770              BX       lr
                  |L1.256|
000100  684a              LDR      r2,[r1,#4]            ;368
000102  439a              BICS     r2,r2,r3              ;368
000104  604a              STR      r2,[r1,#4]            ;368
000106  e7eb              B        |L1.224|
                  |L1.264|
000108  431a              ORRS     r2,r2,r3              ;370
00010a  e7e8              B        |L1.222|
                  |L1.268|
00010c  6848              LDR      r0,[r1,#4]            ;377
00010e  4320              ORRS     r0,r0,r4              ;377
000110  6048              STR      r0,[r1,#4]            ;377
000112  60ee              STR      r6,[r5,#0xc]          ;378
000114  bc70              POP      {r4-r6}
000116  4770              BX       lr
                  |L1.280|
000118  684a              LDR      r2,[r1,#4]            ;380
00011a  43a2              BICS     r2,r2,r4              ;380
00011c  604a              STR      r2,[r1,#4]            ;380
00011e  2101              MOVS     r1,#1                 ;381
000120  60e9              STR      r1,[r5,#0xc]          ;381
000122  4974              LDR      r1,|L1.756|
000124  0c00              LSRS     r0,r0,#16             ;381
000126  63c8              STR      r0,[r1,#0x3c]         ;382
000128  bc70              POP      {r4-r6}
00012a  4770              BX       lr
                  |L1.300|
00012c  43a0              BICS     r0,r0,r4              ;384
00012e  6048              STR      r0,[r1,#4]            ;384
000130  60ee              STR      r6,[r5,#0xc]          ;385
000132  bc70              POP      {r4-r6}
000134  4770              BX       lr
                          ENDP

                  adc_init PROC
;;;45     */
;;;46     void adc_init(adc_parameter_struct adc_init_para)
000136  b40f              PUSH     {r0-r3}
;;;47     {
000138  b5f0              PUSH     {r4-r7,lr}
00013a  4684              MOV      r12,r0
;;;48         /* adc control register config */
;;;49         ADC_SC1 = 0x1fUL;
00013c  4c69              LDR      r4,|L1.740|
00013e  201f              MOVS     r0,#0x1f
000140  9d09              LDR      r5,[sp,#0x24]
000142  6020              STR      r0,[r4,#0]
000144  b2ca              UXTB     r2,r1
;;;50         if(adc_init_para.adco_en == ENABLE){    //adc continuous convert mode enable
;;;51             ADC_SC1 |= ADC_SC1_ADCO;
000146  2020              MOVS     r0,#0x20
000148  2a01              CMP      r2,#1                 ;50
;;;52         }else{                                  //adc continuous convert mode disable
;;;53             ADC_SC1 &= ~ADC_SC1_ADCO;
00014a  6822              LDR      r2,[r4,#0]
00014c  d01a              BEQ      |L1.388|
00014e  4382              BICS     r2,r2,r0
                  |L1.336|
000150  6022              STR      r2,[r4,#0]
;;;54         }
;;;55     
;;;56         ADC_SC2 = 0X00UL;
000152  2000              MOVS     r0,#0
000154  6060              STR      r0,[r4,#4]
;;;57     
;;;58         ADC_CFG = 0x00UL;
000156  6160              STR      r0,[r4,#0x14]
000158  0408              LSLS     r0,r1,#16
00015a  0e00              LSRS     r0,r0,#24
;;;59         if(adc_init_para.data_width == ADC_DATA_12BITS){        //adc data width 12bits
;;;60             ADC_CFG |= ADC_CFG_MODE;
00015c  2104              MOVS     r1,#4
00015e  2801              CMP      r0,#1                 ;59
000160  d012              BEQ      |L1.392|
;;;61         }else if(adc_init_para.data_width == ADC_DATA_8BITS){   //adc data width 8bits
000162  2800              CMP      r0,#0
;;;62             ADC_CFG &= ~ADC_CFG_MODE;
;;;63         }else{
;;;64             ADC_CFG |= ADC_CFG_MODE;
000164  6960              LDR      r0,[r4,#0x14]
000166  d013              BEQ      |L1.400|
000168  4308              ORRS     r0,r0,r1
                  |L1.362|
00016a  6160              STR      r0,[r4,#0x14]         ;62
                  |L1.364|
;;;65         }
;;;66     
;;;67         /* adc clock config,adc_clk must less than 16M */
;;;68         adc_clk_init(adc_init_para.adc_clk,SystemCoreClock);
00016c  4660              MOV      r0,r12
00016e  b2c6              UXTB     r6,r0
000170  4861              LDR      r0,|L1.760|
000172  2180              MOVS     r1,#0x80
000174  468e              MOV      lr,r1
000176  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
000178  4960              LDR      r1,|L1.764|
00017a  4288              CMP      r0,r1
00017c  d12b              BNE      |L1.470|
00017e  2e00              CMP      r6,#0
000180  d008              BEQ      |L1.404|
000182  e008              B        |L1.406|
                  |L1.388|
000184  4302              ORRS     r2,r2,r0              ;51
000186  e7e3              B        |L1.336|
                  |L1.392|
000188  6960              LDR      r0,[r4,#0x14]         ;60
00018a  4308              ORRS     r0,r0,r1              ;60
00018c  6160              STR      r0,[r4,#0x14]         ;60
00018e  e7ed              B        |L1.364|
                  |L1.400|
000190  4388              BICS     r0,r0,r1              ;62
000192  e7ea              B        |L1.362|
                  |L1.404|
000194  2610              MOVS     r6,#0x10              ;62
                  |L1.406|
000196  2e40              CMP      r6,#0x40              ;62
000198  d019              BEQ      |L1.462|
00019a  dc06              BGT      |L1.426|
00019c  2e10              CMP      r6,#0x10              ;62
00019e  d00b              BEQ      |L1.440|
0001a0  2e20              CMP      r6,#0x20              ;62
0001a2  d010              BEQ      |L1.454|
0001a4  2e30              CMP      r6,#0x30              ;62
0001a6  d137              BNE      |L1.536|
0001a8  e011              B        |L1.462|
                  |L1.426|
0001aa  2e50              CMP      r6,#0x50              ;62
0001ac  d00f              BEQ      |L1.462|
0001ae  2e60              CMP      r6,#0x60              ;62
0001b0  d00d              BEQ      |L1.462|
0001b2  2e70              CMP      r6,#0x70              ;62
0001b4  d130              BNE      |L1.536|
0001b6  e003              B        |L1.448|
                  |L1.440|
0001b8  2301              MOVS     r3,#1                 ;62
0001ba  220c              MOVS     r2,#0xc               ;62
0001bc  2130              MOVS     r1,#0x30              ;62
0001be  e034              B        |L1.554|
                  |L1.448|
0001c0  2301              MOVS     r3,#1                 ;62
0001c2  2204              MOVS     r2,#4                 ;62
0001c4  e01b              B        |L1.510|
                  |L1.454|
0001c6  2302              MOVS     r3,#2                 ;62
0001c8  220c              MOVS     r2,#0xc               ;62
0001ca  2120              MOVS     r1,#0x20              ;62
0001cc  e02d              B        |L1.554|
                  |L1.462|
0001ce  2302              MOVS     r3,#2                 ;62
0001d0  2200              MOVS     r2,#0                 ;62
0001d2  2110              MOVS     r1,#0x10              ;62
0001d4  e029              B        |L1.554|
                  |L1.470|
0001d6  494a              LDR      r1,|L1.768|
0001d8  4288              CMP      r0,r1                 ;62
0001da  d121              BNE      |L1.544|
0001dc  0730              LSLS     r0,r6,#28             ;62
0001de  0f00              LSRS     r0,r0,#28             ;62
0001e0  d11a              BNE      |L1.536|
0001e2  1130              ASRS     r0,r6,#4              ;62
0001e4  2808              CMP      r0,#8                 ;62
0001e6  d217              BCS      |L1.536|
0001e8  0001              MOVS     r1,r0                 ;62
0001ea  4479              ADD      r1,r1,pc              ;62
0001ec  7909              LDRB     r1,[r1,#4]            ;62
0001ee  1849              ADDS     r1,r1,r1              ;62
0001f0  448f              ADD      pc,pc,r1              ;62
0001f2  0307              DCB      0x03,0x07
0001f4  0e0e0e0e          DCB      0x0e,0x0e,0x0e,0x0e
0001f8  0e0b              DCB      0x0e,0x0b
0001fa  2300              MOVS     r3,#0                 ;62
0001fc  220c              MOVS     r2,#0xc               ;62
                  |L1.510|
0001fe  2130              MOVS     r1,#0x30              ;62
000200  e013              B        |L1.554|
000202  2301              MOVS     r3,#1                 ;62
000204  220c              MOVS     r2,#0xc               ;62
000206  2120              MOVS     r1,#0x20              ;62
000208  e00f              B        |L1.554|
00020a  2301              MOVS     r3,#1                 ;62
00020c  2204              MOVS     r2,#4                 ;62
00020e  e048              B        |L1.674|
000210  2301              MOVS     r3,#1                 ;62
000212  2200              MOVS     r2,#0                 ;62
000214  2110              MOVS     r1,#0x10              ;62
000216  e008              B        |L1.554|
                  |L1.536|
000218  2300              MOVS     r3,#0                 ;62
00021a  461a              MOV      r2,r3                 ;62
00021c  4619              MOV      r1,r3                 ;62
00021e  e004              B        |L1.554|
                  |L1.544|
000220  2e00              CMP      r6,#0                 ;62
000222  d03c              BEQ      |L1.670|
000224  2300              MOVS     r3,#0                 ;62
000226  461a              MOV      r2,r3                 ;62
000228  2110              MOVS     r1,#0x10              ;62
                  |L1.554|
00022a  6967              LDR      r7,[r4,#0x14]         ;62
00022c  2070              MOVS     r0,#0x70              ;62
00022e  4387              BICS     r7,r7,r0              ;62
000230  6167              STR      r7,[r4,#0x14]         ;62
000232  6960              LDR      r0,[r4,#0x14]         ;62
000234  4330              ORRS     r0,r0,r6              ;62
000236  6160              STR      r0,[r4,#0x14]         ;62
000238  4670              MOV      r0,lr                 ;62
00023a  4308              ORRS     r0,r0,r1              ;62
00023c  4310              ORRS     r0,r0,r2              ;62
00023e  4931              LDR      r1,|L1.772|
000240  4318              ORRS     r0,r0,r3              ;62
000242  6388              STR      r0,[r1,#0x38]         ;62
;;;69     
;;;70         ADC_SPT = adc_init_para.sample_clk_num;                 //adc sample clock number set
000244  4660              MOV      r0,r12
000246  0c00              LSRS     r0,r0,#16
000248  61e0              STR      r0,[r4,#0x1c]
00024a  2019              MOVS     r0,#0x19
00024c  63c8              STR      r0,[r1,#0x3c]
00024e  4f28              LDR      r7,|L1.752|
000250  2600              MOVS     r6,#0
000252  613e              STR      r6,[r7,#0x10]
000254  617e              STR      r6,[r7,#0x14]
;;;71         
;;;72         /* adc register config,note: do not change */
;;;73         adc_reg_config();
;;;74         
;;;75         /* adc trigger config */
;;;76         adc_trigger_config(adc_init_para.trigger);
000256  9908              LDR      r1,[sp,#0x20]
000258  4630              MOV      r0,r6
00025a  0c09              LSRS     r1,r1,#16
00025c  4308              ORRS     r0,r0,r1
00025e  b280              UXTH     r0,r0
000260  0429              LSLS     r1,r5,#16
000262  4308              ORRS     r0,r0,r1
000264  f7fffffe          BL       adc_trigger_config
000268  0c2a              LSRS     r2,r5,#16
00026a  4610              MOV      r0,r2
;;;77         
;;;78         /* adc compare config */
;;;79         adc_compare_config(adc_init_para.compare);
00026c  9a0a              LDR      r2,[sp,#0x28]
00026e  b280              UXTH     r0,r0
000270  0412              LSLS     r2,r2,#16
000272  4310              ORRS     r0,r0,r2
000274  9a0a              LDR      r2,[sp,#0x28]
000276  0c09              LSRS     r1,r1,#16
000278  0c12              LSRS     r2,r2,#16
00027a  0409              LSLS     r1,r1,#16
00027c  4311              ORRS     r1,r1,r2
00027e  f7fffffe          BL       adc_compare_config
000282  9807              LDR      r0,[sp,#0x1c]
000284  61a6              STR      r6,[r4,#0x18]
000286  69a1              LDR      r1,[r4,#0x18]
000288  4301              ORRS     r1,r1,r0
00028a  61a1              STR      r1,[r4,#0x18]
00028c  603e              STR      r6,[r7,#0]
;;;80     
;;;81         /* adc channel enable */
;;;82         adc_channel_enable(adc_init_para.channel_en);
;;;83         
;;;84         /* adc power down disable */
;;;85         adc_powerdown(DISABLE);
;;;86         
;;;87         /* adc interrupt config */
;;;88         adc_interrupt_set(adc_init_para.int_en);
00028e  9808              LDR      r0,[sp,#0x20]
000290  b2c0              UXTB     r0,r0
000292  f7fffffe          BL       adc_interrupt_set
;;;89         
;;;90     //    adc_cgroup();
;;;91     //    adc_calibrate();
;;;92     }
000296  bcf0              POP      {r4-r7}
000298  bc08              POP      {r3}
00029a  b004              ADD      sp,sp,#0x10
00029c  4718              BX       r3
                  |L1.670|
00029e  2300              MOVS     r3,#0
0002a0  220c              MOVS     r2,#0xc
                  |L1.674|
0002a2  2120              MOVS     r1,#0x20
0002a4  e7c1              B        |L1.554|
;;;93     
                          ENDP

                  wait_adc_convert PROC
;;;116    */
;;;117    ErrorStatus wait_adc_convert(void)
0002a6  4818              LDR      r0,|L1.776|
;;;118    {
;;;119        uint32_t timeout = 30000U;
;;;120        while(timeout != 0x00U){
;;;121            timeout --;
;;;122            if((ADC_SC1 & ADC_SC1_COCO) != 0x00U){
0002a8  490e              LDR      r1,|L1.740|
                  |L1.682|
0002aa  680a              LDR      r2,[r1,#0]
0002ac  1e40              SUBS     r0,r0,#1
0002ae  0612              LSLS     r2,r2,#24
0002b0  d401              BMI      |L1.694|
0002b2  2800              CMP      r0,#0                 ;120
0002b4  d1f9              BNE      |L1.682|
                  |L1.694|
;;;123                return SUCCESS;
;;;124            }
;;;125        }
;;;126        return SUCCESS;
0002b6  2001              MOVS     r0,#1
;;;127    }
0002b8  4770              BX       lr
;;;128    
                          ENDP

                  adc_data_get PROC
;;;134    */
;;;135    uint16_t adc_data_get(void)
0002ba  480a              LDR      r0,|L1.740|
;;;136    {
;;;137        return (uint16_t)ADC_DATA;
0002bc  6880              LDR      r0,[r0,#8]
0002be  b280              UXTH     r0,r0
;;;138    }
0002c0  4770              BX       lr
;;;139    
                          ENDP

                  adc_start_convert PROC
;;;145    */
;;;146    void adc_start_convert(uint8_t ch)
0002c2  21e0              MOVS     r1,#0xe0
;;;147    {
;;;148        ch |= 0xe0U;
0002c4  4308              ORRS     r0,r0,r1
;;;149        ADC_SC1 |= 0x1fU;
0002c6  4907              LDR      r1,|L1.740|
0002c8  680a              LDR      r2,[r1,#0]
0002ca  231f              MOVS     r3,#0x1f
0002cc  431a              ORRS     r2,r2,r3
0002ce  600a              STR      r2,[r1,#0]
;;;150        ADC_SC1 &= ch;
0002d0  680a              LDR      r2,[r1,#0]
0002d2  4002              ANDS     r2,r2,r0
0002d4  600a              STR      r2,[r1,#0]
;;;151    }
0002d6  4770              BX       lr
;;;152    
                          ENDP

                  adc_channel_disable PROC
;;;312    */
;;;313    void adc_channel_disable(uint32_t ch)
0002d8  4902              LDR      r1,|L1.740|
;;;314    {
;;;315        ADC_APCTL &= ~ch;
0002da  698a              LDR      r2,[r1,#0x18]
0002dc  4382              BICS     r2,r2,r0
0002de  618a              STR      r2,[r1,#0x18]
;;;316    }
0002e0  4770              BX       lr
;;;317    
                          ENDP

0002e2  0000              DCW      0x0000
                  |L1.740|
                          DCD      0x50090000
                  |L1.744|
                          DCD      0xe000e180
                  |L1.748|
                          DCD      0xe000e100
                  |L1.752|
                          DCD      0x50090080
                  |L1.756|
                          DCD      0x50060000
                  |L1.760|
                          DCD      SystemCoreClock
                  |L1.764|
                          DCD      0x01e84800
                  |L1.768|
                          DCD      0x00f42400
                  |L1.772|
                          DCD      0x50090040
                  |L1.776|
                          DCD      0x00007530

;*** Start embedded assembler ***

#line 1 "RTE\\Device\\BF7006AM64\\BF7006AMxx_adc.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___16_BF7006AMxx_adc_c_adc_init____REV16|
#line 447 ".\\RTE\\CMSIS\\BF7006AM64\\cmsis_armcc.h"
|__asm___16_BF7006AMxx_adc_c_adc_init____REV16| PROC
#line 448

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___16_BF7006AMxx_adc_c_adc_init____REVSH|
#line 462
|__asm___16_BF7006AMxx_adc_c_adc_init____REVSH| PROC
#line 463

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--list --debug -c --asm --interleave --gnu -o.\obj\bf7006amxx_eflash.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\obj\bf7006amxx_eflash.d --cpu=Cortex-M0 --apcs=interwork -Otime --diag_suppress=9931 -I.\src\pt -I.\src -I.\config -I.\RTE\CMSIS\BF7006AM64 -I.\RTE\Device\BF7006AM64 -I.\RTE\SEGGER -I.\RTE\Startup\BF7006AM64 -I.\RTE\_b40 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.8.0\CMSIS\Core\Include -IC:\Keil_v5\ARM\PACK\BYD\BYDMicro_DFP\1.1.0\Device\Include\BF7006AMxx -D__UVISION_VERSION=536 -D_RTE_ -D_RTE_ --omf_browse=.\obj\bf7006amxx_eflash.crf RTE\Device\BF7006AM64\BF7006AMxx_eflash.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  ecc_enable PROC
;;;21     */
;;;22     ErrorStatus ecc_enable(void)
000000  48f6              LDR      r0,|L1.988|
;;;23     {
;;;24         EFLASH_ECC_CTRL = 0x01U;
000002  2101              MOVS     r1,#1
000004  6001              STR      r1,[r0,#0]
;;;25         if(EFLASH_ECC_CTRL != 0x01U){
000006  6800              LDR      r0,[r0,#0]
000008  2801              CMP      r0,#1
00000a  d000              BEQ      |L1.14|
;;;26             return ERROR;
00000c  2000              MOVS     r0,#0
                  |L1.14|
;;;27         }
;;;28         return SUCCESS;
;;;29     }
00000e  4770              BX       lr
;;;30     
                          ENDP

                  ecc_disable PROC
;;;36     */
;;;37     ErrorStatus ecc_disable(void)
000010  48f2              LDR      r0,|L1.988|
;;;38     {
;;;39         EFLASH_ECC_CTRL = 0x00U;
000012  2100              MOVS     r1,#0
000014  6001              STR      r1,[r0,#0]
;;;40         if(EFLASH_ECC_CTRL != 0x00U){
000016  6800              LDR      r0,[r0,#0]
000018  2800              CMP      r0,#0
00001a  d001              BEQ      |L1.32|
;;;41             return ERROR;
00001c  2000              MOVS     r0,#0
;;;42         }
;;;43         return SUCCESS;
;;;44     }
00001e  4770              BX       lr
                  |L1.32|
000020  2001              MOVS     r0,#1                 ;43
000022  4770              BX       lr
;;;45     
                          ENDP

                  is_flash_idle PROC
;;;187    */
;;;188    bool is_flash_idle(void)
000024  2005              MOVS     r0,#5
;;;189    {
;;;190        if((FLASH_STATE & FLASH_STATE_IDLE) != 0x00U){
000026  0700              LSLS     r0,r0,#28
000028  68c0              LDR      r0,[r0,#0xc]
00002a  07c0              LSLS     r0,r0,#31
00002c  d000              BEQ      |L1.48|
;;;191            return TRUE;
00002e  2001              MOVS     r0,#1
                  |L1.48|
;;;192        }else{
;;;193            return FALSE;
;;;194        }
;;;195    }
000030  4770              BX       lr
;;;196    /*!
                          ENDP

                  wait_flash_prog_erae_done PROC
;;;201    */
;;;202    ErrorStatus wait_flash_prog_erae_done(void)
000032  48eb              LDR      r0,|L1.992|
000034  2105              MOVS     r1,#5
000036  0709              LSLS     r1,r1,#28
                  |L1.56|
000038  68ca              LDR      r2,[r1,#0xc]
00003a  1e40              SUBS     r0,r0,#1
00003c  07d2              LSLS     r2,r2,#31
00003e  d001              BEQ      |L1.68|
;;;203    {
;;;204        uint32_t timeout = 30000U;    
;;;205        while(timeout != 0x00U){
;;;206            timeout --;
;;;207            if(is_flash_idle()){
;;;208                return SUCCESS;
000040  2001              MOVS     r0,#1
;;;209            }
;;;210        }
;;;211        return ERROR;
;;;212    }
000042  4770              BX       lr
                  |L1.68|
000044  2800              CMP      r0,#0                 ;205
000046  d1f7              BNE      |L1.56|
000048  4770              BX       lr
;;;213    
                          ENDP

                  flash_sector_erase PROC
;;;52     */
;;;53     ErrorStatus flash_sector_erase(uint8_t sector_num,bool is_wait_done)
00004a  2860              CMP      r0,#0x60
;;;54     {
00004c  d20b              BCS      |L1.102|
00004e  2205              MOVS     r2,#5
000050  0712              LSLS     r2,r2,#28
000052  68d3              LDR      r3,[r2,#0xc]
000054  07db              LSLS     r3,r3,#31
000056  d006              BEQ      |L1.102|
;;;55         uint32_t *addr;
;;;56         if(sector_num >= FLASH_SECTOR_MAX_NUM){
;;;57             return ERROR;
;;;58         }
;;;59         if(is_flash_idle()){
;;;60             addr = (uint32_t *)((uint32_t)sector_num << 10U);
;;;61             EFLASH_SEL = FLASH_SEL;
000058  4be2              LDR      r3,|L1.996|
00005a  0280              LSLS     r0,r0,#10             ;60
00005c  6013              STR      r3,[r2,#0]
;;;62             if(is_wait_done){
00005e  2900              CMP      r1,#0
000060  d003              BEQ      |L1.106|
;;;63                 EFLASH_MODE = FLASH_HALT_ENABLE;
000062  23a5              MOVS     r3,#0xa5
000064  e002              B        |L1.108|
                  |L1.102|
;;;64             }else{
;;;65                 EFLASH_MODE = FLASH_HALT_DISABLE;
;;;66             }
;;;67             EFLASH_EBCFG = FLASH_SECTOR_ERASE;
;;;68             if(addr != NULL){
;;;69                 *addr = 0x00U;
;;;70             }
;;;71             if(is_wait_done){
;;;72                 if(wait_flash_prog_erae_done() == ERROR){
;;;73                     return ERROR;
;;;74                 }
;;;75             }
;;;76             return SUCCESS;
;;;77         }else{
;;;78             return ERROR;
000066  2000              MOVS     r0,#0
;;;79         }
;;;80     }
000068  4770              BX       lr
                  |L1.106|
00006a  235a              MOVS     r3,#0x5a              ;65
                  |L1.108|
00006c  6053              STR      r3,[r2,#4]            ;65
00006e  2355              MOVS     r3,#0x55              ;67
000070  6093              STR      r3,[r2,#8]            ;67
000072  2300              MOVS     r3,#0                 ;67
000074  2800              CMP      r0,#0                 ;68
000076  d000              BEQ      |L1.122|
000078  6003              STR      r3,[r0,#0]            ;69
                  |L1.122|
00007a  2900              CMP      r1,#0                 ;71
00007c  d004              BEQ      |L1.136|
00007e  48d8              LDR      r0,|L1.992|
                  |L1.128|
000080  68d1              LDR      r1,[r2,#0xc]          ;71
000082  1e40              SUBS     r0,r0,#1              ;71
000084  07c9              LSLS     r1,r1,#31             ;71
000086  d001              BEQ      |L1.140|
                  |L1.136|
000088  2001              MOVS     r0,#1                 ;76
00008a  4770              BX       lr
                  |L1.140|
00008c  2800              CMP      r0,#0
00008e  d1f7              BNE      |L1.128|
000090  4770              BX       lr
;;;81     
                          ENDP

                  flash_Nsectors_erase PROC
;;;88     */
;;;89     ErrorStatus flash_Nsectors_erase(uint8_t sector_num,uint8_t len)
000092  b5f8              PUSH     {r3-r7,lr}
;;;90     {
000094  000c              MOVS     r4,r1
000096  4605              MOV      r5,r0
000098  d01d              BEQ      |L1.214|
00009a  4fd2              LDR      r7,|L1.996|
00009c  073e              LSLS     r6,r7,#28
                  |L1.158|
00009e  2d60              CMP      r5,#0x60
0000a0  d21d              BCS      |L1.222|
0000a2  68f0              LDR      r0,[r6,#0xc]
0000a4  07c0              LSLS     r0,r0,#31
0000a6  d01a              BEQ      |L1.222|
0000a8  02a8              LSLS     r0,r5,#10
0000aa  6037              STR      r7,[r6,#0]
0000ac  21a5              MOVS     r1,#0xa5
0000ae  6071              STR      r1,[r6,#4]
0000b0  2155              MOVS     r1,#0x55
0000b2  60b1              STR      r1,[r6,#8]
0000b4  2800              CMP      r0,#0
0000b6  d001              BEQ      |L1.188|
0000b8  2100              MOVS     r1,#0
0000ba  6001              STR      r1,[r0,#0]
                  |L1.188|
0000bc  48c8              LDR      r0,|L1.992|
                  |L1.190|
0000be  68f1              LDR      r1,[r6,#0xc]
0000c0  1e40              SUBS     r0,r0,#1
0000c2  07c9              LSLS     r1,r1,#31
0000c4  d009              BEQ      |L1.218|
0000c6  1e64              SUBS     r4,r4,#1
;;;91         while(len != 0U){
;;;92             if(flash_sector_erase(sector_num,TRUE) == ERROR){
;;;93                 return ERROR;
;;;94             }
;;;95             len --;
0000c8  1c6d              ADDS     r5,r5,#1
0000ca  b2e4              UXTB     r4,r4
;;;96             sector_num ++;
0000cc  b2ed              UXTB     r5,r5
;;;97             wdt_clear();
0000ce  f7fffffe          BL       wdt_clear
0000d2  2c00              CMP      r4,#0                 ;91
0000d4  d1e3              BNE      |L1.158|
                  |L1.214|
;;;98         }
;;;99         return SUCCESS;
0000d6  2001              MOVS     r0,#1
;;;100    }
0000d8  bdf8              POP      {r3-r7,pc}
                  |L1.218|
0000da  2800              CMP      r0,#0
0000dc  d1ef              BNE      |L1.190|
                  |L1.222|
0000de  2000              MOVS     r0,#0                 ;93
0000e0  bdf8              POP      {r3-r7,pc}
;;;101    
                          ENDP

                  flash_mass_erase PROC
;;;109    */
;;;110    ErrorStatus flash_mass_erase(bool is_wait_done)
0000e2  2105              MOVS     r1,#5
0000e4  0709              LSLS     r1,r1,#28
0000e6  68ca              LDR      r2,[r1,#0xc]
0000e8  07d2              LSLS     r2,r2,#31
;;;111    {
0000ea  d005              BEQ      |L1.248|
;;;112        if(is_flash_idle()){
;;;113            EFLASH_SEL = FLASH_SEL;
0000ec  4abd              LDR      r2,|L1.996|
0000ee  600a              STR      r2,[r1,#0]
;;;114            if(is_wait_done){
0000f0  2800              CMP      r0,#0
0000f2  d003              BEQ      |L1.252|
;;;115                EFLASH_MODE = FLASH_HALT_ENABLE;
0000f4  22a5              MOVS     r2,#0xa5
0000f6  e002              B        |L1.254|
                  |L1.248|
;;;116            }else{
;;;117                EFLASH_MODE = FLASH_HALT_DISABLE;
;;;118            }
;;;119            EFLASH_EBCFG = FLASH_MASS_ERASE;
;;;120            if(is_wait_done){
;;;121                if(wait_flash_prog_erae_done() == ERROR){
;;;122                    return ERROR;
;;;123                }
;;;124            }
;;;125            return SUCCESS;
;;;126        }else{
;;;127            return ERROR;
0000f8  2000              MOVS     r0,#0
;;;128        }
;;;129    }
0000fa  4770              BX       lr
                  |L1.252|
0000fc  225a              MOVS     r2,#0x5a              ;117
                  |L1.254|
0000fe  604a              STR      r2,[r1,#4]            ;117
000100  22aa              MOVS     r2,#0xaa              ;119
000102  608a              STR      r2,[r1,#8]            ;119
000104  2800              CMP      r0,#0                 ;120
000106  d004              BEQ      |L1.274|
000108  48b5              LDR      r0,|L1.992|
                  |L1.266|
00010a  68ca              LDR      r2,[r1,#0xc]          ;120
00010c  1e40              SUBS     r0,r0,#1              ;120
00010e  07d2              LSLS     r2,r2,#31             ;120
000110  d001              BEQ      |L1.278|
                  |L1.274|
000112  2001              MOVS     r0,#1                 ;125
000114  4770              BX       lr
                  |L1.278|
000116  2800              CMP      r0,#0
000118  d1f7              BNE      |L1.266|
00011a  4770              BX       lr
;;;130    
                          ENDP

                  flash_prog_word PROC
;;;137    */
;;;138    ErrorStatus flash_prog_word(uint32_t addr,uint32_t data)
00011c  4ab2              LDR      r2,|L1.1000|
;;;139    {
;;;140        if(addr > FLASH_MAX_ADDR){
00011e  4290              CMP      r0,r2
000120  d80f              BHI      |L1.322|
000122  2205              MOVS     r2,#5                 ;139
000124  0712              LSLS     r2,r2,#28             ;139
000126  68d3              LDR      r3,[r2,#0xc]          ;139
000128  07db              LSLS     r3,r3,#31             ;139
00012a  d00a              BEQ      |L1.322|
;;;141            return ERROR;
;;;142        }
;;;143        if(is_flash_idle()){
;;;144            addr &= ~0x3U;
00012c  0880              LSRS     r0,r0,#2
;;;145            EFLASH_SEL = FLASH_SEL;
00012e  4bad              LDR      r3,|L1.996|
000130  0080              LSLS     r0,r0,#2              ;144
000132  6013              STR      r3,[r2,#0]
;;;146            EFLASH_MODE = FLASH_HALT_ENABLE;
000134  23a5              MOVS     r3,#0xa5
000136  6053              STR      r3,[r2,#4]
;;;147            EFLASH_EBCFG = FLASH_PROG;
000138  2333              MOVS     r3,#0x33
00013a  6093              STR      r3,[r2,#8]
00013c  6001              STR      r1,[r0,#0]
00013e  48a8              LDR      r0,|L1.992|
000140  e001              B        |L1.326|
                  |L1.322|
;;;148            *(uint32_t *)addr = data;
;;;149            if(wait_flash_prog_erae_done() == ERROR){
;;;150                return ERROR;
;;;151            }
;;;152            return SUCCESS;
;;;153        }else{
;;;154            return ERROR;
000142  2000              MOVS     r0,#0
;;;155        }
;;;156    }
000144  4770              BX       lr
                  |L1.326|
000146  68d1              LDR      r1,[r2,#0xc]
000148  1e40              SUBS     r0,r0,#1
00014a  07c9              LSLS     r1,r1,#31
00014c  d001              BEQ      |L1.338|
00014e  2001              MOVS     r0,#1                 ;152
000150  4770              BX       lr
                  |L1.338|
000152  2800              CMP      r0,#0
000154  d1f7              BNE      |L1.326|
000156  4770              BX       lr
;;;157    
                          ENDP

                  flash_prog_Nwords PROC
;;;165    */
;;;166    ErrorStatus flash_prog_Nwords(uint32_t addr,uint32_t data[],uint32_t len)
000158  b5f7              PUSH     {r0-r2,r4-r7,lr}
;;;167    {
;;;168        uint32_t index = 0x00U;
00015a  2500              MOVS     r5,#0
00015c  4614              MOV      r4,r2                 ;167
00015e  4606              MOV      r6,r0                 ;167
;;;169        while(len != 0U)
000160  2a00              CMP      r2,#0
000162  d01f              BEQ      |L1.420|
000164  4f9f              LDR      r7,|L1.996|
                  |L1.358|
;;;170        {
;;;171            if(flash_prog_word(addr,data[index]) == ERROR){
000166  9801              LDR      r0,[sp,#4]
000168  00a9              LSLS     r1,r5,#2
00016a  5840              LDR      r0,[r0,r1]
00016c  499e              LDR      r1,|L1.1000|
00016e  428e              CMP      r6,r1
000170  d81d              BHI      |L1.430|
000172  2305              MOVS     r3,#5
000174  071b              LSLS     r3,r3,#28
000176  68d9              LDR      r1,[r3,#0xc]
000178  07c9              LSLS     r1,r1,#31
00017a  d018              BEQ      |L1.430|
00017c  08b1              LSRS     r1,r6,#2
00017e  0089              LSLS     r1,r1,#2
000180  601f              STR      r7,[r3,#0]
000182  22a5              MOVS     r2,#0xa5
000184  605a              STR      r2,[r3,#4]
000186  2233              MOVS     r2,#0x33
000188  609a              STR      r2,[r3,#8]
00018a  6008              STR      r0,[r1,#0]
00018c  4894              LDR      r0,|L1.992|
                  |L1.398|
00018e  68d9              LDR      r1,[r3,#0xc]
000190  1e40              SUBS     r0,r0,#1
000192  07c9              LSLS     r1,r1,#31
000194  d009              BEQ      |L1.426|
000196  1e64              SUBS     r4,r4,#1
000198  1c6d              ADDS     r5,r5,#1
00019a  1d36              ADDS     r6,r6,#4
;;;172                return ERROR;
;;;173            }
;;;174            len --;
;;;175            addr += 4U;
;;;176            index ++;
;;;177            wdt_clear();
00019c  f7fffffe          BL       wdt_clear
0001a0  2c00              CMP      r4,#0                 ;169
0001a2  d1e0              BNE      |L1.358|
                  |L1.420|
;;;178        }
;;;179        return SUCCESS;
0001a4  2001              MOVS     r0,#1
;;;180    }
0001a6  b003              ADD      sp,sp,#0xc
0001a8  bdf0              POP      {r4-r7,pc}
                  |L1.426|
0001aa  2800              CMP      r0,#0
0001ac  d1ef              BNE      |L1.398|
                  |L1.430|
0001ae  2000              MOVS     r0,#0                 ;172
0001b0  b003              ADD      sp,sp,#0xc
0001b2  bdf0              POP      {r4-r7,pc}
;;;181    
                          ENDP

                  flash_word_get PROC
;;;220    */
;;;221    ErrorStatus flash_word_get(uint32_t addr,uint32_t *red_dat)
0001b4  2205              MOVS     r2,#5
0001b6  0712              LSLS     r2,r2,#28
0001b8  68d2              LDR      r2,[r2,#0xc]
0001ba  07d2              LSLS     r2,r2,#31
;;;222    {
0001bc  d005              BEQ      |L1.458|
;;;223        if(is_flash_idle()){
;;;224            *red_dat = (*(uint32_t *)(addr & (~0x3U)));
0001be  0880              LSRS     r0,r0,#2
0001c0  0080              LSLS     r0,r0,#2
0001c2  6800              LDR      r0,[r0,#0]
;;;225            return SUCCESS;
0001c4  6008              STR      r0,[r1,#0]
0001c6  2001              MOVS     r0,#1
;;;226        }else{
;;;227            *red_dat = 0x00U;
;;;228            return ERROR;
;;;229        }
;;;230    }
0001c8  4770              BX       lr
                  |L1.458|
0001ca  2000              MOVS     r0,#0                 ;227
0001cc  6008              STR      r0,[r1,#0]            ;227
0001ce  4770              BX       lr
;;;231    
                          ENDP

                  flash_Nwords_get PROC
;;;239    */
;;;240    ErrorStatus flash_Nwords_get(uint32_t addr,uint32_t *red_dat,uint32_t len)
0001d0  b410              PUSH     {r4}
;;;241    {
;;;242        uint32_t read_addr = addr;
;;;243        uint32_t* write_pt = red_dat;
;;;244        uint32_t read_temp;
;;;245        // judge if target addr out of FLASH addr
;;;246        if(addr + 4 * len > FLASH_MAX_ADDR + 1){
0001d2  0093              LSLS     r3,r2,#2
0001d4  2403              MOVS     r4,#3
0001d6  181b              ADDS     r3,r3,r0
0001d8  03e4              LSLS     r4,r4,#15
0001da  42a3              CMP      r3,r4
0001dc  d810              BHI      |L1.512|
;;;247            return ERROR;
;;;248        }
;;;249        while(len != 0){
0001de  2a00              CMP      r2,#0
0001e0  d00b              BEQ      |L1.506|
0001e2  2405              MOVS     r4,#5
0001e4  0724              LSLS     r4,r4,#28
                  |L1.486|
0001e6  68e3              LDR      r3,[r4,#0xc]
0001e8  07db              LSLS     r3,r3,#31
0001ea  d009              BEQ      |L1.512|
0001ec  0883              LSRS     r3,r0,#2
0001ee  009b              LSLS     r3,r3,#2
0001f0  681b              LDR      r3,[r3,#0]
;;;250            if(flash_word_get(read_addr,&read_temp) == ERROR){
;;;251                return ERROR;
;;;252            }
;;;253            read_addr += 4;
;;;254            *write_pt = read_temp;
0001f2  1d00              ADDS     r0,r0,#4
0001f4  c108              STM      r1!,{r3}
0001f6  1e52              SUBS     r2,r2,#1
0001f8  d1f5              BNE      |L1.486|
                  |L1.506|
;;;255            write_pt++;
;;;256            len--;
;;;257        }
;;;258        return SUCCESS;
;;;259    }
0001fa  bc10              POP      {r4}
0001fc  2001              MOVS     r0,#1                 ;258
0001fe  4770              BX       lr
                  |L1.512|
000200  bc10              POP      {r4}
000202  2000              MOVS     r0,#0                 ;251
000204  4770              BX       lr
;;;260    
                          ENDP

                  flash_protect PROC
;;;266    */
;;;267    void flash_protect(uint8_t protect_page)
000206  4975              LDR      r1,|L1.988|
;;;268    {
;;;269        EFLASH_UNLOCK = EFLASH_UNLOCK_KEY;
000208  4a78              LDR      r2,|L1.1004|
00020a  604a              STR      r2,[r1,#4]
;;;270        if(protect_page > FLASH_LOCK_MAX_PAGE){
00020c  2830              CMP      r0,#0x30
00020e  d900              BLS      |L1.530|
;;;271            protect_page = FLASH_LOCK_MAX_PAGE;
000210  2030              MOVS     r0,#0x30
                  |L1.530|
;;;272        }
;;;273        FLASH_LOCK_SIZE = protect_page;
000212  6088              STR      r0,[r1,#8]
;;;274        /* enable flash protect range illegal access interrupt */
;;;275        SYS_INTEN |= SYS_INTEN_FPOT;
000214  4876              LDR      r0,|L1.1008|
000216  6841              LDR      r1,[r0,#4]
000218  2208              MOVS     r2,#8
00021a  4311              ORRS     r1,r1,r2
00021c  6041              STR      r1,[r0,#4]
00021e  4975              LDR      r1,|L1.1012|
000220  2002              MOVS     r0,#2
000222  6008              STR      r0,[r1,#0]
;;;276        NVIC_EnableIRQ(SYS_IRQn);
;;;277    }
000224  4770              BX       lr
;;;278    
                          ENDP

                  is_eeprom_idle PROC
;;;461    */
;;;462    bool is_eeprom_idle(void)
000226  2005              MOVS     r0,#5
;;;463    {
;;;464        if((EEPROM_STATE & EEPROM_STATE_IDLE) == 0x00U){
000228  0700              LSLS     r0,r0,#28
00022a  6900              LDR      r0,[r0,#0x10]
00022c  07c0              LSLS     r0,r0,#31
00022e  d000              BEQ      |L1.562|
;;;465            return FALSE;
;;;466        }else{
;;;467            return TRUE;
000230  2001              MOVS     r0,#1
                  |L1.562|
;;;468        }
;;;469    }
000232  4770              BX       lr
;;;470    
                          ENDP

                  wait_eeprom_prog_erae_done PROC
;;;476    */
;;;477    ErrorStatus wait_eeprom_prog_erae_done(void)
000234  2000              MOVS     r0,#0
;;;478    {
;;;479        uint32_t timeout = 0xFFFFFFFFU;
000236  43c0              MVNS     r0,r0
000238  2105              MOVS     r1,#5
00023a  0709              LSLS     r1,r1,#28
                  |L1.572|
00023c  690a              LDR      r2,[r1,#0x10]
00023e  1e40              SUBS     r0,r0,#1
000240  07d2              LSLS     r2,r2,#31
000242  d001              BEQ      |L1.584|
;;;480        while(timeout != 0x00U){
;;;481            timeout --;
;;;482            if(is_eeprom_idle()){
;;;483                return SUCCESS;
000244  2001              MOVS     r0,#1
;;;484            }
;;;485        }
;;;486        return ERROR;
;;;487    }
000246  4770              BX       lr
                  |L1.584|
000248  2800              CMP      r0,#0                 ;480
00024a  d1f7              BNE      |L1.572|
00024c  4770              BX       lr
;;;488    
                          ENDP

                  eeprom_sector_erase PROC
;;;285    */
;;;286    ErrorStatus eeprom_sector_erase(uint8_t sector_num,bool is_wait_done)
00024e  2820              CMP      r0,#0x20
;;;287    {
000250  d21b              BCS      |L1.650|
000252  2205              MOVS     r2,#5
000254  0712              LSLS     r2,r2,#28
000256  6913              LDR      r3,[r2,#0x10]
000258  07db              LSLS     r3,r3,#31
00025a  d016              BEQ      |L1.650|
;;;288        uint32_t *addr;
;;;289        if(sector_num >= EEPROM_SECTOR_MAX_NUM){
;;;290            return ERROR;
;;;291        }
;;;292        if(is_eeprom_idle()){
;;;293            addr = (uint32_t *)(EEPROM_BASE + (EEPROM_SECTOR_SIZE * sector_num));
00025c  0180              LSLS     r0,r0,#6
00025e  0093              LSLS     r3,r2,#2
000260  18c0              ADDS     r0,r0,r3
;;;294            EFLASH_SEL = EEPROM_SEL;
000262  4b65              LDR      r3,|L1.1016|
000264  6013              STR      r3,[r2,#0]
;;;295            EFLASH_MODE = EEPROM_PROG_ERASE_MODE;
000266  233c              MOVS     r3,#0x3c
000268  6053              STR      r3,[r2,#4]
;;;296            EFLASH_EBCFG = EEPROM_SECTOR_ERASE;
00026a  2355              MOVS     r3,#0x55
00026c  6093              STR      r3,[r2,#8]
00026e  2300              MOVS     r3,#0
;;;297            if(addr != NULL){
000270  2800              CMP      r0,#0
000272  d000              BEQ      |L1.630|
;;;298                *addr = 0x00U;
000274  6003              STR      r3,[r0,#0]
                  |L1.630|
;;;299            }
;;;300            if(is_wait_done){
000276  2900              CMP      r1,#0
000278  d005              BEQ      |L1.646|
00027a  2000              MOVS     r0,#0
00027c  43c0              MVNS     r0,r0
                  |L1.638|
00027e  6911              LDR      r1,[r2,#0x10]
000280  1e40              SUBS     r0,r0,#1
000282  07c9              LSLS     r1,r1,#31
000284  d003              BEQ      |L1.654|
                  |L1.646|
;;;301                if(wait_eeprom_prog_erae_done() == ERROR){
;;;302                    return ERROR;
;;;303                }
;;;304            }
;;;305            return SUCCESS;
000286  2001              MOVS     r0,#1
;;;306        }else{
;;;307            return ERROR;
;;;308        }
;;;309    }
000288  4770              BX       lr
                  |L1.650|
00028a  2000              MOVS     r0,#0                 ;307
00028c  4770              BX       lr
                  |L1.654|
00028e  2800              CMP      r0,#0
000290  d1f5              BNE      |L1.638|
000292  4770              BX       lr
;;;310    
                          ENDP

                  eeprom_Nsectors_erase PROC
;;;317    */
;;;318    ErrorStatus eeprom_Nsectors_erase(uint8_t sector_num,uint8_t len)
000294  b5f8              PUSH     {r3-r7,lr}
;;;319    {
000296  000c              MOVS     r4,r1
000298  4605              MOV      r5,r0
00029a  d022              BEQ      |L1.738|
00029c  4f56              LDR      r7,|L1.1016|
00029e  2605              MOVS     r6,#5
0002a0  0736              LSLS     r6,r6,#28
                  |L1.674|
0002a2  2d20              CMP      r5,#0x20
0002a4  d221              BCS      |L1.746|
0002a6  6930              LDR      r0,[r6,#0x10]
0002a8  07c0              LSLS     r0,r0,#31
0002aa  d01e              BEQ      |L1.746|
0002ac  2001              MOVS     r0,#1
0002ae  01a9              LSLS     r1,r5,#6
0002b0  0780              LSLS     r0,r0,#30
0002b2  1808              ADDS     r0,r1,r0
0002b4  6037              STR      r7,[r6,#0]
0002b6  213c              MOVS     r1,#0x3c
0002b8  6071              STR      r1,[r6,#4]
0002ba  2155              MOVS     r1,#0x55
0002bc  60b1              STR      r1,[r6,#8]
0002be  2800              CMP      r0,#0
0002c0  d001              BEQ      |L1.710|
0002c2  2100              MOVS     r1,#0
0002c4  6001              STR      r1,[r0,#0]
                  |L1.710|
0002c6  2000              MOVS     r0,#0
0002c8  43c0              MVNS     r0,r0
                  |L1.714|
0002ca  6931              LDR      r1,[r6,#0x10]
0002cc  1e40              SUBS     r0,r0,#1
0002ce  07c9              LSLS     r1,r1,#31
0002d0  d009              BEQ      |L1.742|
0002d2  1e64              SUBS     r4,r4,#1
;;;320        while(len != 0U){
;;;321            if(eeprom_sector_erase(sector_num,TRUE) == ERROR){
;;;322                return ERROR;
;;;323            }
;;;324            len --;
0002d4  1c6d              ADDS     r5,r5,#1
0002d6  b2e4              UXTB     r4,r4
;;;325            sector_num ++;
0002d8  b2ed              UXTB     r5,r5
;;;326            wdt_clear();
0002da  f7fffffe          BL       wdt_clear
0002de  2c00              CMP      r4,#0                 ;320
0002e0  d1df              BNE      |L1.674|
                  |L1.738|
;;;327        }
;;;328        return SUCCESS;
0002e2  2001              MOVS     r0,#1
;;;329    }
0002e4  bdf8              POP      {r3-r7,pc}
                  |L1.742|
0002e6  2800              CMP      r0,#0
0002e8  d1ef              BNE      |L1.714|
                  |L1.746|
0002ea  2000              MOVS     r0,#0                 ;322
0002ec  bdf8              POP      {r3-r7,pc}
;;;330    
                          ENDP

                  eeprom_mass_erase PROC
;;;336    */
;;;337    ErrorStatus eeprom_mass_erase(bool is_wait_done)
0002ee  2105              MOVS     r1,#5
0002f0  0709              LSLS     r1,r1,#28
0002f2  690a              LDR      r2,[r1,#0x10]
0002f4  07d2              LSLS     r2,r2,#31
;;;338    {
0002f6  d011              BEQ      |L1.796|
;;;339        uint32_t *addr;
;;;340        if(is_eeprom_idle()){
;;;341            addr = (uint32_t *)EEPROM_BASE;
;;;342            EFLASH_SEL = EEPROM_SEL;
0002f8  4b3f              LDR      r3,|L1.1016|
0002fa  008a              LSLS     r2,r1,#2              ;341
0002fc  600b              STR      r3,[r1,#0]
;;;343            EFLASH_MODE = EEPROM_PROG_ERASE_MODE;
0002fe  233c              MOVS     r3,#0x3c
000300  604b              STR      r3,[r1,#4]
;;;344            EFLASH_EBCFG = EEPROM_MASS_ERASE;
000302  23aa              MOVS     r3,#0xaa
000304  608b              STR      r3,[r1,#8]
;;;345            *addr = 0x00U;
000306  2300              MOVS     r3,#0
;;;346            if(is_wait_done){
000308  6013              STR      r3,[r2,#0]
00030a  2800              CMP      r0,#0
00030c  d004              BEQ      |L1.792|
00030e  1e58              SUBS     r0,r3,#1
                  |L1.784|
000310  690a              LDR      r2,[r1,#0x10]
000312  1e40              SUBS     r0,r0,#1
000314  07d2              LSLS     r2,r2,#31
000316  d003              BEQ      |L1.800|
                  |L1.792|
;;;347                if(wait_eeprom_prog_erae_done() == ERROR){
;;;348                    return ERROR;
;;;349                }
;;;350            }
;;;351            return SUCCESS;
000318  2001              MOVS     r0,#1
;;;352        }else{
;;;353            return ERROR;
;;;354        }
;;;355    }
00031a  4770              BX       lr
                  |L1.796|
00031c  2000              MOVS     r0,#0                 ;353
00031e  4770              BX       lr
                  |L1.800|
000320  2800              CMP      r0,#0
000322  d1f5              BNE      |L1.784|
000324  4770              BX       lr
;;;356    
                          ENDP

                  eeprom_prog_word PROC
;;;363    */
;;;364    ErrorStatus eeprom_prog_word(uint32_t addr,uint32_t data)
000326  4a35              LDR      r2,|L1.1020|
;;;365    {
;;;366        if(addr >= EEPROM_MAX_ADDR){
000328  4290              CMP      r0,r2
00032a  d215              BCS      |L1.856|
00032c  2205              MOVS     r2,#5                 ;365
00032e  0712              LSLS     r2,r2,#28             ;365
000330  6913              LDR      r3,[r2,#0x10]         ;365
000332  07db              LSLS     r3,r3,#31             ;365
000334  d010              BEQ      |L1.856|
;;;367            return ERROR;
;;;368        }
;;;369        if(is_eeprom_idle()){
;;;370            addr &= ~(0x3U);
000336  0880              LSRS     r0,r0,#2
;;;371            EFLASH_SEL = EEPROM_SEL;
000338  4b2f              LDR      r3,|L1.1016|
00033a  0080              LSLS     r0,r0,#2              ;370
00033c  6013              STR      r3,[r2,#0]
;;;372            EFLASH_MODE = EEPROM_PROG_ERASE_MODE;
00033e  233c              MOVS     r3,#0x3c
000340  6053              STR      r3,[r2,#4]
;;;373            EFLASH_EBCFG = EEPROM_PROG;
000342  2333              MOVS     r3,#0x33
000344  6093              STR      r3,[r2,#8]
000346  6001              STR      r1,[r0,#0]
000348  2000              MOVS     r0,#0
00034a  43c0              MVNS     r0,r0
                  |L1.844|
00034c  6911              LDR      r1,[r2,#0x10]
00034e  1e40              SUBS     r0,r0,#1
000350  07c9              LSLS     r1,r1,#31
000352  d003              BEQ      |L1.860|
;;;374            *(uint32_t *)addr = data;
;;;375            if(wait_eeprom_prog_erae_done() == FALSE){
;;;376                return ERROR;
;;;377            }
;;;378            return SUCCESS;
000354  2001              MOVS     r0,#1
;;;379        }else{
;;;380            return ERROR;
;;;381        }
;;;382        
;;;383    }
000356  4770              BX       lr
                  |L1.856|
000358  2000              MOVS     r0,#0                 ;380
00035a  4770              BX       lr
                  |L1.860|
00035c  2800              CMP      r0,#0
00035e  d1f5              BNE      |L1.844|
000360  4770              BX       lr
;;;384    
                          ENDP

                  eeprom_prog_Nwords PROC
;;;392    */
;;;393    ErrorStatus eeprom_prog_Nwords(uint32_t addr,uint32_t data[],uint32_t len)
000362  b5f7              PUSH     {r0-r2,r4-r7,lr}
;;;394    {
;;;395        uint32_t index = 0U;
000364  2500              MOVS     r5,#0
000366  4614              MOV      r4,r2                 ;394
000368  4606              MOV      r6,r0                 ;394
;;;396        while(len != 0U)
00036a  2a00              CMP      r2,#0
00036c  d020              BEQ      |L1.944|
00036e  4f22              LDR      r7,|L1.1016|
                  |L1.880|
;;;397        {
;;;398            if(eeprom_prog_word(addr,data[index]) == ERROR){
000370  9801              LDR      r0,[sp,#4]
000372  00a9              LSLS     r1,r5,#2
000374  5840              LDR      r0,[r0,r1]
000376  4921              LDR      r1,|L1.1020|
000378  428e              CMP      r6,r1
00037a  d21e              BCS      |L1.954|
00037c  2305              MOVS     r3,#5
00037e  071b              LSLS     r3,r3,#28
000380  6919              LDR      r1,[r3,#0x10]
000382  07c9              LSLS     r1,r1,#31
000384  d019              BEQ      |L1.954|
000386  08b1              LSRS     r1,r6,#2
000388  0089              LSLS     r1,r1,#2
00038a  601f              STR      r7,[r3,#0]
00038c  223c              MOVS     r2,#0x3c
00038e  605a              STR      r2,[r3,#4]
000390  2233              MOVS     r2,#0x33
000392  609a              STR      r2,[r3,#8]
000394  6008              STR      r0,[r1,#0]
000396  2000              MOVS     r0,#0
000398  43c0              MVNS     r0,r0
                  |L1.922|
00039a  6919              LDR      r1,[r3,#0x10]
00039c  1e40              SUBS     r0,r0,#1
00039e  07c9              LSLS     r1,r1,#31
0003a0  d009              BEQ      |L1.950|
0003a2  1e64              SUBS     r4,r4,#1
0003a4  1c6d              ADDS     r5,r5,#1
0003a6  1d36              ADDS     r6,r6,#4
;;;399                return ERROR;
;;;400            }
;;;401            len --;
;;;402            addr += 4U;
;;;403            index ++;
;;;404            wdt_clear();
0003a8  f7fffffe          BL       wdt_clear
0003ac  2c00              CMP      r4,#0                 ;396
0003ae  d1df              BNE      |L1.880|
                  |L1.944|
;;;405        }
;;;406        return SUCCESS;
0003b0  2001              MOVS     r0,#1
;;;407    }
0003b2  b003              ADD      sp,sp,#0xc
0003b4  bdf0              POP      {r4-r7,pc}
                  |L1.950|
0003b6  2800              CMP      r0,#0
0003b8  d1ef              BNE      |L1.922|
                  |L1.954|
0003ba  2000              MOVS     r0,#0                 ;399
0003bc  b003              ADD      sp,sp,#0xc
0003be  bdf0              POP      {r4-r7,pc}
;;;408    
                          ENDP

                  eeprom_word_get PROC
;;;415    */
;;;416    ErrorStatus eeprom_word_get(uint32_t addr,uint32_t *red_dat)
0003c0  2205              MOVS     r2,#5
0003c2  0712              LSLS     r2,r2,#28
0003c4  6912              LDR      r2,[r2,#0x10]
0003c6  07d2              LSLS     r2,r2,#31
;;;417    {
0003c8  d005              BEQ      |L1.982|
;;;418        if(is_eeprom_idle()){
;;;419            *red_dat = (*(uint32_t *)(addr & (~0x3U)));
0003ca  0880              LSRS     r0,r0,#2
0003cc  0080              LSLS     r0,r0,#2
0003ce  6800              LDR      r0,[r0,#0]
;;;420            return SUCCESS;
0003d0  6008              STR      r0,[r1,#0]
0003d2  2001              MOVS     r0,#1
;;;421        }else{
;;;422            *red_dat = 0x00U;
;;;423            return ERROR;
;;;424        }
;;;425    }
0003d4  4770              BX       lr
                  |L1.982|
0003d6  2000              MOVS     r0,#0                 ;422
0003d8  6008              STR      r0,[r1,#0]            ;422
0003da  4770              BX       lr
                  |L1.988|
                          DCD      0x50000200
                  |L1.992|
                          DCD      0x00007530
                  |L1.996|
                          DCD      0x0000aa55
                  |L1.1000|
                          DCD      0x00017fff
                  |L1.1004|
                          DCD      0xab23dc54
                  |L1.1008|
                          DCD      0x50010100
                  |L1.1012|
                          DCD      0xe000e100
                  |L1.1016|
                          DCD      0x0000cd78
                  |L1.1020|
                          DCD      0x400007ff
                          ENDP

                  eeprom_Nwords_get PROC
;;;434    */
;;;435    ErrorStatus eeprom_Nwords_get(uint32_t addr,uint32_t *red_dat,uint32_t len)
000400  b410              PUSH     {r4}
;;;436    {
;;;437        uint32_t read_addr = addr;
;;;438        uint32_t* write_pt = red_dat;
;;;439        uint32_t read_temp;
;;;440        // judge if target addr out of FLASH addr
;;;441        if((addr + 4 * len > EEPROM_MAX_ADDR + 1) || (addr < EEPROM_BASE)){
000402  0093              LSLS     r3,r2,#2
000404  4c15              LDR      r4,|L1.1116|
000406  181b              ADDS     r3,r3,r0
000408  42a3              CMP      r3,r4
00040a  d813              BHI      |L1.1076|
00040c  04e4              LSLS     r4,r4,#19
00040e  42a0              CMP      r0,r4
000410  d310              BCC      |L1.1076|
;;;442            return ERROR;
;;;443        }
;;;444        while(len != 0){
000412  2a00              CMP      r2,#0
000414  d00b              BEQ      |L1.1070|
000416  2405              MOVS     r4,#5
000418  0724              LSLS     r4,r4,#28
                  |L1.1050|
00041a  6923              LDR      r3,[r4,#0x10]
00041c  07db              LSLS     r3,r3,#31
00041e  d009              BEQ      |L1.1076|
000420  0883              LSRS     r3,r0,#2
000422  009b              LSLS     r3,r3,#2
000424  681b              LDR      r3,[r3,#0]
;;;445            if(eeprom_word_get(read_addr,&read_temp) == ERROR){
;;;446                return ERROR;
;;;447            }
;;;448            read_addr += 4;
;;;449            *write_pt = read_temp;
000426  1d00              ADDS     r0,r0,#4
000428  c108              STM      r1!,{r3}
00042a  1e52              SUBS     r2,r2,#1
00042c  d1f5              BNE      |L1.1050|
                  |L1.1070|
;;;450            write_pt++;
;;;451            len--;
;;;452        }
;;;453        return SUCCESS;
;;;454    }
00042e  bc10              POP      {r4}
000430  2001              MOVS     r0,#1                 ;453
000432  4770              BX       lr
                  |L1.1076|
000434  bc10              POP      {r4}
000436  2000              MOVS     r0,#0                 ;446
000438  4770              BX       lr
;;;455    
                          ENDP

                  eeprom_protect PROC
;;;494    */
;;;495    void eeprom_protect(uint8_t protect_page)
00043a  490a              LDR      r1,|L1.1124|
;;;496    {
;;;497        EFLASH_UNLOCK = EFLASH_UNLOCK_KEY;
00043c  4a08              LDR      r2,|L1.1120|
00043e  604a              STR      r2,[r1,#4]
;;;498        if(protect_page > EEPROM_LOCK_MAX_PAGE){
000440  2824              CMP      r0,#0x24
000442  d900              BLS      |L1.1094|
;;;499            protect_page = EEPROM_LOCK_MAX_PAGE;
000444  2024              MOVS     r0,#0x24
                  |L1.1094|
;;;500        }
;;;501        EEPROM_LOCK_SIZE = protect_page;
000446  60c8              STR      r0,[r1,#0xc]
;;;502        /* enable eeprom protect range illegal access interrupt */
;;;503        SYS_INTEN |= SYS_INTEN_EPOT;
000448  4807              LDR      r0,|L1.1128|
00044a  6841              LDR      r1,[r0,#4]
00044c  2210              MOVS     r2,#0x10
00044e  4311              ORRS     r1,r1,r2
000450  6041              STR      r1,[r0,#4]
000452  4906              LDR      r1,|L1.1132|
000454  2002              MOVS     r0,#2
000456  6008              STR      r0,[r1,#0]
;;;504        NVIC_EnableIRQ(SYS_IRQn);
;;;505    }
000458  4770              BX       lr
;;;506    
                          ENDP

00045a  0000              DCW      0x0000
                  |L1.1116|
                          DCD      0x40000800
                  |L1.1120|
                          DCD      0xab23dc54
                  |L1.1124|
                          DCD      0x50000200
                  |L1.1128|
                          DCD      0x50010100
                  |L1.1132|
                          DCD      0xe000e100

;*** Start embedded assembler ***

#line 1 "RTE\\Device\\BF7006AM64\\BF7006AMxx_eflash.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___19_BF7006AMxx_eflash_c_78314db4____REV16|
#line 447 ".\\RTE\\CMSIS\\BF7006AM64\\cmsis_armcc.h"
|__asm___19_BF7006AMxx_eflash_c_78314db4____REV16| PROC
#line 448

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___19_BF7006AMxx_eflash_c_78314db4____REVSH|
#line 462
|__asm___19_BF7006AMxx_eflash_c_78314db4____REVSH| PROC
#line 463

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

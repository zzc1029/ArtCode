; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--list --debug -c --asm --interleave --gnu -o.\obj\bf7006amxx_sysctrl.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\obj\bf7006amxx_sysctrl.d --cpu=Cortex-M0 --apcs=interwork -Otime --diag_suppress=9931 -I.\src\pt -I.\src -I.\config -I.\RTE\CMSIS\BF7006AM64 -I.\RTE\Device\BF7006AM64 -I.\RTE\SEGGER -I.\RTE\Startup\BF7006AM64 -I.\RTE\_b40 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.8.0\CMSIS\Core\Include -IC:\Keil_v5\ARM\PACK\BYD\BYDMicro_DFP\1.1.0\Device\Include\BF7006AMxx -D__UVISION_VERSION=536 -D_RTE_ -D_RTE_ --omf_browse=.\obj\bf7006amxx_sysctrl.crf RTE\Device\BF7006AM64\BF7006AMxx_sysctrl.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  sci1_port_sel PROC
;;;22     */
;;;23     void sci1_port_sel(uint8_t port_sel)
000000  49ac              LDR      r1,|L1.692|
;;;24     {
;;;25         SYS_PTSEL = port_sel;
000002  6008              STR      r0,[r1,#0]
;;;26     }
000004  4770              BX       lr
;;;27     
                          ENDP

                  xtal_init PROC
;;;93     */
;;;94     ErrorStatus xtal_init(void)
000006  b4f0              PUSH     {r4-r7}
;;;95     {
;;;96         uint32_t timeout = 300000U;
;;;97         SYS_XTAL_CTRL |= SYS_XTAL_CTRL_EN;
000008  4caa              LDR      r4,|L1.692|
00000a  48ab              LDR      r0,|L1.696|
00000c  6861              LDR      r1,[r4,#4]
00000e  2601              MOVS     r6,#1
000010  4331              ORRS     r1,r1,r6
000012  6061              STR      r1,[r4,#4]
;;;98         SYS_INTEN |= SYS_INTEN_XTALINIT;
000014  49a9              LDR      r1,|L1.700|
000016  684a              LDR      r2,[r1,#4]
000018  4332              ORRS     r2,r2,r6
00001a  604a              STR      r2,[r1,#4]
00001c  4ba8              LDR      r3,|L1.704|
00001e  2202              MOVS     r2,#2
000020  601a              STR      r2,[r3,#0]
;;;99         NVIC_EnableIRQ(SYS_IRQn);
;;;100        SYS_XTAL_INIT = 0x00U;
000022  2500              MOVS     r5,#0
000024  614d              STR      r5,[r1,#0x14]
;;;101        SYS_XTAL_INIT &= ~SYS_XTAL_INIT_RSTEN;
000026  694b              LDR      r3,[r1,#0x14]
000028  4393              BICS     r3,r3,r2
00002a  614b              STR      r3,[r1,#0x14]
;;;102        SYS_XTAL_INIT |= SYS_XTAL_INIT_EN;
00002c  694b              LDR      r3,[r1,#0x14]
00002e  4333              ORRS     r3,r3,r6
000030  614b              STR      r3,[r1,#0x14]
;;;103        xtal_timeout = 0U;
000032  4ba4              LDR      r3,|L1.708|
000034  701d              STRB     r5,[r3,#0]
                  |L1.54|
;;;104        while(timeout != 0x00U){
;;;105            timeout --;
;;;106            if((SYS_XTAL_CTRL & SYS_XTAL_CTRL_INIT) != 0x00U){  //xtal initialize success then enable xtal invalid check
000036  6867              LDR      r7,[r4,#4]
000038  1e40              SUBS     r0,r0,#1
00003a  073f              LSLS     r7,r7,#28
00003c  d515              BPL      |L1.106|
;;;107                SYS_XTAL_CHK = 0x00U;
00003e  60cd              STR      r5,[r1,#0xc]
;;;108                SYS_XTAL_CHK |= SYS_XTAL_CHK_EN;
000040  68c8              LDR      r0,[r1,#0xc]
000042  4330              ORRS     r0,r0,r6
000044  60c8              STR      r0,[r1,#0xc]
;;;109                SYS_XTAL_CHK |= SYS_XTAL_CHK_RSTEN;
000046  68c8              LDR      r0,[r1,#0xc]
000048  4310              ORRS     r0,r0,r2
00004a  60c8              STR      r0,[r1,#0xc]
;;;110                SYS_INTEN |= SYS_INTEN_XTALCHK;
00004c  6848              LDR      r0,[r1,#4]
00004e  4310              ORRS     r0,r0,r2
000050  6048              STR      r0,[r1,#4]
;;;111                SYS_XTAL_INIT |= SYS_XTAL_INIT_RSTEN;
000052  6948              LDR      r0,[r1,#0x14]
000054  4310              ORRS     r0,r0,r2
000056  6148              STR      r0,[r1,#0x14]
;;;112                SYS_XTAL_INIT |= SYS_XTAL_INIT_EN;
000058  6948              LDR      r0,[r1,#0x14]
00005a  4330              ORRS     r0,r0,r6
00005c  6148              STR      r0,[r1,#0x14]
;;;113                SYS_INTEN |= SYS_INTEN_XTALINIT;
00005e  6848              LDR      r0,[r1,#4]
000060  4330              ORRS     r0,r0,r6
000062  6048              STR      r0,[r1,#4]
;;;114                return SUCCESS;
;;;115            }
;;;116            if(xtal_timeout != 0x00U){
;;;117                SYS_XTAL_CTRL &= ~SYS_XTAL_CTRL_EN;             //xtal initialize error then disable xtal
;;;118                return ERROR;
;;;119            }
;;;120        }
;;;121        SYS_XTAL_CTRL &= ~SYS_XTAL_CTRL_EN;                     //xtal initialize error then disable xtal
;;;122        return ERROR;
;;;123    }
000064  bcf0              POP      {r4-r7}
000066  2001              MOVS     r0,#1                 ;114
000068  4770              BX       lr
                  |L1.106|
00006a  781f              LDRB     r7,[r3,#0]            ;116  ; xtal_timeout
00006c  2f00              CMP      r7,#0                 ;116
00006e  d101              BNE      |L1.116|
000070  2800              CMP      r0,#0                 ;104
000072  d1e0              BNE      |L1.54|
                  |L1.116|
000074  6860              LDR      r0,[r4,#4]            ;121
000076  0840              LSRS     r0,r0,#1              ;121
000078  0040              LSLS     r0,r0,#1              ;121
00007a  6060              STR      r0,[r4,#4]            ;121
00007c  bcf0              POP      {r4-r7}
00007e  2000              MOVS     r0,#0                 ;122
000080  4770              BX       lr
;;;124    
                          ENDP

                  system_clk_sel PROC
;;;42     */
;;;43     void system_clk_sel(uint32_t pll_source_sel,uint32_t clk_sel,uint8_t xtal_freq)
000082  b5f0              PUSH     {r4-r7,lr}
;;;44     {
000084  460c              MOV      r4,r1
000086  4615              MOV      r5,r2
000088  4606              MOV      r6,r0
;;;45         ErrorStatus rval;
;;;46         if((pll_source_sel == SYS_PLL_SEL_RC1M) && (clk_sel != SYS_CLK_XTAL)){
00008a  498f              LDR      r1,|L1.712|
;;;47             SYS_PLL_SOURCE_SEL = pll_source_sel;
;;;48             SYS_CLK_SEL = clk_sel;
;;;49             if(clk_sel == SYS_CLK_32M){
;;;50                 SystemCoreClock = (uint32_t)32000000;
;;;51             }else if(clk_sel == SYS_CLK_16M){
;;;52                 SystemCoreClock = (uint32_t)16000000;
;;;53             }else if(clk_sel == SYS_CLK_8M){
;;;54                 SystemCoreClock = (uint32_t)8000000;
00008c  4a8f              LDR      r2,|L1.716|
00008e  4f90              LDR      r7,|L1.720|
000090  4888              LDR      r0,|L1.692|
000092  428e              CMP      r6,r1                 ;46
000094  d114              BNE      |L1.192|
000096  498f              LDR      r1,|L1.724|
000098  428c              CMP      r4,r1                 ;46
00009a  d011              BEQ      |L1.192|
00009c  6086              STR      r6,[r0,#8]            ;47
00009e  60c4              STR      r4,[r0,#0xc]          ;48
0000a0  488d              LDR      r0,|L1.728|
0000a2  4284              CMP      r4,r0                 ;49
0000a4  d101              BNE      |L1.170|
0000a6  0090              LSLS     r0,r2,#2              ;50
0000a8  e003              B        |L1.178|
                  |L1.170|
0000aa  488c              LDR      r0,|L1.732|
0000ac  4284              CMP      r4,r0                 ;51
0000ae  d102              BNE      |L1.182|
0000b0  488b              LDR      r0,|L1.736|
                  |L1.178|
0000b2  6038              STR      r0,[r7,#0]            ;50  ; SystemCoreClock
                  |L1.180|
;;;55             }
;;;56         }else{
;;;57             if(xtal_freq == 0x01U){
;;;58                 SystemCoreClock = (uint32_t)16000000;
;;;59             }else if(xtal_freq == 0x02U){
;;;60                 SystemCoreClock = (uint32_t)12000000;
;;;61             }else if(xtal_freq == 0x03U){
;;;62                 SystemCoreClock = (uint32_t)8000000;
;;;63             }
;;;64             if((SYS_XTAL_CTRL & SYS_XTAL_CTRL_INIT) == 0U){
;;;65                 rval = xtal_init();
;;;66                 if(rval == ERROR){
;;;67                     pll_source_sel = SYS_PLL_SEL_RC1M;
;;;68                     if(xtal_freq == 0x01U){
;;;69                         clk_sel = SYS_CLK_16M;
;;;70                     }else if(xtal_freq == 0x02U){
;;;71                         clk_sel = SYS_CLK_16M;
;;;72                         SystemCoreClock = (uint32_t)16000000;
;;;73                     }else if(xtal_freq == 0x03U){
;;;74                         clk_sel = SYS_CLK_8M;
;;;75                     }else{
;;;76                         clk_sel = SYS_CLK_32M;
;;;77                         SystemCoreClock = (uint32_t)32000000;
;;;78                     }
;;;79                 }
;;;80             }
;;;81             SYS_PLL_SOURCE_SEL = pll_source_sel;
;;;82             SYS_CLK_SEL = clk_sel;
;;;83         }
;;;84     }
0000b4  bdf0              POP      {r4-r7,pc}
                  |L1.182|
0000b6  488b              LDR      r0,|L1.740|
0000b8  4284              CMP      r4,r0                 ;53
0000ba  d1fb              BNE      |L1.180|
0000bc  603a              STR      r2,[r7,#0]            ;54  ; SystemCoreClock
0000be  bdf0              POP      {r4-r7,pc}
                  |L1.192|
0000c0  2d01              CMP      r5,#1                 ;57
0000c2  d004              BEQ      |L1.206|
0000c4  2d02              CMP      r5,#2                 ;59
0000c6  d004              BEQ      |L1.210|
0000c8  2d03              CMP      r5,#3                 ;61
0000ca  d005              BEQ      |L1.216|
0000cc  e005              B        |L1.218|
                  |L1.206|
0000ce  4984              LDR      r1,|L1.736|
0000d0  e000              B        |L1.212|
                  |L1.210|
0000d2  4985              LDR      r1,|L1.744|
                  |L1.212|
0000d4  6039              STR      r1,[r7,#0]            ;60  ; SystemCoreClock
0000d6  e000              B        |L1.218|
                  |L1.216|
0000d8  603a              STR      r2,[r7,#0]            ;62  ; SystemCoreClock
                  |L1.218|
0000da  4876              LDR      r0,|L1.692|
0000dc  6840              LDR      r0,[r0,#4]            ;64
0000de  0700              LSLS     r0,r0,#28             ;64
0000e0  d40d              BMI      |L1.254|
0000e2  f7fffffe          BL       xtal_init
0000e6  2800              CMP      r0,#0                 ;66
0000e8  d109              BNE      |L1.254|
0000ea  4e77              LDR      r6,|L1.712|
0000ec  2d01              CMP      r5,#1                 ;68
0000ee  d00a              BEQ      |L1.262|
0000f0  2d02              CMP      r5,#2                 ;70
0000f2  d00a              BEQ      |L1.266|
0000f4  2d03              CMP      r5,#3                 ;73
0000f6  d00b              BEQ      |L1.272|
0000f8  4c77              LDR      r4,|L1.728|
0000fa  487c              LDR      r0,|L1.748|
                  |L1.252|
0000fc  6038              STR      r0,[r7,#0]            ;77  ; SystemCoreClock
                  |L1.254|
0000fe  486d              LDR      r0,|L1.692|
000100  6086              STR      r6,[r0,#8]            ;81
000102  60c4              STR      r4,[r0,#0xc]          ;82
000104  bdf0              POP      {r4-r7,pc}
                  |L1.262|
000106  4c75              LDR      r4,|L1.732|
000108  e7f9              B        |L1.254|
                  |L1.266|
00010a  4c74              LDR      r4,|L1.732|
00010c  4874              LDR      r0,|L1.736|
00010e  e7f5              B        |L1.252|
                  |L1.272|
000110  4c74              LDR      r4,|L1.740|
000112  e7f4              B        |L1.254|
;;;85     
                          ENDP

                  xtal_sleepdeep_pd PROC
;;;130    */
;;;131    void xtal_sleepdeep_pd(FunctionalState pd_en)
000114  4967              LDR      r1,|L1.692|
;;;132    {
;;;133        if(pd_en == ENABLE){
;;;134            SYS_XTAL_CTRL |= SYS_XTAL_CTRL_SLEEPPD;
000116  2202              MOVS     r2,#2
000118  2801              CMP      r0,#1                 ;133
;;;135        }else{
;;;136            SYS_XTAL_CTRL &= ~SYS_XTAL_CTRL_SLEEPPD;
00011a  6848              LDR      r0,[r1,#4]
00011c  d002              BEQ      |L1.292|
00011e  4390              BICS     r0,r0,r2
                  |L1.288|
000120  6048              STR      r0,[r1,#4]            ;134
;;;137        }
;;;138    }
000122  4770              BX       lr
                  |L1.292|
000124  4310              ORRS     r0,r0,r2              ;134
000126  e7fb              B        |L1.288|
;;;139    
                          ENDP

                  rc128k_pd PROC
;;;145    */
;;;146    void rc128k_pd(FunctionalState pd_en)
000128  4962              LDR      r1,|L1.692|
;;;147    {
;;;148        if(pd_en == ENABLE){
00012a  2801              CMP      r0,#1
;;;149            SYS_CLK_PD |= SYS_CLK_PD_RC128K;
;;;150        }else{
;;;151            SYS_CLK_PD &= ~SYS_CLK_PD_RC128K;
00012c  6948              LDR      r0,[r1,#0x14]
00012e  d003              BEQ      |L1.312|
000130  0840              LSRS     r0,r0,#1
000132  0040              LSLS     r0,r0,#1
                  |L1.308|
000134  6148              STR      r0,[r1,#0x14]         ;149
;;;152        }
;;;153    }
000136  4770              BX       lr
                  |L1.312|
000138  2201              MOVS     r2,#1                 ;149
00013a  4310              ORRS     r0,r0,r2              ;149
00013c  e7fa              B        |L1.308|
;;;154    
                          ENDP

                  clock_out PROC
;;;160    */
;;;161    void clock_out(uint8_t clk_source)
00013e  2803              CMP      r0,#3
;;;162    {
000140  d80f              BHI      |L1.354|
;;;163        if(clk_source > 3U){
;;;164            return;
;;;165        }
;;;166        SYS_CLK_OUT &= 0x37U;
000142  495c              LDR      r1,|L1.692|
000144  69ca              LDR      r2,[r1,#0x1c]
000146  2337              MOVS     r3,#0x37
000148  401a              ANDS     r2,r2,r3
00014a  61ca              STR      r2,[r1,#0x1c]
;;;167        SYS_CLK_OUT &= ~0x03U;
00014c  69ca              LDR      r2,[r1,#0x1c]
00014e  0892              LSRS     r2,r2,#2
000150  0092              LSLS     r2,r2,#2
000152  61ca              STR      r2,[r1,#0x1c]
;;;168        SYS_CLK_OUT |= 0x04U;
000154  69ca              LDR      r2,[r1,#0x1c]
000156  2304              MOVS     r3,#4
000158  431a              ORRS     r2,r2,r3
00015a  61ca              STR      r2,[r1,#0x1c]
;;;169        SYS_CLK_OUT |= clk_source;
00015c  69ca              LDR      r2,[r1,#0x1c]
00015e  4302              ORRS     r2,r2,r0
000160  61ca              STR      r2,[r1,#0x1c]
                  |L1.354|
;;;170    }
000162  4770              BX       lr
;;;171    
                          ENDP

                  clock2_out PROC
;;;177    */
;;;178    void clock2_out(uint8_t clk2_source)
000164  4953              LDR      r1,|L1.692|
;;;179    {
;;;180        SYS_CLK_OUT &= 0x37U;
000166  69ca              LDR      r2,[r1,#0x1c]
000168  2337              MOVS     r3,#0x37
00016a  401a              ANDS     r2,r2,r3
00016c  61ca              STR      r2,[r1,#0x1c]
;;;181        if(clk2_source == CLK2_OUT_XTAL_DIV_16){
;;;182            SYS_CLK_OUT &= ~0x30U;
00016e  2230              MOVS     r2,#0x30
000170  2820              CMP      r0,#0x20              ;181
000172  d005              BEQ      |L1.384|
;;;183            SYS_CLK_OUT |= clk2_source;
;;;184        }else if(clk2_source == CLK2_OUT_RC_250K){
000174  2810              CMP      r0,#0x10
000176  d003              BEQ      |L1.384|
;;;185            SYS_CLK_OUT &= ~0x30U;
;;;186            SYS_CLK_OUT |= clk2_source;
;;;187        }else{
;;;188            SYS_CLK_OUT &= ~0x30U;
000178  69c8              LDR      r0,[r1,#0x1c]
00017a  4390              BICS     r0,r0,r2
00017c  61c8              STR      r0,[r1,#0x1c]
;;;189        }
;;;190    }
00017e  4770              BX       lr
                  |L1.384|
000180  69cb              LDR      r3,[r1,#0x1c]         ;182
000182  4393              BICS     r3,r3,r2              ;182
000184  61cb              STR      r3,[r1,#0x1c]         ;182
000186  69ca              LDR      r2,[r1,#0x1c]         ;183
000188  4302              ORRS     r2,r2,r0              ;183
00018a  61ca              STR      r2,[r1,#0x1c]         ;183
00018c  4770              BX       lr
;;;191    
                          ENDP

                  system_intvector_offset PROC
;;;197    */
;;;198    void system_intvector_offset(uint32_t offset_addr)
00018e  4949              LDR      r1,|L1.692|
;;;199    {
;;;200        SYS_VECTOR_OFFSET = offset_addr;
000190  6108              STR      r0,[r1,#0x10]
;;;201    }
000192  4770              BX       lr
;;;202    
                          ENDP

                  system_int_cfg PROC
;;;216    */
;;;217    void system_int_cfg(uint8_t int_state,FunctionalState en_state)
000194  4a49              LDR      r2,|L1.700|
;;;218    {
;;;219        SYS_INTEN = int_state;
000196  6050              STR      r0,[r2,#4]
000198  2002              MOVS     r0,#2
;;;220        if(en_state == ENABLE){
00019a  2901              CMP      r1,#1
00019c  d006              BEQ      |L1.428|
00019e  4954              LDR      r1,|L1.752|
0001a0  6008              STR      r0,[r1,#0]            ;218
0001a2  f3bf8f4f          DSB                            ;218
0001a6  f3bf8f6f          ISB                            ;218
;;;221            NVIC_EnableIRQ(SYS_IRQn);
;;;222        }else{
;;;223            NVIC_DisableIRQ(SYS_IRQn);
;;;224        }
;;;225    }
0001aa  4770              BX       lr
                  |L1.428|
0001ac  4944              LDR      r1,|L1.704|
0001ae  6008              STR      r0,[r1,#0]
0001b0  4770              BX       lr
;;;226    
                          ENDP

                  system_intflg_get PROC
;;;232    */
;;;233    uint16_t system_intflg_get(void)
0001b2  4842              LDR      r0,|L1.700|
;;;234    {
;;;235        uint32_t retal;
;;;236        retal = SYS_INTFLG;
0001b4  6880              LDR      r0,[r0,#8]
;;;237        return (uint16_t)retal;
0001b6  b280              UXTH     r0,r0
;;;238    }
0001b8  4770              BX       lr
;;;239    
                          ENDP

                  system_intflg_clr PROC
;;;245    */
;;;246    void system_intflg_clr(uint16_t int_flg)
0001ba  4940              LDR      r1,|L1.700|
;;;247    {
;;;248        SYS_INTFLG = int_flg;
0001bc  6088              STR      r0,[r1,#8]
;;;249    }
0001be  4770              BX       lr
;;;250    
                          ENDP

                  lvdt_disable PROC
;;;296    */
;;;297    void lvdt_disable(void)
0001c0  483c              LDR      r0,|L1.692|
;;;298    {
;;;299        SYS_CLK_PD |= SYS_CLK_PD_LVDT;
0001c2  6941              LDR      r1,[r0,#0x14]
0001c4  2204              MOVS     r2,#4
0001c6  4311              ORRS     r1,r1,r2
0001c8  6141              STR      r1,[r0,#0x14]
;;;300    }
0001ca  4770              BX       lr
;;;301    
                          ENDP

                  lvdt_enable PROC
;;;285    */
;;;286    void lvdt_enable(void)
0001cc  4839              LDR      r0,|L1.692|
;;;287    {
;;;288        SYS_CLK_PD &= ~SYS_CLK_PD_LVDT;
0001ce  6941              LDR      r1,[r0,#0x14]
0001d0  2204              MOVS     r2,#4
0001d2  4391              BICS     r1,r1,r2
0001d4  6141              STR      r1,[r0,#0x14]
;;;289    }
0001d6  4770              BX       lr
;;;290    
                          ENDP

                  lvdt_init PROC
;;;258    */
;;;259    void lvdt_init(FunctionalState lvdt_en,uint8_t lvdt_vol_gear,FunctionalState int_en)
0001d8  b410              PUSH     {r4}
0001da  4b36              LDR      r3,|L1.692|
0001dc  2404              MOVS     r4,#4
;;;260    {
;;;261        if(lvdt_en == ENABLE){
0001de  2801              CMP      r0,#1
0001e0  d004              BEQ      |L1.492|
0001e2  6958              LDR      r0,[r3,#0x14]         ;260
0001e4  4320              ORRS     r0,r0,r4              ;260
0001e6  6158              STR      r0,[r3,#0x14]         ;260
                  |L1.488|
;;;262            if(lvdt_vol_gear > 3U){
;;;263                return ;
;;;264            }
;;;265            lvdt_enable();
;;;266            SYS_LVDT_CRL &= ~0x03U;
;;;267            SYS_LVDT_CRL |= lvdt_vol_gear;
;;;268            if(int_en == ENABLE){
;;;269                SYS_LVDT_IE = 0x01U;
;;;270                NVIC_EnableIRQ(LVDT_IRQn);
;;;271            }else{
;;;272                SYS_LVDT_IE = 0x00U;
;;;273                NVIC_DisableIRQ(LVDT_IRQn);
;;;274            }
;;;275        }else{
;;;276            lvdt_disable();
;;;277        }
;;;278    }
0001e8  bc10              POP      {r4}
0001ea  4770              BX       lr
                  |L1.492|
0001ec  2903              CMP      r1,#3                 ;262
0001ee  d8fb              BHI      |L1.488|
0001f0  6958              LDR      r0,[r3,#0x14]         ;262
0001f2  43a0              BICS     r0,r0,r4              ;262
0001f4  6158              STR      r0,[r3,#0x14]         ;262
0001f6  6a58              LDR      r0,[r3,#0x24]         ;266
0001f8  0880              LSRS     r0,r0,#2              ;266
0001fa  0080              LSLS     r0,r0,#2              ;266
0001fc  6258              STR      r0,[r3,#0x24]         ;266
0001fe  6a58              LDR      r0,[r3,#0x24]         ;267
000200  4308              ORRS     r0,r0,r1              ;267
000202  6258              STR      r0,[r3,#0x24]         ;267
000204  492d              LDR      r1,|L1.700|
000206  2310              MOVS     r3,#0x10              ;269
000208  2001              MOVS     r0,#1                 ;260
00020a  2a01              CMP      r2,#1                 ;268
00020c  d009              BEQ      |L1.546|
00020e  2000              MOVS     r0,#0                 ;272
000210  6188              STR      r0,[r1,#0x18]         ;272
000212  4837              LDR      r0,|L1.752|
000214  6003              STR      r3,[r0,#0]            ;272
000216  f3bf8f4f          DSB                            ;272
00021a  f3bf8f6f          ISB                            ;272
00021e  bc10              POP      {r4}
000220  4770              BX       lr
                  |L1.546|
000222  6188              STR      r0,[r1,#0x18]         ;269
000224  4826              LDR      r0,|L1.704|
000226  6003              STR      r3,[r0,#0]            ;269
000228  bc10              POP      {r4}
00022a  4770              BX       lr
;;;279    
                          ENDP

                  lvdt_int_flag_get PROC
;;;307    */
;;;308    uint8_t lvdt_int_flag_get(void)
00022c  4823              LDR      r0,|L1.700|
;;;309    {
;;;310        uint32_t rtal;
;;;311        rtal = SYS_LVDT_IF;
00022e  69c0              LDR      r0,[r0,#0x1c]
;;;312        return (uint8_t)rtal;
000230  b2c0              UXTB     r0,r0
;;;313    }
000232  4770              BX       lr
;;;314    
                          ENDP

                  lvdt_int_flag_clr PROC
;;;321    */
;;;322    void lvdt_int_flag_clr(uint8_t int_flag)
000234  4921              LDR      r1,|L1.700|
;;;323    {
;;;324        SYS_LVDT_IF = int_flag;
000236  61c8              STR      r0,[r1,#0x1c]
;;;325    }
000238  4770              BX       lr
;;;326    
                          ENDP

                  bor_disable PROC
;;;364    */
;;;365    void bor_disable(void)
00023a  481e              LDR      r0,|L1.692|
;;;366    {
;;;367        SYS_CLK_PD |= SYS_CLK_PD_BOR;
00023c  6941              LDR      r1,[r0,#0x14]
00023e  2202              MOVS     r2,#2
000240  4311              ORRS     r1,r1,r2
000242  6141              STR      r1,[r0,#0x14]
;;;368    }
000244  4770              BX       lr
;;;369    
                          ENDP

                  bor_filter_disable PROC
;;;386    */
;;;387    void bor_filter_disable(void)
000246  481b              LDR      r0,|L1.692|
;;;388    {
;;;389        SYS_LVDT_CRL &= ~0x04U;
000248  6a41              LDR      r1,[r0,#0x24]
00024a  2204              MOVS     r2,#4
00024c  4391              BICS     r1,r1,r2
00024e  6241              STR      r1,[r0,#0x24]
;;;390    }
000250  4770              BX       lr
;;;391    
                          ENDP

                  bor_filter_enbale PROC
;;;375    */
;;;376    void bor_filter_enbale(void)
000252  4818              LDR      r0,|L1.692|
;;;377    {
;;;378        SYS_LVDT_CRL |= 0x04U;
000254  6a41              LDR      r1,[r0,#0x24]
000256  2204              MOVS     r2,#4
000258  4311              ORRS     r1,r1,r2
00025a  6241              STR      r1,[r0,#0x24]
;;;379    }
00025c  4770              BX       lr
;;;380    
                          ENDP

                  bor_enbale PROC
;;;353    */
;;;354    void bor_enbale(void)
00025e  4815              LDR      r0,|L1.692|
;;;355    {
;;;356        SYS_CLK_PD &= ~SYS_CLK_PD_BOR;
000260  6941              LDR      r1,[r0,#0x14]
000262  2202              MOVS     r2,#2
000264  4391              BICS     r1,r1,r2
000266  6141              STR      r1,[r0,#0x14]
;;;357    }
000268  4770              BX       lr
;;;358    
                          ENDP

                  bor_init PROC
;;;333    */
;;;334    void bor_init(FunctionalState bor_en,FunctionalState filter_en)
00026a  2302              MOVS     r3,#2
00026c  4a11              LDR      r2,|L1.692|
;;;335    {
;;;336        if(bor_en == ENABLE){
00026e  2801              CMP      r0,#1
000270  6950              LDR      r0,[r2,#0x14]
000272  d002              BEQ      |L1.634|
000274  4318              ORRS     r0,r0,r3              ;335
000276  6150              STR      r0,[r2,#0x14]         ;335
;;;337            bor_enbale();
;;;338            if(filter_en == ENABLE){
;;;339                bor_filter_enbale();
;;;340            }else{
;;;341                bor_filter_disable();
;;;342            }
;;;343        }else{
;;;344            bor_disable();
;;;345        }
;;;346    }
000278  4770              BX       lr
                  |L1.634|
00027a  4398              BICS     r0,r0,r3
00027c  6150              STR      r0,[r2,#0x14]
00027e  2304              MOVS     r3,#4
000280  6a50              LDR      r0,[r2,#0x24]
000282  2901              CMP      r1,#1                 ;338
000284  d002              BEQ      |L1.652|
000286  4398              BICS     r0,r0,r3              ;338
                  |L1.648|
000288  6250              STR      r0,[r2,#0x24]         ;338
00028a  4770              BX       lr
                  |L1.652|
00028c  4318              ORRS     r0,r0,r3
00028e  e7fb              B        |L1.648|
;;;347    
                          ENDP

                  reset_filter PROC
;;;398    */
;;;399    void reset_filter(FunctionalState filter_en)
000290  4908              LDR      r1,|L1.692|
;;;400    {
;;;401        SYS_EXRST = 0x01U;
000292  2201              MOVS     r2,#1
000294  628a              STR      r2,[r1,#0x28]
;;;402        if(filter_en == ENABLE){
000296  2801              CMP      r0,#1
000298  d002              BEQ      |L1.672|
;;;403            SYS_EXFLT = 0x01U;
;;;404        }else{
;;;405            SYS_EXFLT = 0x00U;
00029a  2000              MOVS     r0,#0
00029c  62c8              STR      r0,[r1,#0x2c]
;;;406        }
;;;407    }
00029e  4770              BX       lr
                  |L1.672|
0002a0  62ca              STR      r2,[r1,#0x2c]         ;403
0002a2  4770              BX       lr
;;;408    
                          ENDP

                  rst_flag_get PROC
;;;414    */
;;;415    uint16_t rst_flag_get(void)
0002a4  4805              LDR      r0,|L1.700|
;;;416    {
;;;417    	uint32_t rtal;
;;;418    	rtal = SYS_RSTSTAT;
0002a6  6800              LDR      r0,[r0,#0]
;;;419    	return (uint16_t)rtal;
0002a8  b280              UXTH     r0,r0
;;;420    }
0002aa  4770              BX       lr
;;;421    
                          ENDP

                  rst_flag_clr PROC
;;;428    */
;;;429    void rst_flag_clr(uint16_t rst_flag)
0002ac  4903              LDR      r1,|L1.700|
;;;430    {
;;;431        SYS_RSTSTAT = rst_flag;
0002ae  6008              STR      r0,[r1,#0]
;;;432    }
0002b0  4770              BX       lr
;;;433    
                          ENDP

0002b2  0000              DCW      0x0000
                  |L1.692|
                          DCD      0x50010000
                  |L1.696|
                          DCD      0x000493e0
                  |L1.700|
                          DCD      0x50010100
                  |L1.704|
                          DCD      0xe000e100
                  |L1.708|
                          DCD      ||.data||
                  |L1.712|
                          DCD      0x0000acb3
                  |L1.716|
                          DCD      0x007a1200
                  |L1.720|
                          DCD      SystemCoreClock
                  |L1.724|
                          DCD      0x00007c6b
                  |L1.728|
                          DCD      0x00009abd
                  |L1.732|
                          DCD      0x00003ca2
                  |L1.736|
                          DCD      0x00f42400
                  |L1.740|
                          DCD      0x0000e78c
                  |L1.744|
                          DCD      0x00b71b00
                  |L1.748|
                          DCD      0x01e84800
                  |L1.752|
                          DCD      0xe000e180

                          AREA ||.data||, DATA, ALIGN=0

                  xtal_timeout
000000  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "RTE\\Device\\BF7006AM64\\BF7006AMxx_sysctrl.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___20_BF7006AMxx_sysctrl_c_0331466c____REV16|
#line 447 ".\\RTE\\CMSIS\\BF7006AM64\\cmsis_armcc.h"
|__asm___20_BF7006AMxx_sysctrl_c_0331466c____REV16| PROC
#line 448

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___20_BF7006AMxx_sysctrl_c_0331466c____REVSH|
#line 462
|__asm___20_BF7006AMxx_sysctrl_c_0331466c____REVSH| PROC
#line 463

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

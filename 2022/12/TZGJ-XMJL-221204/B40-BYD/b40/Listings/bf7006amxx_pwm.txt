; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--list --debug -c --asm --interleave --gnu -o.\obj\bf7006amxx_pwm.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\obj\bf7006amxx_pwm.d --cpu=Cortex-M0 --apcs=interwork -Otime --diag_suppress=9931 -I.\src\pt -I.\src -I.\config -I.\RTE\CMSIS\BF7006AM64 -I.\RTE\Device\BF7006AM64 -I.\RTE\SEGGER -I.\RTE\Startup\BF7006AM64 -I.\RTE\_b40 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.8.0\CMSIS\Core\Include -IC:\Keil_v5\ARM\PACK\BYD\BYDMicro_DFP\1.1.0\Device\Include\BF7006AMxx -D__UVISION_VERSION=536 -D_RTE_ -D_RTE_ --omf_browse=.\obj\bf7006amxx_pwm.crf RTE\Device\BF7006AM64\BF7006AMxx_pwm.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  pwm_init PROC
;;;23     */
;;;24     void pwm_init(uint8_t pwm_sc,uint16_t pwm_mod)
000000  4a66              LDR      r2,|L1.412|
;;;25     {
;;;26         PWM_MOD = pwm_mod;
000002  6091              STR      r1,[r2,#8]
;;;27         PWM_SC = pwm_sc;
000004  6010              STR      r0,[r2,#0]
;;;28         if((pwm_sc & PWM_SC_TOIE) != 0U){
000006  0641              LSLS     r1,r0,#25
000008  4865              LDR      r0,|L1.416|
00000a  d502              BPL      |L1.18|
00000c  4965              LDR      r1,|L1.420|
00000e  6008              STR      r0,[r1,#0]            ;25
;;;29             NVIC_EnableIRQ(PWM_TOF_IRQN);
;;;30         }else{
;;;31             NVIC_DisableIRQ(PWM_TOF_IRQN);
;;;32         }
;;;33     }
000010  4770              BX       lr
                  |L1.18|
000012  4965              LDR      r1,|L1.424|
000014  6008              STR      r0,[r1,#0]
000016  f3bf8f4f          DSB      
00001a  f3bf8f6f          ISB      
00001e  4770              BX       lr
;;;34     
                          ENDP

                  pwm_mod_set PROC
;;;40     */
;;;41     void pwm_mod_set(uint16_t mod_count)
000020  495e              LDR      r1,|L1.412|
;;;42     {
;;;43         PWM_MOD = mod_count;
000022  6088              STR      r0,[r1,#8]
;;;44     }
000024  4770              BX       lr
;;;45     
                          ENDP

                  pwm_get_count PROC
;;;51     */
;;;52     uint16_t pwm_get_count(void)
000026  485d              LDR      r0,|L1.412|
;;;53     {
;;;54         uint32_t rtal;
;;;55         rtal = PWM_CNT;
000028  6840              LDR      r0,[r0,#4]
;;;56         return (uint16_t)rtal;
00002a  b280              UXTH     r0,r0
;;;57     }
00002c  4770              BX       lr
;;;58     
                          ENDP

                  pwm_tof_clr PROC
;;;64     */
;;;65     void pwm_tof_clr(void)
00002e  485b              LDR      r0,|L1.412|
;;;66     {
;;;67         PWM_SC &= ~PWM_SC_TOF;
000030  6801              LDR      r1,[r0,#0]
000032  2280              MOVS     r2,#0x80
000034  4391              BICS     r1,r1,r2
000036  6001              STR      r1,[r0,#0]
;;;68     }
000038  4770              BX       lr
;;;69     
                          ENDP

                  pwm_ch0_init PROC
;;;76     */
;;;77     void pwm_ch0_init(uint8_t pwm_ch_sc,uint16_t pwm_ch_cnt)
00003a  4a58              LDR      r2,|L1.412|
;;;78     {
;;;79         PWM_C0V = pwm_ch_cnt;
00003c  6111              STR      r1,[r2,#0x10]
;;;80         PWM_C0SC = pwm_ch_sc;
00003e  60d0              STR      r0,[r2,#0xc]
;;;81         if((pwm_ch_sc & PWM_CnSC_IE) != 0U){
000040  0641              LSLS     r1,r0,#25
000042  2020              MOVS     r0,#0x20
000044  2900              CMP      r1,#0
000046  da02              BGE      |L1.78|
000048  4956              LDR      r1,|L1.420|
00004a  6008              STR      r0,[r1,#0]            ;78
;;;82             NVIC_EnableIRQ(PWM_CH0_IRQn);
;;;83         }else{
;;;84             NVIC_DisableIRQ(PWM_CH0_IRQn);
;;;85         }
;;;86     }
00004c  4770              BX       lr
                  |L1.78|
00004e  4956              LDR      r1,|L1.424|
000050  6008              STR      r0,[r1,#0]
000052  f3bf8f4f          DSB      
000056  f3bf8f6f          ISB      
00005a  4770              BX       lr
;;;87     
                          ENDP

                  pwm_ch0_cnt_set PROC
;;;93     */
;;;94     void pwm_ch0_cnt_set(uint16_t count)
00005c  494f              LDR      r1,|L1.412|
;;;95     {
;;;96         PWM_C0V = count;
00005e  6108              STR      r0,[r1,#0x10]
;;;97     }
000060  4770              BX       lr
;;;98     
                          ENDP

                  pwm_ch0_get_count PROC
;;;104    */
;;;105    uint16_t pwm_ch0_get_count(void)
000062  484e              LDR      r0,|L1.412|
;;;106    {
;;;107        uint32_t rtal;
;;;108        rtal = PWM_C0V;
000064  6900              LDR      r0,[r0,#0x10]
;;;109        return (uint16_t)rtal;
000066  b280              UXTH     r0,r0
;;;110    }
000068  4770              BX       lr
;;;111    
                          ENDP

                  pwm_ch0_if_clr PROC
;;;117    */
;;;118    void pwm_ch0_if_clr(void)
00006a  484c              LDR      r0,|L1.412|
;;;119    {
;;;120        PWM_C0SC &= ~PWM_CnSC_IF;
00006c  68c1              LDR      r1,[r0,#0xc]
00006e  2280              MOVS     r2,#0x80
000070  4391              BICS     r1,r1,r2
000072  60c1              STR      r1,[r0,#0xc]
;;;121    }
000074  4770              BX       lr
;;;122    
                          ENDP

                  pwm_ch1_init PROC
;;;129    */
;;;130    void pwm_ch1_init(uint8_t pwm_ch_sc,uint16_t pwm_ch_cnt)
000076  4a49              LDR      r2,|L1.412|
;;;131    {
;;;132        PWM_C1V = pwm_ch_cnt;
000078  6191              STR      r1,[r2,#0x18]
;;;133        PWM_C1SC = pwm_ch_sc;
00007a  6150              STR      r0,[r2,#0x14]
;;;134        if((pwm_ch_sc & PWM_CnSC_IE) != 0U){
00007c  0641              LSLS     r1,r0,#25
00007e  2040              MOVS     r0,#0x40
000080  2900              CMP      r1,#0
000082  da02              BGE      |L1.138|
000084  4947              LDR      r1,|L1.420|
000086  6008              STR      r0,[r1,#0]            ;131
;;;135            NVIC_EnableIRQ(PWM_CH1_IRQn);
;;;136        }else{
;;;137            NVIC_DisableIRQ(PWM_CH1_IRQn);
;;;138        }
;;;139    }
000088  4770              BX       lr
                  |L1.138|
00008a  4947              LDR      r1,|L1.424|
00008c  6008              STR      r0,[r1,#0]
00008e  f3bf8f4f          DSB      
000092  f3bf8f6f          ISB      
000096  4770              BX       lr
;;;140    
                          ENDP

                  pwm_ch1_cnt_set PROC
;;;146    */
;;;147    void pwm_ch1_cnt_set(uint16_t count)
000098  4940              LDR      r1,|L1.412|
;;;148    {
;;;149        PWM_C1V = count;
00009a  6188              STR      r0,[r1,#0x18]
;;;150    }
00009c  4770              BX       lr
;;;151    
                          ENDP

                  pwm_ch1_get_count PROC
;;;158    */
;;;159    uint16_t pwm_ch1_get_count(void)
00009e  483f              LDR      r0,|L1.412|
;;;160    {
;;;161        uint32_t rtal;
;;;162        rtal = PWM_C1V;
0000a0  6980              LDR      r0,[r0,#0x18]
;;;163        return (uint16_t)rtal;
0000a2  b280              UXTH     r0,r0
;;;164    }
0000a4  4770              BX       lr
;;;165    
                          ENDP

                  pwm_ch1_if_clr PROC
;;;171    */
;;;172    void pwm_ch1_if_clr(void)
0000a6  483d              LDR      r0,|L1.412|
;;;173    {
;;;174        PWM_C1SC &= ~PWM_CnSC_IF;
0000a8  6941              LDR      r1,[r0,#0x14]
0000aa  2280              MOVS     r2,#0x80
0000ac  4391              BICS     r1,r1,r2
0000ae  6141              STR      r1,[r0,#0x14]
;;;175    }
0000b0  4770              BX       lr
;;;176    
                          ENDP

                  pwm_ch2_init PROC
;;;183    */
;;;184    void pwm_ch2_init(uint8_t pwm_ch_sc,uint16_t pwm_ch_cnt)
0000b2  4a3a              LDR      r2,|L1.412|
;;;185    {
;;;186        PWM_C2V = pwm_ch_cnt;
0000b4  6211              STR      r1,[r2,#0x20]
;;;187        PWM_C2SC = pwm_ch_sc;
0000b6  61d0              STR      r0,[r2,#0x1c]
;;;188        if((pwm_ch_sc & PWM_CnSC_IE) != 0U){
0000b8  0641              LSLS     r1,r0,#25
0000ba  2080              MOVS     r0,#0x80
0000bc  2900              CMP      r1,#0
0000be  da02              BGE      |L1.198|
0000c0  4938              LDR      r1,|L1.420|
0000c2  6008              STR      r0,[r1,#0]            ;185
;;;189            NVIC_EnableIRQ(PWM_CH2_IRQn);
;;;190        }else{
;;;191            NVIC_DisableIRQ(PWM_CH2_IRQn);
;;;192        }
;;;193    }
0000c4  4770              BX       lr
                  |L1.198|
0000c6  4938              LDR      r1,|L1.424|
0000c8  6008              STR      r0,[r1,#0]
0000ca  f3bf8f4f          DSB      
0000ce  f3bf8f6f          ISB      
0000d2  4770              BX       lr
;;;194    
                          ENDP

                  pwm_ch2_cnt_set PROC
;;;200    */
;;;201    void pwm_ch2_cnt_set(uint16_t count)
0000d4  4931              LDR      r1,|L1.412|
;;;202    {
;;;203        PWM_C2V = count;
0000d6  6208              STR      r0,[r1,#0x20]
;;;204    }
0000d8  4770              BX       lr
;;;205    
                          ENDP

                  pwm_ch2_get_count PROC
;;;211    */
;;;212    uint16_t pwm_ch2_get_count(void)
0000da  4830              LDR      r0,|L1.412|
;;;213    {
;;;214        uint32_t rtal;
;;;215        rtal = PWM_C2V;
0000dc  6a00              LDR      r0,[r0,#0x20]
;;;216        return (uint16_t)rtal;
0000de  b280              UXTH     r0,r0
;;;217    }
0000e0  4770              BX       lr
;;;218    
                          ENDP

                  pwm_ch2_if_clr PROC
;;;224    */
;;;225    void pwm_ch2_if_clr(void)
0000e2  482e              LDR      r0,|L1.412|
;;;226    {
;;;227        PWM_C2SC &= ~PWM_CnSC_IF;
0000e4  69c1              LDR      r1,[r0,#0x1c]
0000e6  2280              MOVS     r2,#0x80
0000e8  4391              BICS     r1,r1,r2
0000ea  61c1              STR      r1,[r0,#0x1c]
;;;228    }
0000ec  4770              BX       lr
;;;229    
                          ENDP

                  pwm_ch3_init PROC
;;;236    */
;;;237    void pwm_ch3_init(uint8_t pwm_ch_sc,uint16_t pwm_ch_cnt)
0000ee  4a2b              LDR      r2,|L1.412|
;;;238    {
;;;239        PWM_C3V = pwm_ch_cnt;
0000f0  6291              STR      r1,[r2,#0x28]
;;;240        PWM_C3SC = pwm_ch_sc;
0000f2  6250              STR      r0,[r2,#0x24]
;;;241        if((pwm_ch_sc & PWM_CnSC_IE) != 0U){
0000f4  0641              LSLS     r1,r0,#25
0000f6  482d              LDR      r0,|L1.428|
0000f8  d502              BPL      |L1.256|
0000fa  492a              LDR      r1,|L1.420|
0000fc  6008              STR      r0,[r1,#0]            ;238
;;;242            NVIC_EnableIRQ(PWM_CH3_IRQn);
;;;243        }else{
;;;244            NVIC_DisableIRQ(PWM_CH3_IRQn);
;;;245        }
;;;246    }
0000fe  4770              BX       lr
                  |L1.256|
000100  4929              LDR      r1,|L1.424|
000102  6008              STR      r0,[r1,#0]
000104  f3bf8f4f          DSB      
000108  f3bf8f6f          ISB      
00010c  4770              BX       lr
;;;247    
                          ENDP

                  pwm_ch3_cnt_set PROC
;;;253    */
;;;254    void pwm_ch3_cnt_set(uint16_t count)
00010e  4923              LDR      r1,|L1.412|
;;;255    {
;;;256        PWM_C3V = count;
000110  6288              STR      r0,[r1,#0x28]
;;;257    }
000112  4770              BX       lr
;;;258    
                          ENDP

                  pwm_ch3_get_count PROC
;;;264    */
;;;265    uint16_t pwm_ch3_get_count(void)
000114  4821              LDR      r0,|L1.412|
;;;266    {
;;;267        uint32_t rtal;
;;;268        rtal = PWM_C3V;
000116  6a80              LDR      r0,[r0,#0x28]
;;;269        return (uint16_t)rtal;
000118  b280              UXTH     r0,r0
;;;270    }
00011a  4770              BX       lr
;;;271    
                          ENDP

                  pwm_ch3_if_clr PROC
;;;277    */
;;;278    void pwm_ch3_if_clr(void)
00011c  481f              LDR      r0,|L1.412|
;;;279    {
;;;280        PWM_C3SC &= ~PWM_CnSC_IF;
00011e  6a41              LDR      r1,[r0,#0x24]
000120  2280              MOVS     r2,#0x80
000122  4391              BICS     r1,r1,r2
000124  6241              STR      r1,[r0,#0x24]
;;;281    }
000126  4770              BX       lr
;;;282    
                          ENDP

                  pwm_ch4_init PROC
;;;289    */
;;;290    void pwm_ch4_init(uint8_t pwm_ch_sc,uint16_t pwm_ch_cnt)
000128  4a1c              LDR      r2,|L1.412|
;;;291    {
;;;292        PWM_C4V = pwm_ch_cnt;
00012a  6311              STR      r1,[r2,#0x30]
;;;293        PWM_C4SC = pwm_ch_sc;
00012c  62d0              STR      r0,[r2,#0x2c]
;;;294        if((pwm_ch_sc & PWM_CnSC_IE) != 0U){
00012e  0641              LSLS     r1,r0,#25
000130  481f              LDR      r0,|L1.432|
000132  d502              BPL      |L1.314|
000134  491b              LDR      r1,|L1.420|
000136  6008              STR      r0,[r1,#0]            ;291
;;;295            NVIC_EnableIRQ(PWM_CH4_IRQn);
;;;296        }else{
;;;297            NVIC_DisableIRQ(PWM_CH4_IRQn);
;;;298        }
;;;299    }
000138  4770              BX       lr
                  |L1.314|
00013a  491b              LDR      r1,|L1.424|
00013c  6008              STR      r0,[r1,#0]
00013e  f3bf8f4f          DSB      
000142  f3bf8f6f          ISB      
000146  4770              BX       lr
;;;300    
                          ENDP

                  pwm_ch4_cnt_set PROC
;;;306    */
;;;307    void pwm_ch4_cnt_set(uint16_t count)
000148  4914              LDR      r1,|L1.412|
;;;308    {
;;;309        PWM_C4V = count;
00014a  6308              STR      r0,[r1,#0x30]
;;;310    }
00014c  4770              BX       lr
;;;311    
                          ENDP

                  pwm_ch4_get_count PROC
;;;317    */
;;;318    uint16_t pwm_ch4_get_count(void)
00014e  4813              LDR      r0,|L1.412|
;;;319    {
;;;320        uint32_t rtal;
;;;321        rtal = PWM_C4V;
000150  6b00              LDR      r0,[r0,#0x30]
;;;322        return (uint16_t)rtal;
000152  b280              UXTH     r0,r0
;;;323    }
000154  4770              BX       lr
;;;324    
                          ENDP

                  pwm_ch4_if_clr PROC
;;;330    */
;;;331    void pwm_ch4_if_clr(void)
000156  4811              LDR      r0,|L1.412|
;;;332    {
;;;333        PWM_C4SC &= ~PWM_CnSC_IF;
000158  6ac1              LDR      r1,[r0,#0x2c]
00015a  2280              MOVS     r2,#0x80
00015c  4391              BICS     r1,r1,r2
00015e  62c1              STR      r1,[r0,#0x2c]
;;;334    }
000160  4770              BX       lr
;;;335    
                          ENDP

                  pwm_ch5_init PROC
;;;342    */
;;;343    void pwm_ch5_init(uint8_t pwm_ch_sc,uint16_t pwm_ch_cnt)
000162  4a0e              LDR      r2,|L1.412|
;;;344    {
;;;345        PWM_C5V = pwm_ch_cnt;
000164  6391              STR      r1,[r2,#0x38]
;;;346        PWM_C5SC = pwm_ch_sc;
000166  6350              STR      r0,[r2,#0x34]
;;;347        if((pwm_ch_sc & PWM_CnSC_IE) != 0U){
000168  0641              LSLS     r1,r0,#25
00016a  4812              LDR      r0,|L1.436|
00016c  d502              BPL      |L1.372|
00016e  490d              LDR      r1,|L1.420|
000170  6008              STR      r0,[r1,#0]            ;344
;;;348            NVIC_EnableIRQ(PWM_CH5_IRQn);
;;;349        }else{
;;;350            NVIC_DisableIRQ(PWM_CH5_IRQn);
;;;351        }
;;;352    }
000172  4770              BX       lr
                  |L1.372|
000174  490c              LDR      r1,|L1.424|
000176  6008              STR      r0,[r1,#0]
000178  f3bf8f4f          DSB      
00017c  f3bf8f6f          ISB      
000180  4770              BX       lr
;;;353    
                          ENDP

                  pwm_ch5_cnt_set PROC
;;;359    */
;;;360    void pwm_ch5_cnt_set(uint16_t count)
000182  4906              LDR      r1,|L1.412|
;;;361    {
;;;362        PWM_C5V = count;
000184  6388              STR      r0,[r1,#0x38]
;;;363    }
000186  4770              BX       lr
;;;364    
                          ENDP

                  pwm_ch5_get_count PROC
;;;370    */
;;;371    uint16_t pwm_ch5_get_count(void)
000188  4804              LDR      r0,|L1.412|
;;;372    {
;;;373        uint32_t rtal;
;;;374        rtal = PWM_C5V;
00018a  6b80              LDR      r0,[r0,#0x38]
;;;375        return (uint16_t)rtal;
00018c  b280              UXTH     r0,r0
;;;376    }
00018e  4770              BX       lr
;;;377    
                          ENDP

                  pwm_ch5_if_clr PROC
;;;383    */
;;;384    void pwm_ch5_if_clr(void)
000190  4802              LDR      r0,|L1.412|
;;;385    {
;;;386        PWM_C5SC &= ~PWM_CnSC_IF;
000192  6b41              LDR      r1,[r0,#0x34]
000194  2280              MOVS     r2,#0x80
000196  4391              BICS     r1,r1,r2
000198  6341              STR      r1,[r0,#0x34]
;;;387    }
00019a  4770              BX       lr
                          ENDP

                  |L1.412|
                          DCD      0x50060000
                  |L1.416|
                          DCD      0x00000800
                  |L1.420|
                          DCD      0xe000e100
                  |L1.424|
                          DCD      0xe000e180
                  |L1.428|
                          DCD      0x00000100
                  |L1.432|
                          DCD      0x00000200
                  |L1.436|
                          DCD      0x00000400

;*** Start embedded assembler ***

#line 1 "RTE\\Device\\BF7006AM64\\BF7006AMxx_pwm.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___16_BF7006AMxx_pwm_c_pwm_init____REV16|
#line 447 ".\\RTE\\CMSIS\\BF7006AM64\\cmsis_armcc.h"
|__asm___16_BF7006AMxx_pwm_c_pwm_init____REV16| PROC
#line 448

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___16_BF7006AMxx_pwm_c_pwm_init____REVSH|
#line 462
|__asm___16_BF7006AMxx_pwm_c_pwm_init____REVSH| PROC
#line 463

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--list --debug -c --asm --interleave --gnu -o.\obj\bf7006amxx_rtc.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\obj\bf7006amxx_rtc.d --cpu=Cortex-M0 --apcs=interwork -Otime --diag_suppress=9931 -I.\src\pt -I.\src -I.\config -I.\RTE\CMSIS\BF7006AM64 -I.\RTE\Device\BF7006AM64 -I.\RTE\SEGGER -I.\RTE\Startup\BF7006AM64 -I.\RTE\_b40 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.8.0\CMSIS\Core\Include -IC:\Keil_v5\ARM\PACK\BYD\BYDMicro_DFP\1.1.0\Device\Include\BF7006AMxx -D__UVISION_VERSION=536 -D_RTE_ -D_RTE_ --omf_browse=.\obj\bf7006amxx_rtc.crf RTE\Device\BF7006AM64\BF7006AMxx_rtc.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  rtc_init PROC
;;;21     */
;;;22     void rtc_init(uint16_t rtc_sc,uint32_t rtc_mod)
000000  b570              PUSH     {r4-r6,lr}
;;;23     {
000002  4604              MOV      r4,r0
;;;24     	ErrorStatus rval;
;;;25     	if((rtc_sc & RTC_SC_CLK_SEL) == RTC_CLK_SEL_XTAL_DIV32)
000004  0640              LSLS     r0,r0,#25
000006  0f80              LSRS     r0,r0,#30
000008  460d              MOV      r5,r1                 ;23
00000a  2801              CMP      r0,#1
00000c  d109              BNE      |L1.34|
;;;26     	{
;;;27     		if((SYS_XTAL_CTRL & SYS_XTAL_CTRL_INIT) == 0U){
00000e  482e              LDR      r0,|L1.200|
000010  6840              LDR      r0,[r0,#4]
000012  0700              LSLS     r0,r0,#28
000014  d405              BMI      |L1.34|
;;;28     			rval = xtal_init();
000016  f7fffffe          BL       xtal_init
;;;29     			if(rval == ERROR){
00001a  2800              CMP      r0,#0
00001c  d101              BNE      |L1.34|
;;;30     				rtc_sc &= ~RTC_SC_CLK_SEL;
00001e  2060              MOVS     r0,#0x60
000020  4384              BICS     r4,r4,r0
                  |L1.34|
;;;31     				rtc_sc |= RTC_CLK_SEL_1K;
;;;32     			}
;;;33     		}
;;;34     	}
;;;35     	RTC_SC = rtc_sc;
000022  482a              LDR      r0,|L1.204|
000024  6004              STR      r4,[r0,#0]
;;;36     	RTC_MOD = rtc_mod;
000026  6085              STR      r5,[r0,#8]
000028  4829              LDR      r0,|L1.208|
;;;37     	if((rtc_sc & RTC_SC_IE) != 0U){
00002a  06e1              LSLS     r1,r4,#27
00002c  d502              BPL      |L1.52|
00002e  4929              LDR      r1,|L1.212|
000030  6008              STR      r0,[r1,#0]
;;;38     		NVIC_EnableIRQ(RTC_IRQn);
;;;39     	}else{
;;;40     		NVIC_DisableIRQ(RTC_IRQn);
;;;41     	}
;;;42     }
000032  bd70              POP      {r4-r6,pc}
                  |L1.52|
000034  4928              LDR      r1,|L1.216|
000036  6008              STR      r0,[r1,#0]
000038  f3bf8f4f          DSB      
00003c  f3bf8f6f          ISB      
000040  bd70              POP      {r4-r6,pc}
;;;43     
                          ENDP

                  rtc_mod_set PROC
;;;49     */
;;;50     void rtc_mod_set(uint16_t rtc_mod)
000042  4922              LDR      r1,|L1.204|
;;;51     {
;;;52     	RTC_MOD = rtc_mod;
000044  6088              STR      r0,[r1,#8]
;;;53     }
000046  4770              BX       lr
;;;54     
                          ENDP

                  rtc_cnt_get PROC
;;;60     */
;;;61     uint16_t rtc_cnt_get(void)
000048  4820              LDR      r0,|L1.204|
;;;62     {
;;;63     	return RTC_CNT;
00004a  6840              LDR      r0,[r0,#4]
00004c  b280              UXTH     r0,r0
;;;64     }
00004e  4770              BX       lr
;;;65     
                          ENDP

                  rtc_enable PROC
;;;71     */
;;;72     void rtc_enable(void)
000050  481e              LDR      r0,|L1.204|
;;;73     {
;;;74     	RTC_SC |= RTC_ENABLE;
000052  6801              LDR      r1,[r0,#0]
000054  2201              MOVS     r2,#1
000056  0252              LSLS     r2,r2,#9
000058  4311              ORRS     r1,r1,r2
00005a  6001              STR      r1,[r0,#0]
;;;75     }
00005c  4770              BX       lr
;;;76     
                          ENDP

                  rtc_disable PROC
;;;82     */
;;;83     void rtc_disable(void)
00005e  481b              LDR      r0,|L1.204|
;;;84     {
;;;85     	RTC_SC &= ~RTC_ENABLE;
000060  6801              LDR      r1,[r0,#0]
000062  2201              MOVS     r2,#1
000064  0252              LSLS     r2,r2,#9
000066  4391              BICS     r1,r1,r2
000068  6001              STR      r1,[r0,#0]
;;;86     }
00006a  4770              BX       lr
;;;87     
                          ENDP

                  rtc_int_enable PROC
;;;93     */
;;;94     void rtc_int_enable(void)
00006c  4817              LDR      r0,|L1.204|
;;;95     {
;;;96     	RTC_SC |= RTC_INT_ENABLE;
00006e  6801              LDR      r1,[r0,#0]
000070  2210              MOVS     r2,#0x10
000072  4311              ORRS     r1,r1,r2
000074  6001              STR      r1,[r0,#0]
000076  4917              LDR      r1,|L1.212|
000078  0550              LSLS     r0,r2,#21
00007a  6008              STR      r0,[r1,#0]
;;;97     	NVIC_EnableIRQ(RTC_IRQn);
;;;98     }
00007c  4770              BX       lr
;;;99     
                          ENDP

                  rtc_int_disable PROC
;;;105    */
;;;106    void rtc_int_disable(void)
00007e  4813              LDR      r0,|L1.204|
;;;107    {
;;;108    	RTC_SC &= ~RTC_INT_ENABLE;
000080  6801              LDR      r1,[r0,#0]
000082  2210              MOVS     r2,#0x10
000084  4391              BICS     r1,r1,r2
000086  6001              STR      r1,[r0,#0]
000088  4913              LDR      r1,|L1.216|
00008a  0550              LSLS     r0,r2,#21
00008c  6008              STR      r0,[r1,#0]
00008e  f3bf8f4f          DSB      
000092  f3bf8f6f          ISB      
;;;109    	NVIC_DisableIRQ(RTC_IRQn);
;;;110    }
000096  4770              BX       lr
;;;111    
                          ENDP

                  rtc_int_flag_get PROC
;;;117    */
;;;118    FlagStatus rtc_int_flag_get(void)
000098  480c              LDR      r0,|L1.204|
;;;119    {
;;;120    	FlagStatus state;
;;;121    	if((RTC_SC & RTC_SC_IF) != 0U){
00009a  6800              LDR      r0,[r0,#0]
00009c  0600              LSLS     r0,r0,#24
00009e  d501              BPL      |L1.164|
;;;122    		state = SET;
0000a0  2001              MOVS     r0,#1
;;;123    	}else{
;;;124    		state = RESET;
;;;125    	}
;;;126    	return state;
;;;127    }
0000a2  4770              BX       lr
                  |L1.164|
0000a4  2000              MOVS     r0,#0                 ;124
0000a6  4770              BX       lr
;;;128    
                          ENDP

                  rtc_int_flag_clr PROC
;;;134    */
;;;135    void rtc_int_flag_clr(void)
0000a8  4808              LDR      r0,|L1.204|
;;;136    {
;;;137    	RTC_SC |= RTC_SC_IF;
0000aa  6801              LDR      r1,[r0,#0]
0000ac  2280              MOVS     r2,#0x80
0000ae  4311              ORRS     r1,r1,r2
0000b0  6001              STR      r1,[r0,#0]
;;;138    }
0000b2  4770              BX       lr
;;;139    
                          ENDP

                  rtc_clk_sel PROC
;;;146    */
;;;147    void rtc_clk_sel(uint8_t clk_sel)
0000b4  4905              LDR      r1,|L1.204|
;;;148    {
;;;149    	RTC_SC &= ~RTC_SC_CLK_SEL;
0000b6  680a              LDR      r2,[r1,#0]
0000b8  2360              MOVS     r3,#0x60
0000ba  439a              BICS     r2,r2,r3
0000bc  600a              STR      r2,[r1,#0]
;;;150    	RTC_SC |= clk_sel;
0000be  680a              LDR      r2,[r1,#0]
0000c0  4302              ORRS     r2,r2,r0
0000c2  600a              STR      r2,[r1,#0]
;;;151    }
0000c4  4770              BX       lr
                          ENDP

0000c6  0000              DCW      0x0000
                  |L1.200|
                          DCD      0x50010000
                  |L1.204|
                          DCD      0x50070000
                  |L1.208|
                          DCD      0x02000000
                  |L1.212|
                          DCD      0xe000e100
                  |L1.216|
                          DCD      0xe000e180

;*** Start embedded assembler ***

#line 1 "RTE\\Device\\BF7006AM64\\BF7006AMxx_rtc.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___16_BF7006AMxx_rtc_c_rtc_init____REV16|
#line 447 ".\\RTE\\CMSIS\\BF7006AM64\\cmsis_armcc.h"
|__asm___16_BF7006AMxx_rtc_c_rtc_init____REV16| PROC
#line 448

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___16_BF7006AMxx_rtc_c_rtc_init____REVSH|
#line 462
|__asm___16_BF7006AMxx_rtc_c_rtc_init____REVSH| PROC
#line 463

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--list --debug -c --asm --interleave --gnu -o.\obj\bf7006amxx_can.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\obj\bf7006amxx_can.d --cpu=Cortex-M0 --apcs=interwork -Otime --diag_suppress=9931 -I.\src\pt -I.\src -I.\config -I.\RTE\CMSIS\BF7006AM64 -I.\RTE\Device\BF7006AM64 -I.\RTE\SEGGER -I.\RTE\Startup\BF7006AM64 -I.\RTE\_b40 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.8.0\CMSIS\Core\Include -IC:\Keil_v5\ARM\PACK\BYD\BYDMicro_DFP\1.1.0\Device\Include\BF7006AMxx -D__UVISION_VERSION=536 -D_RTE_ -D_RTE_ --omf_browse=.\obj\bf7006amxx_can.crf RTE\Device\BF7006AM64\BF7006AMxx_can.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  can_int_enable PROC
;;;698    */
;;;699    void can_int_enable(uint8_t intstate)
000000  49fa              LDR      r1,|L1.1004|
;;;700    {
;;;701    	CAN_IE |= intstate;
000002  690a              LDR      r2,[r1,#0x10]
000004  4302              ORRS     r2,r2,r0
000006  610a              STR      r2,[r1,#0x10]
;;;702    }
000008  4770              BX       lr
;;;703    
                          ENDP

                  can_module_rst PROC
;;;804    */
;;;805    void can_module_rst(void)
00000a  48f9              LDR      r0,|L1.1008|
;;;806    {
;;;807    	SYS_CAN_RST = 0x00U;
00000c  2100              MOVS     r1,#0
00000e  6041              STR      r1,[r0,#4]
;;;808    	SYS_CAN_RST = 0x01U;
000010  2101              MOVS     r1,#1
000012  6041              STR      r1,[r0,#4]
;;;809    }
000014  4770              BX       lr
;;;810    
                          ENDP

                  can_init PROC
;;;51     */
;;;52     ErrorStatus can_init(can_parameter_struct can_parameter_init,can_filter_parameter_struct can_filter_parameter)
000016  b5f0              PUSH     {r4-r7,lr}
;;;53     {	
000018  460d              MOV      r5,r1
00001a  b087              SUB      sp,sp,#0x1c
00001c  469e              MOV      lr,r3
00001e  4606              MOV      r6,r0
000020  49f3              LDR      r1,|L1.1008|
000022  2000              MOVS     r0,#0
000024  9b0e              LDR      r3,[sp,#0x38]
000026  4694              MOV      r12,r2
000028  6048              STR      r0,[r1,#4]
00002a  2001              MOVS     r0,#1
00002c  6048              STR      r0,[r1,#4]
;;;54     	can_module_rst();
;;;55     	SYS_CAN_DOMAIN = 4U;
00002e  49f1              LDR      r1,|L1.1012|
000030  2404              MOVS     r4,#4
000032  618c              STR      r4,[r1,#0x18]
;;;56     	CAN_ENABLE = 1U;
000034  49f0              LDR      r1,|L1.1016|
000036  6388              STR      r0,[r1,#0x38]
;;;57     	/* can set in reset mode */
;;;58     	CAN_MOD |= CAN_MOD_RM;
000038  4aec              LDR      r2,|L1.1004|
00003a  6811              LDR      r1,[r2,#0]
00003c  4301              ORRS     r1,r1,r0
00003e  6011              STR      r1,[r2,#0]
000040  b2f0              UXTB     r0,r6
;;;59     	
;;;60     	/* can work mode set */
;;;61     	switch(can_parameter_init.working_mode){
000042  2801              CMP      r0,#1
000044  d004              BEQ      |L1.80|
000046  2802              CMP      r0,#2
000048  d006              BEQ      |L1.88|
00004a  2803              CMP      r0,#3
00004c  d10c              BNE      |L1.104|
00004e  e007              B        |L1.96|
                  |L1.80|
;;;62     		case CAN_MODE_LISTEN_ONLY:
;;;63     			CAN_MOD |= CAN_MOD_LOM;
000050  6810              LDR      r0,[r2,#0]
000052  2102              MOVS     r1,#2
000054  4308              ORRS     r0,r0,r1
;;;64     			break;
000056  e001              B        |L1.92|
                  |L1.88|
;;;65     		case CAN_MODE_SELF_TEST:
;;;66     			CAN_MOD |= CAN_MOD_STM;
000058  6810              LDR      r0,[r2,#0]
00005a  4320              ORRS     r0,r0,r4
                  |L1.92|
00005c  6010              STR      r0,[r2,#0]            ;63
00005e  e003              B        |L1.104|
                  |L1.96|
;;;67     			break;
;;;68     		case CAN_MODE_SELF_RECEIVE:
;;;69     			CAN_CMR |= CAN_CMR_SRR;
000060  6850              LDR      r0,[r2,#4]
000062  2110              MOVS     r1,#0x10
000064  4308              ORRS     r0,r0,r1
000066  6050              STR      r0,[r2,#4]
                  |L1.104|
000068  0230              LSLS     r0,r6,#8
00006a  0e00              LSRS     r0,r0,#24
00006c  0e31              LSRS     r1,r6,#24
00006e  2909              CMP      r1,#9
000070  d249              BCS      |L1.262|
000072  000c              MOVS     r4,r1
000074  447c              ADD      r4,r4,pc
000076  7924              LDRB     r4,[r4,#4]
000078  1924              ADDS     r4,r4,r4
00007a  44a7              ADD      pc,pc,r4
00007c  040f1823          DCB      0x04,0x0f,0x18,0x23
000080  3277899b          DCB      0x32,0x77,0x89,0x9b
000084  a000              DCB      0xa0,0x00
000086  2802              CMP      r0,#2
000088  d022              BEQ      |L1.208|
00008a  2801              CMP      r0,#1
00008c  d00c              BEQ      |L1.168|
00008e  2800              CMP      r0,#0
000090  d101              BNE      |L1.150|
000092  200f              MOVS     r0,#0xf
000094  e009              B        |L1.170|
                  |L1.150|
000096  2000              MOVS     r0,#0
000098  4601              MOV      r1,r0
00009a  e01d              B        |L1.216|
00009c  2802              CMP      r0,#2
00009e  d01e              BEQ      |L1.222|
0000a0  2801              CMP      r0,#1
0000a2  d015              BEQ      |L1.208|
0000a4  2800              CMP      r0,#0
0000a6  d1f6              BNE      |L1.150|
                  |L1.168|
0000a8  2007              MOVS     r0,#7
                  |L1.170|
0000aa  2101              MOVS     r1,#1
0000ac  e014              B        |L1.216|
0000ae  2802              CMP      r0,#2
0000b0  d05a              BEQ      |L1.360|
0000b2  2801              CMP      r0,#1
0000b4  d01b              BEQ      |L1.238|
0000b6  2800              CMP      r0,#0
0000b8  d101              BNE      |L1.190|
0000ba  2007              MOVS     r0,#7
0000bc  e01a              B        |L1.244|
                  |L1.190|
0000be  2000              MOVS     r0,#0
0000c0  4601              MOV      r1,r0
0000c2  e018              B        |L1.246|
0000c4  2802              CMP      r0,#2
0000c6  d005              BEQ      |L1.212|
0000c8  2801              CMP      r0,#1
0000ca  d008              BEQ      |L1.222|
0000cc  2800              CMP      r0,#0
0000ce  d1e2              BNE      |L1.150|
                  |L1.208|
0000d0  2003              MOVS     r0,#3
0000d2  e7ea              B        |L1.170|
                  |L1.212|
0000d4  2000              MOVS     r0,#0
0000d6  2101              MOVS     r1,#1
                  |L1.216|
0000d8  270d              MOVS     r7,#0xd
0000da  2404              MOVS     r4,#4
0000dc  e00d              B        |L1.250|
                  |L1.222|
0000de  2001              MOVS     r0,#1
0000e0  e7e3              B        |L1.170|
0000e2  2802              CMP      r0,#2
0000e4  d005              BEQ      |L1.242|
0000e6  2801              CMP      r0,#1
0000e8  d03e              BEQ      |L1.360|
0000ea  2800              CMP      r0,#0
0000ec  d1e7              BNE      |L1.190|
                  |L1.238|
0000ee  2003              MOVS     r0,#3
0000f0  e000              B        |L1.244|
                  |L1.242|
0000f2  2000              MOVS     r0,#0
                  |L1.244|
0000f4  2101              MOVS     r1,#1
                  |L1.246|
0000f6  270a              MOVS     r7,#0xa
0000f8  2403              MOVS     r4,#3
                  |L1.250|
0000fa  2900              CMP      r1,#0
0000fc  d003              BEQ      |L1.262|
                  |L1.254|
0000fe  6190              STR      r0,[r2,#0x18]
000100  0120              LSLS     r0,r4,#4
000102  4338              ORRS     r0,r0,r7
000104  61d0              STR      r0,[r2,#0x1c]
                  |L1.262|
;;;70     			break;
;;;71     		default:
;;;72     			/* error work mode */
;;;73     			break;
;;;74     	}
;;;75     	
;;;76     	/* can baud rate set */
;;;77     	(void)can_baud_set(can_parameter_init.can_clk,can_parameter_init.can_baud);
;;;78     	CAN_BTR0 |= can_parameter_init.resync_jump_width;
000106  6990              LDR      r0,[r2,#0x18]
000108  4614              MOV      r4,r2
00010a  0431              LSLS     r1,r6,#16
00010c  0e09              LSRS     r1,r1,#24
00010e  4308              ORRS     r0,r0,r1
000110  6190              STR      r0,[r2,#0x18]
;;;79     	CAN_BTR1 |= can_parameter_init.sampling_times;
000112  69d0              LDR      r0,[r2,#0x1c]
000114  b2e9              UXTB     r1,r5
000116  4308              ORRS     r0,r0,r1
000118  61d0              STR      r0,[r2,#0x1c]
00011a  0428              LSLS     r0,r5,#16
00011c  0e00              LSRS     r0,r0,#24
;;;80     	
;;;81     	/* can error alarm count set */
;;;82     	CAN_EMLR = ((uint32_t)can_parameter_init.error_alarm_count & 0x000000FFUL);
00011e  6350              STR      r0,[r2,#0x34]
;;;83     	
;;;84     	/* can filter set */
;;;85     	(void)can_filter_init(can_filter_parameter);
000120  9a11              LDR      r2,[sp,#0x44]
000122  980f              LDR      r0,[sp,#0x3c]
000124  9910              LDR      r1,[sp,#0x40]
000126  9203              STR      r2,[sp,#0xc]
000128  9300              STR      r3,[sp,#0]
00012a  9102              STR      r1,[sp,#8]
00012c  9001              STR      r0,[sp,#4]
00012e  9a14              LDR      r2,[sp,#0x50]
000130  9913              LDR      r1,[sp,#0x4c]
000132  9812              LDR      r0,[sp,#0x48]
000134  9206              STR      r2,[sp,#0x18]
000136  9105              STR      r1,[sp,#0x14]
000138  9004              STR      r0,[sp,#0x10]
00013a  4671              MOV      r1,lr
00013c  4660              MOV      r0,r12
00013e  9b0d              LDR      r3,[sp,#0x34]
000140  9a0c              LDR      r2,[sp,#0x30]
000142  f7fffffe          BL       can_filter_init
;;;86     	
;;;87     	/* can exit reset mode */
;;;88     	CAN_MOD &= ~CAN_MOD_RM;
000146  6820              LDR      r0,[r4,#0]
000148  0840              LSRS     r0,r0,#1
00014a  0040              LSLS     r0,r0,#1
00014c  6020              STR      r0,[r4,#0]
00014e  0228              LSLS     r0,r5,#8
000150  6921              LDR      r1,[r4,#0x10]
000152  0e00              LSRS     r0,r0,#24
000154  4301              ORRS     r1,r1,r0
000156  6121              STR      r1,[r4,#0x10]
000158  0e28              LSRS     r0,r5,#24
00015a  4ba8              LDR      r3,|L1.1020|
00015c  49a8              LDR      r1,|L1.1024|
00015e  4aa9              LDR      r2,|L1.1028|
;;;89     	
;;;90     	can_int_enable(can_parameter_init.int_enable);
;;;91     	if((can_parameter_init.nvic_int_enable & CAN_WU_NVIC_ENABLE) != 0U){
000160  0704              LSLS     r4,r0,#28
000162  d531              BPL      |L1.456|
000164  600b              STR      r3,[r1,#0]
000166  e034              B        |L1.466|
                  |L1.360|
000168  2001              MOVS     r0,#1
00016a  e7c3              B        |L1.244|
00016c  2802              CMP      r0,#2
00016e  d007              BEQ      |L1.384|
000170  2801              CMP      r0,#1
000172  d009              BEQ      |L1.392|
000174  2800              CMP      r0,#0
000176  d1c6              BNE      |L1.262|
000178  2001              MOVS     r0,#1
00017a  270d              MOVS     r7,#0xd
00017c  2404              MOVS     r4,#4
00017e  e7be              B        |L1.254|
                  |L1.384|
000180  2000              MOVS     r0,#0
000182  2705              MOVS     r7,#5
000184  2402              MOVS     r4,#2
000186  e7ba              B        |L1.254|
                  |L1.392|
000188  2000              MOVS     r0,#0
00018a  270d              MOVS     r7,#0xd
00018c  2404              MOVS     r4,#4
00018e  e7b6              B        |L1.254|
000190  2802              CMP      r0,#2
000192  d007              BEQ      |L1.420|
000194  2801              CMP      r0,#1
000196  d009              BEQ      |L1.428|
000198  2800              CMP      r0,#0
00019a  d1b4              BNE      |L1.262|
00019c  2001              MOVS     r0,#1
00019e  270a              MOVS     r7,#0xa
0001a0  2403              MOVS     r4,#3
0001a2  e7ac              B        |L1.254|
                  |L1.420|
0001a4  2000              MOVS     r0,#0
0001a6  2704              MOVS     r7,#4
0001a8  2401              MOVS     r4,#1
0001aa  e7a8              B        |L1.254|
                  |L1.428|
0001ac  2000              MOVS     r0,#0
0001ae  270a              MOVS     r7,#0xa
0001b0  2403              MOVS     r4,#3
0001b2  e7a4              B        |L1.254|
0001b4  2801              CMP      r0,#1
0001b6  d0e3              BEQ      |L1.384|
0001b8  2800              CMP      r0,#0
0001ba  d0e5              BEQ      |L1.392|
0001bc  e7a3              B        |L1.262|
0001be  2801              CMP      r0,#1
0001c0  d0f0              BEQ      |L1.420|
0001c2  2800              CMP      r0,#0
0001c4  d0f2              BEQ      |L1.428|
0001c6  e79e              B        |L1.262|
                  |L1.456|
0001c8  6013              STR      r3,[r2,#0]
0001ca  f3bf8f4f          DSB      
0001ce  f3bf8f6f          ISB      
                  |L1.466|
0001d2  4b8d              LDR      r3,|L1.1032|
;;;92     		NVIC_EnableIRQ(CAN_WAKE_IRQn);
;;;93     	}else{
;;;94     		NVIC_DisableIRQ(CAN_WAKE_IRQn);
;;;95     	}
;;;96     	if((can_parameter_init.nvic_int_enable & CAN_ERR_NVIC_ENABLE) != 0U){
0001d4  0744              LSLS     r4,r0,#29
0001d6  d501              BPL      |L1.476|
0001d8  600b              STR      r3,[r1,#0]
0001da  e004              B        |L1.486|
                  |L1.476|
0001dc  6013              STR      r3,[r2,#0]
0001de  f3bf8f4f          DSB      
0001e2  f3bf8f6f          ISB      
                  |L1.486|
0001e6  4b89              LDR      r3,|L1.1036|
;;;97     		NVIC_EnableIRQ(CAN_ERR_IRQn);
;;;98     	}else{
;;;99     		NVIC_DisableIRQ(CAN_ERR_IRQn);
;;;100    	}
;;;101    	if((can_parameter_init.nvic_int_enable & CAN_RX_NVIC_ENABLE) != 0U){
0001e8  0784              LSLS     r4,r0,#30
0001ea  d501              BPL      |L1.496|
0001ec  600b              STR      r3,[r1,#0]
0001ee  e004              B        |L1.506|
                  |L1.496|
0001f0  6013              STR      r3,[r2,#0]
0001f2  f3bf8f4f          DSB      
0001f6  f3bf8f6f          ISB      
                  |L1.506|
;;;102    		NVIC_EnableIRQ(CAN_RX_IRQn);
;;;103    	}else{
;;;104    		NVIC_DisableIRQ(CAN_RX_IRQn);
;;;105    	}
;;;106    	if((can_parameter_init.nvic_int_enable & CAN_TX_NVIC_ENABLE) != 0U){
0001fa  07c3              LSLS     r3,r0,#31
0001fc  4884              LDR      r0,|L1.1040|
0001fe  d001              BEQ      |L1.516|
000200  6008              STR      r0,[r1,#0]
000202  e004              B        |L1.526|
                  |L1.516|
000204  6010              STR      r0,[r2,#0]
000206  f3bf8f4f          DSB      
00020a  f3bf8f6f          ISB      
                  |L1.526|
;;;107    		NVIC_EnableIRQ(CAN_TX_IRQn);
;;;108    	}else{
;;;109    		NVIC_DisableIRQ(CAN_TX_IRQn);
;;;110    	}
;;;111    	return SUCCESS;
00020e  2001              MOVS     r0,#1
;;;112    }
000210  b007              ADD      sp,sp,#0x1c
000212  bdf0              POP      {r4-r7,pc}
;;;113    
                          ENDP

                  can_receive_message PROC
;;;125    */
;;;126    ErrorStatus can_receive_message(can_frame_struct *receive_data)
000214  b4f0              PUSH     {r4-r7}
;;;127    {
;;;128    	uint8_t i;
;;;129    	/* can received message */
;;;130    	if((CAN_IF & CAN_IF_RI) != 0U){	
000216  4b75              LDR      r3,|L1.1004|
000218  68d9              LDR      r1,[r3,#0xc]
00021a  07c9              LSLS     r1,r1,#31
00021c  d03e              BEQ      |L1.668|
;;;131    		uint32_t tmp[4];
;;;132    		tmp[0] = CAN_ID0;
00021e  4c76              LDR      r4,|L1.1016|
000220  6861              LDR      r1,[r4,#4]
;;;133    		tmp[1] = CAN_ID1;
000222  68a2              LDR      r2,[r4,#8]
;;;134    		tmp[2] = CAN_ID2;
000224  68e5              LDR      r5,[r4,#0xc]
;;;135    		tmp[3] = CAN_ID3;
000226  6926              LDR      r6,[r4,#0x10]
;;;136    
;;;137    		/* save recive frame format and id */
;;;138    		if((CAN_FRCTL & CAN_FRCTL_FF) != 0U){
000228  6824              LDR      r4,[r4,#0]
00022a  0627              LSLS     r7,r4,#24
;;;139    			receive_data->ff = CAN_EXTENDED_FRAME;
00022c  2401              MOVS     r4,#1
00022e  2f00              CMP      r7,#0                 ;138
000230  da09              BGE      |L1.582|
;;;140    			receive_data->efid = (uint32_t)((tmp[0] << 21U) | (tmp[1] << 13U) | (tmp[2] << 5U) | (tmp[3] >> 3U));
000232  0549              LSLS     r1,r1,#21
000234  0352              LSLS     r2,r2,#13
000236  4311              ORRS     r1,r1,r2
000238  016a              LSLS     r2,r5,#5
00023a  4311              ORRS     r1,r1,r2
00023c  08f2              LSRS     r2,r6,#3
00023e  7404              STRB     r4,[r0,#0x10]         ;139
000240  4311              ORRS     r1,r1,r2
000242  6041              STR      r1,[r0,#4]
000244  e005              B        |L1.594|
                  |L1.582|
;;;141    		}else{
;;;142    			receive_data->ff = CAN_STANDARD_FRAME;
000246  2500              MOVS     r5,#0
;;;143    			receive_data->sfid = (uint32_t)((tmp[0] << 3U) | (tmp[1] >> 5U));
000248  00c9              LSLS     r1,r1,#3
00024a  0952              LSRS     r2,r2,#5
00024c  7405              STRB     r5,[r0,#0x10]         ;142
00024e  4311              ORRS     r1,r1,r2
000250  6001              STR      r1,[r0,#0]
                  |L1.594|
;;;144    		}
;;;145    		
;;;146    		/* save receive frame type */
;;;147    		if((CAN_FRCTL & CAN_FRCTL_RTR) != 0U){
000252  4969              LDR      r1,|L1.1016|
000254  680a              LDR      r2,[r1,#0]
000256  0652              LSLS     r2,r2,#25
000258  d501              BPL      |L1.606|
;;;148    			receive_data->ft = CAN_REMOTE_FRAME;
00025a  7444              STRB     r4,[r0,#0x11]
00025c  e001              B        |L1.610|
                  |L1.606|
;;;149    		}else{
;;;150    			receive_data->ft = CAN_DATA_FRAME;
00025e  2200              MOVS     r2,#0
000260  7442              STRB     r2,[r0,#0x11]
                  |L1.610|
;;;151    		}
;;;152    		
;;;153    		/* save receive data lenth */
;;;154    		tmp[0] = CAN_FRCTL;
000262  6809              LDR      r1,[r1,#0]
;;;155    		receive_data->dlen = (uint8_t)(tmp[0] & CAN_FRCTL_DLC);
000264  0709              LSLS     r1,r1,#28
000266  0f09              LSRS     r1,r1,#28
000268  7481              STRB     r1,[r0,#0x12]
;;;156    		if(receive_data->dlen > 0x08U){
00026a  2908              CMP      r1,#8
00026c  d901              BLS      |L1.626|
;;;157    			receive_data->dlen = 0x08U;
00026e  2108              MOVS     r1,#8
000270  7481              STRB     r1,[r0,#0x12]
                  |L1.626|
;;;158    		}
;;;159    		
;;;160    		/* save receive data */
;;;161    		for(i=0U;i<receive_data->dlen;i++){
000272  7c82              LDRB     r2,[r0,#0x12]
000274  2100              MOVS     r1,#0
000276  2a00              CMP      r2,#0
000278  d909              BLS      |L1.654|
                  |L1.634|
;;;162    			tmp[0] = CAN_DATA(i);
00027a  008a              LSLS     r2,r1,#2
00027c  18d2              ADDS     r2,r2,r3
00027e  6d52              LDR      r2,[r2,#0x54]
;;;163    			receive_data->data[i] = (uint8_t)tmp[0];
000280  1844              ADDS     r4,r0,r1
000282  7222              STRB     r2,[r4,#8]
000284  1c49              ADDS     r1,r1,#1
000286  7c82              LDRB     r2,[r0,#0x12]         ;161
000288  b2c9              UXTB     r1,r1                 ;161
00028a  428a              CMP      r2,r1                 ;161
00028c  d8f5              BHI      |L1.634|
                  |L1.654|
;;;164    		}
;;;165    		/* release receive buffer */
;;;166    		CAN_CMR |= CAN_CMR_RRB;
00028e  6858              LDR      r0,[r3,#4]
000290  2104              MOVS     r1,#4
000292  4308              ORRS     r0,r0,r1
000294  6058              STR      r0,[r3,#4]
;;;167    		return SUCCESS;
;;;168    	}
;;;169    	return ERROR;
;;;170    }
000296  bcf0              POP      {r4-r7}
000298  2001              MOVS     r0,#1                 ;167
00029a  4770              BX       lr
                  |L1.668|
00029c  bcf0              POP      {r4-r7}
00029e  2000              MOVS     r0,#0                 ;169
0002a0  4770              BX       lr
;;;171    /*!
                          ENDP

                  can_transmit_message PROC
;;;182    */
;;;183    ErrorStatus can_transmit_message(can_frame_struct *transmit_data)
0002a2  b430              PUSH     {r4,r5}
;;;184    {
;;;185    	uint8_t tmp_frame;
;;;186    	uint8_t tmp_id[4] = {0x00,0x00,0x00,0x00};
;;;187    	if(transmit_data == NULL){
0002a4  2800              CMP      r0,#0
0002a6  d044              BEQ      |L1.818|
;;;188    		return ERROR;
;;;189    	}
;;;190    	//if((CAN_SR & (CAN_SR_TCS | CAN_SR_TBS)) == (CAN_SR_TCS | CAN_SR_TBS)){
;;;191    	if((CAN_SR & (CAN_SR_TBS)) == (CAN_SR_TBS)){
0002a8  4950              LDR      r1,|L1.1004|
0002aa  6889              LDR      r1,[r1,#8]
0002ac  0749              LSLS     r1,r1,#29
0002ae  d54e              BPL      |L1.846|
;;;192    		if(transmit_data->ff == CAN_STANDARD_FRAME){	//standard frame
0002b0  7c03              LDRB     r3,[r0,#0x10]
0002b2  2b00              CMP      r3,#0
0002b4  d03f              BEQ      |L1.822|
;;;193    			tmp_id[0] = (uint8_t)(transmit_data->sfid >> 3);
;;;194    			tmp_id[1] = (uint8_t)(transmit_data->sfid << 5);
;;;195    		}else{	//extended frame
;;;196    			tmp_id[0] = (uint8_t)(transmit_data->efid >> 21);
0002b6  6842              LDR      r2,[r0,#4]
;;;197    			tmp_id[1] = (uint8_t)(transmit_data->efid >> 13);
0002b8  25ff              MOVS     r5,#0xff
0002ba  00d1              LSLS     r1,r2,#3              ;196
0002bc  0e0c              LSRS     r4,r1,#24             ;196
0002be  4621              MOV      r1,r4                 ;196
0002c0  02d4              LSLS     r4,r2,#11
0002c2  0e24              LSRS     r4,r4,#24
0002c4  022d              LSLS     r5,r5,#8
0002c6  0224              LSLS     r4,r4,#8
0002c8  43a9              BICS     r1,r1,r5
0002ca  402c              ANDS     r4,r4,r5
0002cc  4321              ORRS     r1,r1,r4
;;;198    			tmp_id[2] = (uint8_t)(transmit_data->efid >> 5);
0002ce  04d4              LSLS     r4,r2,#19
0002d0  0e24              LSRS     r4,r4,#24
0002d2  022d              LSLS     r5,r5,#8
0002d4  0424              LSLS     r4,r4,#16
0002d6  43a9              BICS     r1,r1,r5
0002d8  402c              ANDS     r4,r4,r5
0002da  4321              ORRS     r1,r1,r4
0002dc  06d2              LSLS     r2,r2,#27
                  |L1.734|
0002de  4311              ORRS     r1,r1,r2
;;;199    			tmp_id[3] = (uint8_t)(transmit_data->efid << 3);
;;;200    		}
;;;201    		tmp_frame = (transmit_data->dlen & 0x0fU);
0002e0  7c82              LDRB     r2,[r0,#0x12]
0002e2  0712              LSLS     r2,r2,#28
0002e4  0f12              LSRS     r2,r2,#28
;;;202    		if((transmit_data->ff) != CAN_STANDARD_FRAME){
0002e6  2b00              CMP      r3,#0
0002e8  d001              BEQ      |L1.750|
;;;203    			tmp_frame |= 0x80U;
0002ea  2380              MOVS     r3,#0x80
0002ec  431a              ORRS     r2,r2,r3
                  |L1.750|
;;;204    		}
;;;205    		if((transmit_data->ft) != CAN_DATA_FRAME){
0002ee  7c43              LDRB     r3,[r0,#0x11]
0002f0  2b00              CMP      r3,#0
0002f2  d001              BEQ      |L1.760|
;;;206    			tmp_frame |= 0x40U;
0002f4  2340              MOVS     r3,#0x40
0002f6  431a              ORRS     r2,r2,r3
                  |L1.760|
;;;207    		}
;;;208    		/* set frame foramt, type and transmit data lenth */
;;;209    		CAN_FRCTL = tmp_frame;
0002f8  4b3f              LDR      r3,|L1.1016|
0002fa  601a              STR      r2,[r3,#0]
0002fc  b2ca              UXTB     r2,r1
;;;210    		
;;;211    		/* ready for transmitting id */
;;;212    		CAN_ID0 = tmp_id[0];
0002fe  605a              STR      r2,[r3,#4]
000300  040a              LSLS     r2,r1,#16
000302  0e12              LSRS     r2,r2,#24
;;;213    		CAN_ID1 = tmp_id[1];
000304  609a              STR      r2,[r3,#8]
000306  020a              LSLS     r2,r1,#8
000308  0e12              LSRS     r2,r2,#24
;;;214    		CAN_ID2 = tmp_id[2];
00030a  60da              STR      r2,[r3,#0xc]
00030c  0e09              LSRS     r1,r1,#24
;;;215    		CAN_ID3 = tmp_id[3];
00030e  6119              STR      r1,[r3,#0x10]
;;;216    		
;;;217    		/* ready for transmitting data */
;;;218    		CAN_DATA0 = transmit_data->data[0];
000310  7a01              LDRB     r1,[r0,#8]
000312  6159              STR      r1,[r3,#0x14]
;;;219    		CAN_DATA1 = transmit_data->data[1];
000314  7a41              LDRB     r1,[r0,#9]
000316  6199              STR      r1,[r3,#0x18]
;;;220    		CAN_DATA2 = transmit_data->data[2];
000318  7a81              LDRB     r1,[r0,#0xa]
00031a  61d9              STR      r1,[r3,#0x1c]
;;;221    		CAN_DATA3 = transmit_data->data[3];
00031c  7ac1              LDRB     r1,[r0,#0xb]
00031e  6219              STR      r1,[r3,#0x20]
;;;222    		CAN_DATA4 = transmit_data->data[4];
000320  7b01              LDRB     r1,[r0,#0xc]
000322  6259              STR      r1,[r3,#0x24]
;;;223    		CAN_DATA5 = transmit_data->data[5];
000324  7b41              LDRB     r1,[r0,#0xd]
000326  6299              STR      r1,[r3,#0x28]
;;;224    		CAN_DATA6 = transmit_data->data[6];
000328  7b81              LDRB     r1,[r0,#0xe]
00032a  62d9              STR      r1,[r3,#0x2c]
;;;225    		CAN_DATA7 = transmit_data->data[7];
00032c  7bc0              LDRB     r0,[r0,#0xf]
00032e  6318              STR      r0,[r3,#0x30]
;;;226    		
;;;227    		return SUCCESS;
000330  2001              MOVS     r0,#1
                  |L1.818|
;;;228    	}
;;;229    	return ERROR;
;;;230    }
000332  bc30              POP      {r4,r5}
000334  4770              BX       lr
                  |L1.822|
000336  8802              LDRH     r2,[r0,#0]            ;193
000338  0551              LSLS     r1,r2,#21             ;193
00033a  0e0c              LSRS     r4,r1,#24             ;193
00033c  4621              MOV      r1,r4                 ;193
00033e  24ff              MOVS     r4,#0xff              ;194
000340  0752              LSLS     r2,r2,#29             ;194
000342  0224              LSLS     r4,r4,#8              ;194
000344  0e12              LSRS     r2,r2,#24             ;194
000346  43a1              BICS     r1,r1,r4              ;194
000348  0212              LSLS     r2,r2,#8              ;194
00034a  4022              ANDS     r2,r2,r4              ;194
00034c  e7c7              B        |L1.734|
                  |L1.846|
00034e  bc30              POP      {r4,r5}
000350  2000              MOVS     r0,#0                 ;229
000352  4770              BX       lr
;;;231    
                          ENDP

                  can_int_flag_clr PROC
;;;734    */
;;;735    void can_int_flag_clr(uint8_t int_flag)
000354  492f              LDR      r1,|L1.1044|
;;;736    {
;;;737    	CAN_CLRISR = int_flag;
000356  6008              STR      r0,[r1,#0]
;;;738    	SYS_CAN_SPWKFLAG = 0x01U;
000358  4925              LDR      r1,|L1.1008|
00035a  2001              MOVS     r0,#1
00035c  6088              STR      r0,[r1,#8]
;;;739    }
00035e  4770              BX       lr
;;;740    
                          ENDP

                  can_transmit_request PROC
;;;437    
;;;438    void can_transmit_request(void)
000360  492c              LDR      r1,|L1.1044|
;;;439    {
;;;440    	can_int_flag_clr(CAN_IF_TI);
000362  2002              MOVS     r0,#2
000364  6008              STR      r0,[r1,#0]
000366  4922              LDR      r1,|L1.1008|
000368  2001              MOVS     r0,#1
00036a  6088              STR      r0,[r1,#8]
;;;441    	/* enable can transmit */
;;;442    	CAN_CMR |= CAN_CMR_TR;
00036c  491f              LDR      r1,|L1.1004|
00036e  684a              LDR      r2,[r1,#4]
000370  4302              ORRS     r2,r2,r0
000372  604a              STR      r2,[r1,#4]
;;;443    }
000374  4770              BX       lr
;;;444    
                          ENDP

                  can_interrupt_flag_get PROC
;;;721    */
;;;722    uint8_t can_interrupt_flag_get(void)
000376  481d              LDR      r0,|L1.1004|
;;;723    {
;;;724    	uint32_t retal;
;;;725    	retal = CAN_IF;
000378  68c0              LDR      r0,[r0,#0xc]
;;;726    	return (uint8_t)retal;
00037a  b2c0              UXTB     r0,r0
;;;727    }
00037c  4770              BX       lr
;;;728    
                          ENDP

                  can_wait_trans PROC
;;;450    */
;;;451    ErrorStatus can_wait_trans(void)
00037e  b430              PUSH     {r4,r5}
;;;452    {
;;;453    	uint32_t timeout = 30000U;
000380  4825              LDR      r0,|L1.1048|
000382  4a24              LDR      r2,|L1.1044|
000384  4c1a              LDR      r4,|L1.1008|
000386  4d19              LDR      r5,|L1.1004|
000388  2301              MOVS     r3,#1
                  |L1.906|
00038a  68e9              LDR      r1,[r5,#0xc]
00038c  1e40              SUBS     r0,r0,#1
;;;454    	while(timeout != 0x00U){
;;;455    		timeout --;
;;;456    		if((can_interrupt_flag_get() & CAN_IF_TI) != 0x00U){
00038e  0789              LSLS     r1,r1,#30
000390  d505              BPL      |L1.926|
;;;457    			can_int_flag_clr((uint8_t)(0x01UL << 1));
000392  2002              MOVS     r0,#2
000394  6010              STR      r0,[r2,#0]
000396  60a3              STR      r3,[r4,#8]
;;;458    			return SUCCESS;
;;;459    		}
;;;460    	}
;;;461    	can_int_flag_clr((uint8_t)(0x01UL << 1));
;;;462    	return ERROR;
;;;463    }
000398  bc30              POP      {r4,r5}
00039a  2001              MOVS     r0,#1                 ;458
00039c  4770              BX       lr
                  |L1.926|
00039e  2800              CMP      r0,#0                 ;454
0003a0  d1f3              BNE      |L1.906|
0003a2  2002              MOVS     r0,#2                 ;461
0003a4  6010              STR      r0,[r2,#0]            ;461
0003a6  60a3              STR      r3,[r4,#8]            ;461
0003a8  bc30              POP      {r4,r5}
0003aa  2000              MOVS     r0,#0                 ;462
0003ac  4770              BX       lr
;;;464    
                          ENDP

                  can_read_frame_error_code PROC
;;;595    */
;;;596    uint8_t can_read_frame_error_code(void)
0003ae  480f              LDR      r0,|L1.1004|
;;;597    {
;;;598    	uint32_t retal;
;;;599    	retal = CAN_ECC;
0003b0  6b00              LDR      r0,[r0,#0x30]
;;;600    	CAN_CLRECC = 0x01;
0003b2  4a18              LDR      r2,|L1.1044|
0003b4  2101              MOVS     r1,#1
0003b6  6051              STR      r1,[r2,#4]
;;;601    	return (uint8_t)retal;
0003b8  b2c0              UXTB     r0,r0
;;;602    }
0003ba  4770              BX       lr
;;;603    
                          ENDP

                  can_read_arbitration_lost_code PROC
;;;609    */
;;;610    uint8_t can_read_arbitration_lost_code(void)
0003bc  480b              LDR      r0,|L1.1004|
;;;611    {
;;;612    	uint32_t retal;
;;;613    	retal = CAN_ALC;
0003be  6ac0              LDR      r0,[r0,#0x2c]
;;;614    	return (uint8_t)retal;
0003c0  b2c0              UXTB     r0,r0
;;;615    
;;;616    }
0003c2  4770              BX       lr
;;;617    
                          ENDP

                  can_transmit_abort PROC
;;;623    */
;;;624    void can_transmit_abort(void)
0003c4  4809              LDR      r0,|L1.1004|
;;;625    {
;;;626    	CAN_CMR |= (CAN_CMR_AT | CAN_CMR_TR);
0003c6  6841              LDR      r1,[r0,#4]
0003c8  2203              MOVS     r2,#3
0003ca  4311              ORRS     r1,r1,r2
0003cc  6041              STR      r1,[r0,#4]
;;;627    }
0003ce  4770              BX       lr
;;;628    
                          ENDP

                  can_sleep_config PROC
;;;640    */
;;;641    void can_sleep_config(uint8_t wakeup_mode,uint8_t filter_en,FunctionalState state)
0003d0  b410              PUSH     {r4}
;;;642    {
0003d2  2401              MOVS     r4,#1
;;;643    	if(state == ENABLE){
;;;644    		CAN_WUP |= CAN_WUP_ENABLE;
0003d4  4b05              LDR      r3,|L1.1004|
0003d6  2a01              CMP      r2,#1                 ;643
;;;645    	}else{
;;;646    		CAN_WUP &= ~CAN_WUP_ENABLE;
0003d8  6a5a              LDR      r2,[r3,#0x24]
0003da  d01f              BEQ      |L1.1052|
0003dc  43a2              BICS     r2,r2,r4
                  |L1.990|
0003de  625a              STR      r2,[r3,#0x24]
;;;647    	}
;;;648    	if(wakeup_mode != 0U){
;;;649    		CAN_WUP |= CAN_WUP_MODE;
0003e0  2202              MOVS     r2,#2
0003e2  2800              CMP      r0,#0                 ;648
;;;650    	}else{
;;;651    		CAN_WUP &= ~CAN_WUP_MODE;
0003e4  6a58              LDR      r0,[r3,#0x24]
0003e6  d01b              BEQ      |L1.1056|
0003e8  4310              ORRS     r0,r0,r2              ;649
0003ea  e01a              B        |L1.1058|
                  |L1.1004|
                          DCD      0x50050000
                  |L1.1008|
                          DCD      0x50010040
                  |L1.1012|
                          DCD      0x50010000
                  |L1.1016|
                          DCD      0x50050040
                  |L1.1020|
                          DCD      0x04000000
                  |L1.1024|
                          DCD      0xe000e100
                  |L1.1028|
                          DCD      0xe000e180
                  |L1.1032|
                          DCD      0x08000000
                  |L1.1036|
                          DCD      0x10000000
                  |L1.1040|
                          DCD      0x20000000
                  |L1.1044|
                          DCD      0x50050080
                  |L1.1048|
                          DCD      0x00007530
                  |L1.1052|
00041c  4322              ORRS     r2,r2,r4              ;644
00041e  e7de              B        |L1.990|
                  |L1.1056|
000420  4390              BICS     r0,r0,r2
                  |L1.1058|
000422  6258              STR      r0,[r3,#0x24]
;;;652    	}
;;;653    	if(filter_en != 0U){
;;;654    		CAN_FILTER_EN = 0x01U;
000424  48f9              LDR      r0,|L1.2060|
000426  2900              CMP      r1,#0                 ;653
000428  d002              BEQ      |L1.1072|
00042a  6084              STR      r4,[r0,#8]
;;;655    	}else{
;;;656    		CAN_FILTER_EN = 0x00U;
;;;657    	}
;;;658    }
00042c  bc10              POP      {r4}
00042e  4770              BX       lr
                  |L1.1072|
000430  2100              MOVS     r1,#0                 ;656
000432  6081              STR      r1,[r0,#8]            ;656
000434  bc10              POP      {r4}
000436  4770              BX       lr
;;;659    
                          ENDP

                  can_sleep_request PROC
;;;665    */
;;;666    ErrorStatus can_sleep_request(void)
000438  49f6              LDR      r1,|L1.2068|
;;;667    {
;;;668    	uint32_t timeout = 30000U;
00043a  48f5              LDR      r0,|L1.2064|
;;;669    	CAN_CMR |= CAN_CMR_SPM;
00043c  684a              LDR      r2,[r1,#4]
00043e  2320              MOVS     r3,#0x20
000440  431a              ORRS     r2,r2,r3
000442  604a              STR      r2,[r1,#4]
                  |L1.1092|
;;;670    	while(timeout != 0x00U){
;;;671    		timeout --;
;;;672    		if(CAN_SLPAK != 0x00U){
000444  6a0a              LDR      r2,[r1,#0x20]
000446  1e40              SUBS     r0,r0,#1
000448  2a00              CMP      r2,#0
00044a  d001              BEQ      |L1.1104|
;;;673    			return SUCCESS;
00044c  2001              MOVS     r0,#1
;;;674    		}
;;;675    	}
;;;676    	return ERROR;
;;;677    }
00044e  4770              BX       lr
                  |L1.1104|
000450  2800              CMP      r0,#0                 ;670
000452  d1f7              BNE      |L1.1092|
000454  4770              BX       lr
;;;678    
                          ENDP

                  can_get_fifo_num PROC
;;;684    */
;;;685    uint8_t can_get_fifo_num(void)
000456  48f0              LDR      r0,|L1.2072|
;;;686    {
;;;687    	uint32_t retal;
;;;688    	retal = CAN_RMC;
000458  6b40              LDR      r0,[r0,#0x34]
;;;689    	return (uint8_t)retal;
00045a  b2c0              UXTB     r0,r0
;;;690    }
00045c  4770              BX       lr
;;;691    
                          ENDP

                  can_int_disable PROC
;;;710    */
;;;711    void can_int_disable(uint8_t intstate)
00045e  49ed              LDR      r1,|L1.2068|
;;;712    {
;;;713    	CAN_IE &= ~intstate;
000460  690a              LDR      r2,[r1,#0x10]
000462  4382              BICS     r2,r2,r0
000464  610a              STR      r2,[r1,#0x10]
;;;714    }
000466  4770              BX       lr
;;;715    
                          ENDP

                  can_status_get PROC
;;;746    */
;;;747    uint8_t can_status_get(void)
000468  48ea              LDR      r0,|L1.2068|
;;;748    {
;;;749    	uint32_t retal;
;;;750    	retal = CAN_SR;
00046a  6880              LDR      r0,[r0,#8]
;;;751    	return (uint8_t)retal;
00046c  b2c0              UXTB     r0,r0
;;;752    }
00046e  4770              BX       lr
;;;753    
                          ENDP

                  can_wait_transmit_frame PROC
;;;765    */
;;;766    void can_wait_transmit_frame(can_frame_struct *transmit_data)
000470  b530              PUSH     {r4,r5,lr}
;;;767    {
;;;768    	(void)can_transmit_message(transmit_data);
000472  f7fffffe          BL       can_transmit_message
000476  4be5              LDR      r3,|L1.2060|
000478  2002              MOVS     r0,#2
00047a  6018              STR      r0,[r3,#0]
00047c  4ce7              LDR      r4,|L1.2076|
00047e  2201              MOVS     r2,#1
000480  60a2              STR      r2,[r4,#8]
000482  4de4              LDR      r5,|L1.2068|
000484  6868              LDR      r0,[r5,#4]
000486  4310              ORRS     r0,r0,r2
000488  6068              STR      r0,[r5,#4]
00048a  48e1              LDR      r0,|L1.2064|
                  |L1.1164|
00048c  68e9              LDR      r1,[r5,#0xc]
00048e  1e40              SUBS     r0,r0,#1
000490  0789              LSLS     r1,r1,#30
000492  d503              BPL      |L1.1180|
                  |L1.1172|
000494  2002              MOVS     r0,#2
000496  6018              STR      r0,[r3,#0]
000498  60a2              STR      r2,[r4,#8]
;;;769    	can_transmit_request();
;;;770    	(void)can_wait_trans();
;;;771    }
00049a  bd30              POP      {r4,r5,pc}
                  |L1.1180|
00049c  2800              CMP      r0,#0
00049e  d1f5              BNE      |L1.1164|
0004a0  e7f8              B        |L1.1172|
;;;772    
                          ENDP

                  can_get_txerrcnt PROC
;;;778    */
;;;779    uint8_t can_get_txerrcnt(void)
0004a2  48dc              LDR      r0,|L1.2068|
;;;780    {
;;;781    	uint32_t retal;
;;;782    	retal = CAN_TXERR;
0004a4  6bc0              LDR      r0,[r0,#0x3c]
;;;783    	return (uint8_t)retal;
0004a6  b2c0              UXTB     r0,r0
;;;784    }
0004a8  4770              BX       lr
;;;785    
                          ENDP

                  can_get_rxerrcnt PROC
;;;791    */
;;;792    uint8_t can_get_rxerrcnt(void)
0004aa  48da              LDR      r0,|L1.2068|
;;;793    {
;;;794    	uint32_t retal;
;;;795    	retal = CAN_RXERR;
0004ac  6b80              LDR      r0,[r0,#0x38]
;;;796    	return (uint8_t)retal;
0004ae  b2c0              UXTB     r0,r0
;;;797    }
0004b0  4770              BX       lr
;;;798    
                          ENDP

                  can_clock_sel PROC
;;;816    */
;;;817    void can_clock_sel(uint8_t can_clock)
0004b2  b510              PUSH     {r4,lr}
;;;818    {
0004b4  0004              MOVS     r4,r0
0004b6  d108              BNE      |L1.1226|
;;;819    	ErrorStatus rval;
;;;820    	if(can_clock == CAN_XTAL_CLOCK){
;;;821    		if((SYS_XTAL_CTRL & SYS_XTAL_CTRL_INIT) == 0x00U){
0004b8  48d9              LDR      r0,|L1.2080|
0004ba  6840              LDR      r0,[r0,#4]
0004bc  0700              LSLS     r0,r0,#28
0004be  d404              BMI      |L1.1226|
;;;822    			rval = xtal_init();
0004c0  f7fffffe          BL       xtal_init
;;;823    			if(rval == ERROR){
0004c4  2800              CMP      r0,#0
0004c6  d100              BNE      |L1.1226|
;;;824    				can_clock = CAN_PLL_CLOCK;
0004c8  2401              MOVS     r4,#1
                  |L1.1226|
;;;825    			}
;;;826    		}
;;;827    	}
;;;828    	SYS_CAN_CLKSEL = can_clock;
0004ca  48d4              LDR      r0,|L1.2076|
0004cc  6004              STR      r4,[r0,#0]
;;;829    }
0004ce  bd10              POP      {r4,pc}
;;;830    
                          ENDP

                  is_can_txbuf_empty PROC
;;;836    */
;;;837    bool is_can_txbuf_empty(void)
0004d0  48d0              LDR      r0,|L1.2068|
;;;838    {
;;;839    	bool rtal;
;;;840    	if((CAN_SR & CAN_SR_TBS) == CAN_SR_TBS){
0004d2  6880              LDR      r0,[r0,#8]
0004d4  0740              LSLS     r0,r0,#29
0004d6  d501              BPL      |L1.1244|
;;;841    		rtal = TRUE;
0004d8  2001              MOVS     r0,#1
;;;842    	}else{
;;;843    		rtal = FALSE;
;;;844    	}
;;;845    	return rtal;
;;;846    }
0004da  4770              BX       lr
                  |L1.1244|
0004dc  2000              MOVS     r0,#0                 ;843
0004de  4770              BX       lr
;;;847    
                          ENDP

                  can_filter_init PROC
;;;484    */
;;;485    static ErrorStatus can_filter_init(can_filter_parameter_struct can_filter_parameter)
0004e0  b40f              PUSH     {r0-r3}
;;;486    {
0004e2  b4f0              PUSH     {r4-r7}
;;;487    	uint8_t tmp_id[4] = {0x00U,0x00U,0x00U,0x00U};
;;;488    	uint8_t tmp_mask[4] = {0xffU,0xffU,0xffU,0xffU};
0004e4  a0cf              ADR      r0,|L1.2084|
;;;489    	can_filter_parameter_struct *can_filter;
;;;490    	can_filter = &can_filter_parameter;
;;;491    	if(can_filter->filter_mode == CAN_SINGLE_FILTER){	//single filter
0004e6  6801              LDR      r1,[r0,#0]
0004e8  4668              MOV      r0,sp
0004ea  7c05              LDRB     r5,[r0,#0x10]
;;;492    		if(can_filter->filter_frame == CAN_STANDARD_FRAME){	//standard frame
;;;493    			tmp_id[0] = (uint8_t)(can_filter->filter_single_id >> 3);
;;;494    			tmp_id[1] = (uint8_t)(can_filter->filter_single_id << 5);
;;;495    			if((can_filter->filter_RTR) != CAN_DATA_FRAME){
;;;496    				tmp_id[1] |= ((uint8_t)0x01 << 4);
;;;497    			}else{
;;;498    				tmp_id[1] &= ~((uint8_t)0x01 << 4);
;;;499    			}
;;;500    			tmp_id[2] = can_filter->filter_data0;
;;;501    			tmp_id[3] = can_filter->filter_data1;
;;;502    			tmp_mask[0] = (uint8_t)(can_filter->filter_mask_single_id >> 3);
;;;503    			tmp_mask[1] = (uint8_t)((can_filter->filter_mask_single_id << 5) | 0x1FU);
;;;504    			if((can_filter->filter_mask_RTR) != DISABLE){
0004ec  7cc2              LDRB     r2,[r0,#0x13]
0004ee  7c43              LDRB     r3,[r0,#0x11]         ;492
0004f0  7c80              LDRB     r0,[r0,#0x12]         ;495
0004f2  24ef              MOVS     r4,#0xef              ;498
0004f4  2d01              CMP      r5,#1                 ;491
0004f6  d052              BEQ      |L1.1438|
;;;505    				tmp_mask[1] &= ~((uint8_t)0x01 << 4);
;;;506    			}else{
;;;507    				tmp_mask[1] |= ((uint8_t)0x01 << 4);
;;;508    			}
;;;509    			tmp_mask[2] = can_filter->filter_mask_data0;
;;;510    			tmp_mask[3] = can_filter->filter_mask_data1;
;;;511    		}else{	//extened frame																
;;;512    			tmp_id[0] = (uint8_t)(can_filter->filter_single_id >> 21);
;;;513    			tmp_id[1] = (uint8_t)(can_filter->filter_single_id >> 13);
;;;514    			tmp_id[2] = (uint8_t)(can_filter->filter_single_id >> 5);
;;;515    			tmp_id[3] = (uint8_t)(can_filter->filter_single_id << 3); 
;;;516    			if(can_filter->filter_RTR != CAN_DATA_FRAME){
;;;517    				tmp_id[3] |= ((uint8_t)0x01 << 2);
;;;518    			}else{
;;;519    				tmp_id[3] &= ~((uint8_t)0x01 << 2);
;;;520    			}
;;;521    			tmp_mask[0] = (uint8_t)(can_filter->filter_mask_single_id >> 21);
;;;522    			tmp_mask[1] = (uint8_t)(can_filter->filter_mask_single_id >> 13);
;;;523    			tmp_mask[2] = (uint8_t)(can_filter->filter_mask_single_id >> 5);
;;;524    			tmp_mask[3] = (uint8_t)(((uint8_t)(can_filter->filter_mask_single_id << 3)) | 0x07U);		
;;;525    			if((can_filter->filter_mask_RTR) != DISABLE){
;;;526    				tmp_mask[3] &= ~((uint8_t)0x01 << 2);
;;;527    			}else{
;;;528    				tmp_mask[3] |= ((uint8_t)0x01 << 2);
;;;529    			}
;;;530    		}
;;;531    		CAN_MOD |= CAN_MOD_AFM;
;;;532    	}else{	//double filter
;;;533    		if(can_filter->filter_frame == CAN_STANDARD_FRAME){	//standard frame
0004f8  2b00              CMP      r3,#0
0004fa  d076              BEQ      |L1.1514|
;;;534    			tmp_id[0] = (uint8_t)(can_filter->filter_double_id0 >> 3);
;;;535    			tmp_id[1] = (uint8_t)((can_filter->filter_double_id0 << 5) | 
;;;536    						((can_filter->filter_data0_std >> 4) & 0x0fU));
;;;537    			if(can_filter->filter_RTR != CAN_DATA_FRAME){
;;;538    				tmp_id[1] |= (0x01U << 4);
;;;539    			}else{
;;;540    				tmp_id[1] &= ~(0x01U << 4);
;;;541    			}
;;;542    			tmp_id[2] = (uint8_t)(can_filter->filter_double_id1 >> 3);
;;;543    			tmp_id[3] = (uint8_t)((can_filter->filter_double_id1 << 5) | 
;;;544    						(can_filter->filter_data0_std & 0x0fU));
;;;545    			if(can_filter->filter_RTR != CAN_DATA_FRAME){
;;;546    				tmp_id[3] |= (0x01U << 4);
;;;547    			}else{
;;;548    				tmp_id[3] &= ~(0x01U << 4);
;;;549    			}
;;;550    			
;;;551    			tmp_mask[0] = (uint8_t)(can_filter->filter_mask_double_id0 >> 3);
;;;552    			tmp_mask[1] = (uint8_t)((can_filter->filter_mask_double_id0 << 5) | 
;;;553    						  ((can_filter->filter_mask_data0_std >> 4) & 0x0fU));
;;;554    			tmp_mask[2] = (uint8_t)(can_filter->filter_mask_double_id1 >> 3);
;;;555    			tmp_mask[3] = (uint8_t)((can_filter->filter_mask_double_id1 << 5) | 
;;;556    						  (can_filter->filter_mask_data0_std & 0x0fU));
;;;557    			if((can_filter->filter_mask_RTR) != DISABLE){
;;;558    				tmp_mask[1] &= ~((uint8_t)0x01 << 4);
;;;559    			}else{
;;;560    				tmp_mask[1] |= ((uint8_t)0x01 << 4);
;;;561    			}
;;;562    			if((can_filter->filter_mask_RTR) != DISABLE){
;;;563    				tmp_mask[3] &= ~((uint8_t)0x01 << 4);
;;;564    			}else{
;;;565    				tmp_mask[3] |= ((uint8_t)0x01 << 4);
;;;566    			}
;;;567    		}else{	//extened frame		
;;;568    			tmp_id[0] = (uint8_t)(can_filter->filter_double_id0 >> 21);
0004fc  9809              LDR      r0,[sp,#0x24]
;;;569    			tmp_id[1] = (uint8_t)(can_filter->filter_double_id0 >> 13);
0004fe  22ff              MOVS     r2,#0xff
000500  00c0              LSLS     r0,r0,#3              ;568
000502  0e00              LSRS     r0,r0,#24             ;568
000504  4603              MOV      r3,r0                 ;568
000506  9809              LDR      r0,[sp,#0x24]
000508  0212              LSLS     r2,r2,#8
00050a  02c0              LSLS     r0,r0,#11
00050c  0e00              LSRS     r0,r0,#24
00050e  0200              LSLS     r0,r0,#8
000510  4393              BICS     r3,r3,r2
000512  4010              ANDS     r0,r0,r2
000514  4303              ORRS     r3,r3,r0
;;;570    			tmp_id[2] = (uint8_t)(can_filter->filter_double_id1 >> 21);
000516  980a              LDR      r0,[sp,#0x28]
000518  0212              LSLS     r2,r2,#8
00051a  00c0              LSLS     r0,r0,#3
00051c  0e00              LSRS     r0,r0,#24
00051e  0400              LSLS     r0,r0,#16
000520  4393              BICS     r3,r3,r2
000522  4010              ANDS     r0,r0,r2
000524  4303              ORRS     r3,r3,r0
;;;571    			tmp_id[3] = (uint8_t)(can_filter->filter_double_id1 >> 13);
000526  980a              LDR      r0,[sp,#0x28]
000528  0b40              LSRS     r0,r0,#13
00052a  0600              LSLS     r0,r0,#24
00052c  4303              ORRS     r3,r3,r0
;;;572    			tmp_mask[0] = (uint8_t)(can_filter->filter_mask_double_id0 >> 8);
00052e  980c              LDR      r0,[sp,#0x30]
000530  0400              LSLS     r0,r0,#16
000532  0e02              LSRS     r2,r0,#24
000534  0a08              LSRS     r0,r1,#8
000536  0200              LSLS     r0,r0,#8
000538  4310              ORRS     r0,r0,r2
;;;573    			tmp_mask[1] = (uint8_t)can_filter->filter_mask_double_id0;
00053a  990c              LDR      r1,[sp,#0x30]
00053c  22ff              MOVS     r2,#0xff
00053e  0609              LSLS     r1,r1,#24
000540  0212              LSLS     r2,r2,#8
000542  0c09              LSRS     r1,r1,#16
000544  4390              BICS     r0,r0,r2
000546  4011              ANDS     r1,r1,r2
000548  4308              ORRS     r0,r0,r1
;;;574    			tmp_mask[2] = (uint8_t)(can_filter->filter_mask_double_id1 >> 8);
00054a  990d              LDR      r1,[sp,#0x34]
00054c  0212              LSLS     r2,r2,#8
00054e  0a09              LSRS     r1,r1,#8
000550  0409              LSLS     r1,r1,#16
000552  4390              BICS     r0,r0,r2
000554  4011              ANDS     r1,r1,r2
000556  4308              ORRS     r0,r0,r1
;;;575    			tmp_mask[3] = (uint8_t)can_filter->filter_mask_double_id1;
000558  0200              LSLS     r0,r0,#8
00055a  990d              LDR      r1,[sp,#0x34]
00055c  0a00              LSRS     r0,r0,#8
00055e  0609              LSLS     r1,r1,#24
000560  4308              ORRS     r0,r0,r1
                  |L1.1378|
;;;576    		}
;;;577    		CAN_MOD &= ~CAN_MOD_AFM;
000562  49ac              LDR      r1,|L1.2068|
000564  680c              LDR      r4,[r1,#0]
000566  2208              MOVS     r2,#8
000568  4394              BICS     r4,r4,r2
00056a  600c              STR      r4,[r1,#0]
                  |L1.1388|
;;;578    	}
;;;579    	CAN_IDAR0 = tmp_id[0];
00056c  49aa              LDR      r1,|L1.2072|
00056e  b2da              UXTB     r2,r3                 ;577
000570  600a              STR      r2,[r1,#0]
000572  041a              LSLS     r2,r3,#16
000574  0e12              LSRS     r2,r2,#24
;;;580    	CAN_IDAR1 = tmp_id[1];
000576  604a              STR      r2,[r1,#4]
000578  021a              LSLS     r2,r3,#8
00057a  0e12              LSRS     r2,r2,#24
;;;581    	CAN_IDAR2 = tmp_id[2];
00057c  608a              STR      r2,[r1,#8]
00057e  0e1a              LSRS     r2,r3,#24
;;;582    	CAN_IDAR3 = tmp_id[3];
000580  60ca              STR      r2,[r1,#0xc]
000582  b2c2              UXTB     r2,r0
;;;583    	CAN_IDMR0 = tmp_mask[0];
000584  610a              STR      r2,[r1,#0x10]
000586  0402              LSLS     r2,r0,#16
000588  0e12              LSRS     r2,r2,#24
;;;584    	CAN_IDMR1 = tmp_mask[1];
00058a  614a              STR      r2,[r1,#0x14]
00058c  0202              LSLS     r2,r0,#8
00058e  0e12              LSRS     r2,r2,#24
;;;585    	CAN_IDMR2 = tmp_mask[2];
000590  618a              STR      r2,[r1,#0x18]
000592  0e00              LSRS     r0,r0,#24
;;;586    	CAN_IDMR3 = tmp_mask[3];
000594  61c8              STR      r0,[r1,#0x1c]
;;;587    	return SUCCESS;
;;;588    }
000596  bcf0              POP      {r4-r7}
000598  2001              MOVS     r0,#1                 ;587
00059a  b004              ADD      sp,sp,#0x10
00059c  4770              BX       lr
                  |L1.1438|
00059e  2b00              CMP      r3,#0                 ;492
0005a0  9b05              LDR      r3,[sp,#0x14]         ;492
0005a2  d023              BEQ      |L1.1516|
0005a4  00db              LSLS     r3,r3,#3              ;512
0005a6  0e1c              LSRS     r4,r3,#24             ;512
0005a8  4623              MOV      r3,r4                 ;512
0005aa  9c05              LDR      r4,[sp,#0x14]         ;513
0005ac  25ff              MOVS     r5,#0xff              ;513
0005ae  02e4              LSLS     r4,r4,#11             ;513
0005b0  0e24              LSRS     r4,r4,#24             ;513
0005b2  022d              LSLS     r5,r5,#8              ;513
0005b4  0224              LSLS     r4,r4,#8              ;513
0005b6  43ab              BICS     r3,r3,r5              ;513
0005b8  402c              ANDS     r4,r4,r5              ;513
0005ba  4323              ORRS     r3,r3,r4              ;513
0005bc  9c05              LDR      r4,[sp,#0x14]         ;514
0005be  022d              LSLS     r5,r5,#8              ;514
0005c0  04e4              LSLS     r4,r4,#19             ;514
0005c2  0e24              LSRS     r4,r4,#24             ;514
0005c4  0424              LSLS     r4,r4,#16             ;514
0005c6  43ab              BICS     r3,r3,r5              ;514
0005c8  402c              ANDS     r4,r4,r5              ;514
0005ca  4323              ORRS     r3,r3,r4              ;514
0005cc  9c05              LDR      r4,[sp,#0x14]         ;515
0005ce  25fb              MOVS     r5,#0xfb              ;519
0005d0  06e4              LSLS     r4,r4,#27             ;515
0005d2  0e26              LSRS     r6,r4,#24             ;515
0005d4  0634              LSLS     r4,r6,#24             ;515
0005d6  4323              ORRS     r3,r3,r4              ;515
0005d8  2404              MOVS     r4,#4                 ;517
0005da  2800              CMP      r0,#0                 ;516
0005dc  d066              BEQ      |L1.1708|
0005de  021b              LSLS     r3,r3,#8              ;517
0005e0  4326              ORRS     r6,r6,r4              ;517
0005e2  0a1b              LSRS     r3,r3,#8              ;517
0005e4  0630              LSLS     r0,r6,#24             ;517
0005e6  4303              ORRS     r3,r3,r0              ;517
0005e8  e065              B        |L1.1718|
                  |L1.1514|
0005ea  e095              B        |L1.1816|
                  |L1.1516|
0005ec  055b              LSLS     r3,r3,#21             ;493
0005ee  0e1d              LSRS     r5,r3,#24             ;493
0005f0  462b              MOV      r3,r5                 ;493
0005f2  9d05              LDR      r5,[sp,#0x14]         ;494
0005f4  26ff              MOVS     r6,#0xff              ;494
0005f6  076d              LSLS     r5,r5,#29             ;494
0005f8  0236              LSLS     r6,r6,#8              ;494
0005fa  0e2d              LSRS     r5,r5,#24             ;494
0005fc  43b3              BICS     r3,r3,r6              ;494
0005fe  27ff              MOVS     r7,#0xff              ;494
000600  022e              LSLS     r6,r5,#8              ;494
000602  023f              LSLS     r7,r7,#8              ;494
000604  403e              ANDS     r6,r6,r7              ;494
000606  4333              ORRS     r3,r3,r6              ;494
000608  2800              CMP      r0,#0                 ;495
00060a  d008              BEQ      |L1.1566|
00060c  2010              MOVS     r0,#0x10              ;496
00060e  4305              ORRS     r5,r5,r0              ;496
000610  4638              MOV      r0,r7                 ;496
000612  4383              BICS     r3,r3,r0              ;496
000614  0228              LSLS     r0,r5,#8              ;496
000616  463d              MOV      r5,r7                 ;496
000618  4028              ANDS     r0,r0,r5              ;496
00061a  4303              ORRS     r3,r3,r0              ;496
00061c  e008              B        |L1.1584|
                  |L1.1566|
00061e  20ff              MOVS     r0,#0xff              ;498
000620  0200              LSLS     r0,r0,#8              ;498
000622  4025              ANDS     r5,r5,r4              ;498
000624  4383              BICS     r3,r3,r0              ;498
000626  0228              LSLS     r0,r5,#8              ;498
000628  25ff              MOVS     r5,#0xff              ;498
00062a  022d              LSLS     r5,r5,#8              ;498
00062c  4028              ANDS     r0,r0,r5              ;498
00062e  4303              ORRS     r3,r3,r0              ;498
                  |L1.1584|
000630  4668              MOV      r0,sp                 ;500
000632  7e00              LDRB     r0,[r0,#0x18]         ;500
000634  25ff              MOVS     r5,#0xff              ;500
000636  042d              LSLS     r5,r5,#16             ;500
000638  0400              LSLS     r0,r0,#16             ;500
00063a  43ab              BICS     r3,r3,r5              ;500
00063c  4028              ANDS     r0,r0,r5              ;500
00063e  4303              ORRS     r3,r3,r0              ;500
000640  4668              MOV      r0,sp                 ;501
000642  7e40              LDRB     r0,[r0,#0x19]         ;501
000644  26ff              MOVS     r6,#0xff              ;503
000646  0600              LSLS     r0,r0,#24             ;501
000648  4303              ORRS     r3,r3,r0              ;501
00064a  9807              LDR      r0,[sp,#0x1c]         ;502
00064c  0236              LSLS     r6,r6,#8              ;503
00064e  0540              LSLS     r0,r0,#21             ;502
000650  0e05              LSRS     r5,r0,#24             ;502
000652  0a08              LSRS     r0,r1,#8              ;502
000654  0200              LSLS     r0,r0,#8              ;502
000656  9907              LDR      r1,[sp,#0x1c]         ;503
000658  4328              ORRS     r0,r0,r5              ;502
00065a  0149              LSLS     r1,r1,#5              ;503
00065c  25ff              MOVS     r5,#0xff              ;503
00065e  311f              ADDS     r1,r1,#0x1f           ;503
000660  022d              LSLS     r5,r5,#8              ;503
000662  b2c9              UXTB     r1,r1                 ;503
000664  43a8              BICS     r0,r0,r5              ;503
000666  020d              LSLS     r5,r1,#8              ;503
000668  4035              ANDS     r5,r5,r6              ;503
00066a  4328              ORRS     r0,r0,r5              ;503
00066c  2a00              CMP      r2,#0                 ;504
00066e  d006              BEQ      |L1.1662|
000670  4021              ANDS     r1,r1,r4              ;505
000672  4632              MOV      r2,r6                 ;505
000674  0209              LSLS     r1,r1,#8              ;505
000676  4390              BICS     r0,r0,r2              ;505
000678  4011              ANDS     r1,r1,r2              ;505
00067a  4308              ORRS     r0,r0,r1              ;505
00067c  e007              B        |L1.1678|
                  |L1.1662|
00067e  2210              MOVS     r2,#0x10              ;507
000680  4311              ORRS     r1,r1,r2              ;507
000682  22ff              MOVS     r2,#0xff              ;507
000684  0212              LSLS     r2,r2,#8              ;507
000686  0209              LSLS     r1,r1,#8              ;507
000688  4390              BICS     r0,r0,r2              ;507
00068a  4011              ANDS     r1,r1,r2              ;507
00068c  4308              ORRS     r0,r0,r1              ;507
                  |L1.1678|
00068e  a908              ADD      r1,sp,#0x20           ;509
000690  7809              LDRB     r1,[r1,#0]            ;509
000692  22ff              MOVS     r2,#0xff              ;509
000694  0412              LSLS     r2,r2,#16             ;509
000696  0409              LSLS     r1,r1,#16             ;509
000698  4390              BICS     r0,r0,r2              ;509
00069a  4011              ANDS     r1,r1,r2              ;509
00069c  4308              ORRS     r0,r0,r1              ;509
00069e  a908              ADD      r1,sp,#0x20           ;510
0006a0  7849              LDRB     r1,[r1,#1]            ;510
0006a2  0200              LSLS     r0,r0,#8              ;510
0006a4  0a00              LSRS     r0,r0,#8              ;510
0006a6  0609              LSLS     r1,r1,#24             ;510
0006a8  4308              ORRS     r0,r0,r1              ;510
0006aa  e02f              B        |L1.1804|
                  |L1.1708|
0006ac  021b              LSLS     r3,r3,#8              ;519
0006ae  402e              ANDS     r6,r6,r5              ;519
0006b0  0a1b              LSRS     r3,r3,#8              ;519
0006b2  0630              LSLS     r0,r6,#24             ;519
0006b4  4303              ORRS     r3,r3,r0              ;519
                  |L1.1718|
0006b6  9807              LDR      r0,[sp,#0x1c]         ;521
0006b8  00c0              LSLS     r0,r0,#3              ;521
0006ba  0e06              LSRS     r6,r0,#24             ;521
0006bc  0a08              LSRS     r0,r1,#8              ;521
0006be  0200              LSLS     r0,r0,#8              ;521
0006c0  9907              LDR      r1,[sp,#0x1c]         ;522
0006c2  4330              ORRS     r0,r0,r6              ;521
0006c4  02c9              LSLS     r1,r1,#11             ;522
0006c6  26ff              MOVS     r6,#0xff              ;522
0006c8  0e09              LSRS     r1,r1,#24             ;522
0006ca  0236              LSLS     r6,r6,#8              ;522
0006cc  0209              LSLS     r1,r1,#8              ;522
0006ce  43b0              BICS     r0,r0,r6              ;522
0006d0  4031              ANDS     r1,r1,r6              ;522
0006d2  4308              ORRS     r0,r0,r1              ;522
0006d4  9907              LDR      r1,[sp,#0x1c]         ;523
0006d6  0236              LSLS     r6,r6,#8              ;523
0006d8  0949              LSRS     r1,r1,#5              ;523
0006da  0409              LSLS     r1,r1,#16             ;523
0006dc  43b0              BICS     r0,r0,r6              ;523
0006de  4031              ANDS     r1,r1,r6              ;523
0006e0  4308              ORRS     r0,r0,r1              ;523
0006e2  9907              LDR      r1,[sp,#0x1c]         ;524
0006e4  0200              LSLS     r0,r0,#8              ;524
0006e6  06c9              LSLS     r1,r1,#27             ;524
0006e8  0e09              LSRS     r1,r1,#24             ;524
0006ea  1dc9              ADDS     r1,r1,#7              ;524
0006ec  0a00              LSRS     r0,r0,#8              ;524
0006ee  060e              LSLS     r6,r1,#24             ;524
0006f0  4330              ORRS     r0,r0,r6              ;524
0006f2  2a00              CMP      r2,#0                 ;525
0006f4  d005              BEQ      |L1.1794|
0006f6  0200              LSLS     r0,r0,#8              ;526
0006f8  4029              ANDS     r1,r1,r5              ;526
0006fa  0a00              LSRS     r0,r0,#8              ;526
0006fc  0609              LSLS     r1,r1,#24             ;526
0006fe  4308              ORRS     r0,r0,r1              ;526
000700  e004              B        |L1.1804|
                  |L1.1794|
000702  0200              LSLS     r0,r0,#8              ;528
000704  4321              ORRS     r1,r1,r4              ;528
000706  0a00              LSRS     r0,r0,#8              ;528
000708  0609              LSLS     r1,r1,#24             ;528
00070a  4308              ORRS     r0,r0,r1              ;528
                  |L1.1804|
00070c  4941              LDR      r1,|L1.2068|
00070e  680a              LDR      r2,[r1,#0]            ;531
000710  2408              MOVS     r4,#8                 ;531
000712  4322              ORRS     r2,r2,r4              ;531
000714  600a              STR      r2,[r1,#0]            ;531
000716  e729              B        |L1.1388|
                  |L1.1816|
000718  9b09              LDR      r3,[sp,#0x24]         ;534
00071a  27ff              MOVS     r7,#0xff              ;535
00071c  055b              LSLS     r3,r3,#21             ;534
00071e  0e1b              LSRS     r3,r3,#24             ;534
000720  461d              MOV      r5,r3                 ;534
000722  9b09              LDR      r3,[sp,#0x24]         ;535
000724  023f              LSLS     r7,r7,#8              ;535
000726  015e              LSLS     r6,r3,#5              ;535
000728  ab08              ADD      r3,sp,#0x20           ;535
00072a  7b1b              LDRB     r3,[r3,#0xc]          ;535
00072c  469c              MOV      r12,r3                ;535
00072e  091b              LSRS     r3,r3,#4              ;535
000730  431e              ORRS     r6,r6,r3              ;535
000732  b2f3              UXTB     r3,r6                 ;535
000734  26ff              MOVS     r6,#0xff              ;535
000736  0236              LSLS     r6,r6,#8              ;535
000738  43b5              BICS     r5,r5,r6              ;535
00073a  021e              LSLS     r6,r3,#8              ;535
00073c  403e              ANDS     r6,r6,r7              ;535
00073e  4335              ORRS     r5,r5,r6              ;535
000740  2800              CMP      r0,#0                 ;537
000742  d007              BEQ      |L1.1876|
000744  2610              MOVS     r6,#0x10              ;538
000746  4333              ORRS     r3,r3,r6              ;538
000748  463e              MOV      r6,r7                 ;538
00074a  021b              LSLS     r3,r3,#8              ;538
00074c  43b5              BICS     r5,r5,r6              ;538
00074e  4033              ANDS     r3,r3,r6              ;538
000750  431d              ORRS     r5,r5,r3              ;538
000752  e006              B        |L1.1890|
                  |L1.1876|
000754  26ff              MOVS     r6,#0xff              ;540
000756  0236              LSLS     r6,r6,#8              ;540
000758  4023              ANDS     r3,r3,r4              ;540
00075a  021b              LSLS     r3,r3,#8              ;540
00075c  43b5              BICS     r5,r5,r6              ;540
00075e  4033              ANDS     r3,r3,r6              ;540
000760  431d              ORRS     r5,r5,r3              ;540
                  |L1.1890|
000762  9b0a              LDR      r3,[sp,#0x28]         ;542
000764  26ff              MOVS     r6,#0xff              ;542
000766  055b              LSLS     r3,r3,#21             ;542
000768  0e1b              LSRS     r3,r3,#24             ;542
00076a  0436              LSLS     r6,r6,#16             ;542
00076c  041b              LSLS     r3,r3,#16             ;542
00076e  43b5              BICS     r5,r5,r6              ;542
000770  4033              ANDS     r3,r3,r6              ;542
000772  431d              ORRS     r5,r5,r3              ;542
000774  9b0a              LDR      r3,[sp,#0x28]         ;543
000776  4666              MOV      r6,r12                ;543
000778  0736              LSLS     r6,r6,#28             ;543
00077a  015b              LSLS     r3,r3,#5              ;543
00077c  0f36              LSRS     r6,r6,#28             ;543
00077e  4333              ORRS     r3,r3,r6              ;543
000780  b2de              UXTB     r6,r3                 ;543
000782  0633              LSLS     r3,r6,#24             ;543
000784  431d              ORRS     r5,r5,r3              ;543
000786  2800              CMP      r0,#0                 ;545
000788  d006              BEQ      |L1.1944|
00078a  2010              MOVS     r0,#0x10              ;546
00078c  022b              LSLS     r3,r5,#8              ;546
00078e  4306              ORRS     r6,r6,r0              ;546
000790  0a1b              LSRS     r3,r3,#8              ;546
000792  0630              LSLS     r0,r6,#24             ;546
000794  4303              ORRS     r3,r3,r0              ;546
000796  e004              B        |L1.1954|
                  |L1.1944|
000798  022b              LSLS     r3,r5,#8              ;548
00079a  4026              ANDS     r6,r6,r4              ;548
00079c  0a1b              LSRS     r3,r3,#8              ;548
00079e  0630              LSLS     r0,r6,#24             ;548
0007a0  4303              ORRS     r3,r3,r0              ;548
                  |L1.1954|
0007a2  980c              LDR      r0,[sp,#0x30]         ;551
0007a4  0a0e              LSRS     r6,r1,#8              ;551
0007a6  0540              LSLS     r0,r0,#21             ;551
0007a8  0e00              LSRS     r0,r0,#24             ;551
0007aa  0236              LSLS     r6,r6,#8              ;551
0007ac  4306              ORRS     r6,r6,r0              ;551
0007ae  980c              LDR      r0,[sp,#0x30]         ;552
0007b0  27ff              MOVS     r7,#0xff              ;552
0007b2  0141              LSLS     r1,r0,#5              ;552
0007b4  a808              ADD      r0,sp,#0x20           ;552
0007b6  7e00              LDRB     r0,[r0,#0x18]         ;552
0007b8  023f              LSLS     r7,r7,#8              ;552
0007ba  0905              LSRS     r5,r0,#4              ;552
0007bc  4329              ORRS     r1,r1,r5              ;552
0007be  b2cd              UXTB     r5,r1                 ;552
0007c0  21ff              MOVS     r1,#0xff              ;552
0007c2  0209              LSLS     r1,r1,#8              ;552
0007c4  438e              BICS     r6,r6,r1              ;552
0007c6  0229              LSLS     r1,r5,#8              ;552
0007c8  4039              ANDS     r1,r1,r7              ;552
0007ca  430e              ORRS     r6,r6,r1              ;552
0007cc  990d              LDR      r1,[sp,#0x34]         ;554
0007ce  023f              LSLS     r7,r7,#8              ;554
0007d0  08c9              LSRS     r1,r1,#3              ;554
0007d2  0409              LSLS     r1,r1,#16             ;554
0007d4  43be              BICS     r6,r6,r7              ;554
0007d6  4039              ANDS     r1,r1,r7              ;554
0007d8  430e              ORRS     r6,r6,r1              ;554
0007da  990d              LDR      r1,[sp,#0x34]         ;555
0007dc  0700              LSLS     r0,r0,#28             ;555
0007de  0149              LSLS     r1,r1,#5              ;555
0007e0  0f00              LSRS     r0,r0,#28             ;555
0007e2  4301              ORRS     r1,r1,r0              ;555
0007e4  0230              LSLS     r0,r6,#8              ;555
0007e6  b2c9              UXTB     r1,r1                 ;555
0007e8  0a00              LSRS     r0,r0,#8              ;555
0007ea  060e              LSLS     r6,r1,#24             ;555
0007ec  4330              ORRS     r0,r0,r6              ;555
0007ee  2a00              CMP      r2,#0                 ;557
0007f0  d01a              BEQ      |L1.2088|
0007f2  123a              ASRS     r2,r7,#8              ;558
0007f4  4025              ANDS     r5,r5,r4              ;558
0007f6  4390              BICS     r0,r0,r2              ;558
0007f8  022a              LSLS     r2,r5,#8              ;558
0007fa  123d              ASRS     r5,r7,#8              ;558
0007fc  402a              ANDS     r2,r2,r5              ;558
0007fe  4310              ORRS     r0,r0,r2              ;558
000800  0200              LSLS     r0,r0,#8              ;563
000802  4021              ANDS     r1,r1,r4              ;563
000804  0a00              LSRS     r0,r0,#8              ;563
000806  0609              LSLS     r1,r1,#24             ;563
000808  4308              ORRS     r0,r0,r1              ;563
00080a  e6aa              B        |L1.1378|
                  |L1.2060|
                          DCD      0x50050080
                  |L1.2064|
                          DCD      0x00007530
                  |L1.2068|
                          DCD      0x50050000
                  |L1.2072|
                          DCD      0x50050040
                  |L1.2076|
                          DCD      0x50010040
                  |L1.2080|
                          DCD      0x50010000
                  |L1.2084|
000824  ffffffff          DCB      255,255,255,255
                  |L1.2088|
000828  2210              MOVS     r2,#0x10              ;560
00082a  24ff              MOVS     r4,#0xff              ;560
00082c  0224              LSLS     r4,r4,#8              ;560
00082e  4315              ORRS     r5,r5,r2              ;560
000830  43a0              BICS     r0,r0,r4              ;560
000832  022c              LSLS     r4,r5,#8              ;560
000834  25ff              MOVS     r5,#0xff              ;560
000836  022d              LSLS     r5,r5,#8              ;560
000838  402c              ANDS     r4,r4,r5              ;560
00083a  4320              ORRS     r0,r0,r4              ;560
00083c  0200              LSLS     r0,r0,#8              ;565
00083e  4311              ORRS     r1,r1,r2              ;565
000840  0a00              LSRS     r0,r0,#8              ;565
000842  0609              LSLS     r1,r1,#24             ;565
000844  4308              ORRS     r0,r0,r1              ;565
000846  e68c              B        |L1.1378|
;;;589    
                          ENDP


;*** Start embedded assembler ***

#line 1 "RTE\\Device\\BF7006AM64\\BF7006AMxx_can.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___16_BF7006AMxx_can_c_can_init____REV16|
#line 447 ".\\RTE\\CMSIS\\BF7006AM64\\cmsis_armcc.h"
|__asm___16_BF7006AMxx_can_c_can_init____REV16| PROC
#line 448

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___16_BF7006AMxx_can_c_can_init____REVSH|
#line 462
|__asm___16_BF7006AMxx_can_c_can_init____REVSH| PROC
#line 463

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

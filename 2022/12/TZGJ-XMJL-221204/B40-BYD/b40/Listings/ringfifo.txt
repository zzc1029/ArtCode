; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--list --debug -c --asm --interleave --gnu -o.\obj\ringfifo.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\obj\ringfifo.d --cpu=Cortex-M0 --apcs=interwork -Otime --diag_suppress=9931 -I.\src\pt -I.\src -I.\config -I.\RTE\CMSIS\BF7006AM64 -I.\RTE\Device\BF7006AM64 -I.\RTE\SEGGER -I.\RTE\Startup\BF7006AM64 -I.\RTE\_b40 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.8.0\CMSIS\Core\Include -IC:\Keil_v5\ARM\PACK\BYD\BYDMicro_DFP\1.1.0\Device\Include\BF7006AMxx -D__UVISION_VERSION=536 -D_RTE_ -D_RTE_ --omf_browse=.\obj\ringfifo.crf src\ringfifo.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=1

                  fifo_init PROC
;;;16     
;;;17     void fifo_init(RingFifo* fifo,uint8_t *buff,uint32_t len)
000000  2300              MOVS     r3,#0
;;;18     {
;;;19         fifo->wr_index = 0;
000002  6003              STR      r3,[r0,#0]
;;;20         fifo->rd_index = 0;
000004  6043              STR      r3,[r0,#4]
;;;21         fifo->ovfcount = 0;
000006  60c3              STR      r3,[r0,#0xc]
;;;22         fifo->max_len = len;
;;;23         fifo->buff = buff;
000008  6102              STR      r2,[r0,#0x10]
00000a  6141              STR      r1,[r0,#0x14]
;;;24     }
00000c  4770              BX       lr
;;;25     
                          ENDP

                  fifo_reset PROC
;;;26     void fifo_reset(RingFifo*fifo)
00000e  2100              MOVS     r1,#0
;;;27     {
;;;28         fifo->wr_index = 0;
000010  6001              STR      r1,[r0,#0]
;;;29         fifo->rd_index = 0;
000012  6041              STR      r1,[r0,#4]
;;;30         fifo->ovfcount = 0;
000014  60c1              STR      r1,[r0,#0xc]
;;;31     }
000016  4770              BX       lr
;;;32     
                          ENDP

                  fifo_append_bytes PROC
;;;33     uint32_t fifo_append_bytes(RingFifo*fifo,uint8_t* buffer, uint32_t len)
000018  b5f8              PUSH     {r3-r7,lr}
;;;34     {
00001a  4604              MOV      r4,r0
00001c  460f              MOV      r7,r1
;;;35         register uint32_t l,temp,temp2;
;;;36         temp = fifo_get_free(fifo);
00001e  6900              LDR      r0,[r0,#0x10]
000020  6821              LDR      r1,[r4,#0]
000022  4615              MOV      r5,r2                 ;34
000024  6862              LDR      r2,[r4,#4]
000026  1a41              SUBS     r1,r0,r1
000028  1889              ADDS     r1,r1,r2
;;;37         if(len > temp)
00002a  428d              CMP      r5,r1
00002c  d903              BLS      |L1.54|
;;;38         {
;;;39         	len = temp;
00002e  460d              MOV      r5,r1
;;;40         	Fifo_Err_On();
;;;41         	fifo->ovfcount++;
000030  68e1              LDR      r1,[r4,#0xc]
000032  1c49              ADDS     r1,r1,#1
000034  60e1              STR      r1,[r4,#0xc]
                  |L1.54|
;;;42         }
;;;43        	temp = (fifo->wr_index & (fifo->max_len - 1));
000036  6821              LDR      r1,[r4,#0]
000038  1e42              SUBS     r2,r0,#1
00003a  4011              ANDS     r1,r1,r2
;;;44        	temp2 = fifo->max_len - temp;
00003c  1a46              SUBS     r6,r0,r1
;;;45         /* first put the data starting from fifo->in to buffer end */
;;;46         l = Min(len, temp2);
00003e  42b5              CMP      r5,r6
000040  d200              BCS      |L1.68|
000042  462e              MOV      r6,r5
                  |L1.68|
;;;47         memcpy(fifo->buff + temp, buffer, l);
000044  6960              LDR      r0,[r4,#0x14]
000046  4632              MOV      r2,r6
000048  1840              ADDS     r0,r0,r1
00004a  4639              MOV      r1,r7
00004c  f7fffffe          BL       __aeabi_memcpy
;;;48         /* then put the rest (if any) at the beginning of the buffer */
;;;49         memcpy(fifo->buff, buffer + l, len - l);
000050  1baa              SUBS     r2,r5,r6
000052  19b9              ADDS     r1,r7,r6
000054  6960              LDR      r0,[r4,#0x14]
000056  f7fffffe          BL       __aeabi_memcpy
;;;50         fifo->wr_index += len;
00005a  6820              LDR      r0,[r4,#0]
00005c  1940              ADDS     r0,r0,r5
00005e  6020              STR      r0,[r4,#0]
;;;51     
;;;52         return len;
000060  4628              MOV      r0,r5
;;;53     }
000062  bdf8              POP      {r3-r7,pc}
;;;54     
                          ENDP

                  fifo_get_bytes PROC
;;;55     
;;;56     uint32_t fifo_get_bytes(RingFifo*fifo,uint8_t*buffer,uint32_t len)
000064  b5f8              PUSH     {r3-r7,lr}
;;;57     {
000066  4604              MOV      r4,r0
;;;58         register uint32_t l,temp,temp2;
;;;59         temp = fifo->wr_index - fifo->rd_index;
000068  6800              LDR      r0,[r0,#0]
00006a  460f              MOV      r7,r1                 ;57
00006c  6861              LDR      r1,[r4,#4]
00006e  1a45              SUBS     r5,r0,r1
;;;60         len = Min(len, temp);
000070  42aa              CMP      r2,r5
000072  d200              BCS      |L1.118|
000074  4615              MOV      r5,r2
                  |L1.118|
;;;61         temp =(fifo->rd_index & (fifo->max_len - 1));
000076  6860              LDR      r0,[r4,#4]
000078  6921              LDR      r1,[r4,#0x10]
00007a  1e4a              SUBS     r2,r1,#1
00007c  4010              ANDS     r0,r0,r2
;;;62         temp2 = fifo->max_len - temp;
00007e  1a0e              SUBS     r6,r1,r0
;;;63         /* first get the data from fifo->out until the end of the buffer */
;;;64         l = Min(len, temp2);
000080  42b5              CMP      r5,r6
000082  d200              BCS      |L1.134|
000084  462e              MOV      r6,r5
                  |L1.134|
;;;65         memcpy(buffer, fifo->buff + temp, l);
000086  6961              LDR      r1,[r4,#0x14]
000088  4632              MOV      r2,r6
00008a  1809              ADDS     r1,r1,r0
00008c  4638              MOV      r0,r7
00008e  f7fffffe          BL       __aeabi_memcpy
;;;66         /* then get the rest (if any) from the beginning of the buffer */
;;;67         memcpy(buffer + l, fifo->buff, len - l);
000092  1baa              SUBS     r2,r5,r6
000094  19b8              ADDS     r0,r7,r6
000096  6961              LDR      r1,[r4,#0x14]
000098  f7fffffe          BL       __aeabi_memcpy
;;;68         fifo->rd_index += len;
00009c  6860              LDR      r0,[r4,#4]
00009e  1940              ADDS     r0,r0,r5
0000a0  6060              STR      r0,[r4,#4]
;;;69         return len;
0000a2  4628              MOV      r0,r5
;;;70     }
0000a4  bdf8              POP      {r3-r7,pc}
;;;71     
                          ENDP

                  fifo_peek_bytes PROC
;;;73     
;;;74     uint32_t fifo_peek_bytes(RingFifo*fifo,uint32_t offset,uint8_t * buffer, uint32_t len)
0000a6  b5f8              PUSH     {r3-r7,lr}
;;;75     {
0000a8  4604              MOV      r4,r0
;;;76         register uint32_t l,start;
;;;77         start = fifo->rd_index + offset;
0000aa  6840              LDR      r0,[r0,#4]
0000ac  4616              MOV      r6,r2                 ;75
0000ae  1840              ADDS     r0,r0,r1
;;;78         if((start) >= fifo->wr_index)
0000b0  6821              LDR      r1,[r4,#0]
0000b2  4281              CMP      r1,r0
0000b4  d801              BHI      |L1.186|
;;;79             return 0;
0000b6  2000              MOVS     r0,#0
;;;80         len = Min(len, fifo->wr_index - start);
;;;81         /* first get the data from fifo->out until the end of the buffer */
;;;82         l = Min(len, fifo->max_len - (start & (fifo->max_len - 1)));
;;;83         memcpy(buffer, fifo->buff + (start & (fifo->max_len - 1)), l);
;;;84         /* then get the rest (if any) from the beginning of the buffer */
;;;85         memcpy(buffer + l, fifo->buff, len - l);
;;;86         return len;
;;;87     }
0000b8  bdf8              POP      {r3-r7,pc}
                  |L1.186|
0000ba  6821              LDR      r1,[r4,#0]            ;80
0000bc  1a09              SUBS     r1,r1,r0              ;80
0000be  4299              CMP      r1,r3                 ;80
0000c0  d901              BLS      |L1.198|
0000c2  461d              MOV      r5,r3                 ;80
0000c4  e001              B        |L1.202|
                  |L1.198|
0000c6  6821              LDR      r1,[r4,#0]            ;80
0000c8  1a0d              SUBS     r5,r1,r0              ;80
                  |L1.202|
0000ca  6922              LDR      r2,[r4,#0x10]         ;82
0000cc  1e51              SUBS     r1,r2,#1              ;82
0000ce  4001              ANDS     r1,r1,r0              ;82
0000d0  1a57              SUBS     r7,r2,r1              ;82
0000d2  42af              CMP      r7,r5                 ;82
0000d4  d900              BLS      |L1.216|
0000d6  462f              MOV      r7,r5                 ;82
                  |L1.216|
0000d8  6960              LDR      r0,[r4,#0x14]         ;83
0000da  463a              MOV      r2,r7                 ;83
0000dc  1841              ADDS     r1,r0,r1              ;83
0000de  4630              MOV      r0,r6                 ;83
0000e0  f7fffffe          BL       __aeabi_memcpy
0000e4  1bea              SUBS     r2,r5,r7              ;85
0000e6  19f0              ADDS     r0,r6,r7              ;85
0000e8  6961              LDR      r1,[r4,#0x14]         ;85
0000ea  f7fffffe          BL       __aeabi_memcpy
0000ee  4628              MOV      r0,r5                 ;86
0000f0  bdf8              POP      {r3-r7,pc}
;;;88     
                          ENDP


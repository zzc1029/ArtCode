L 1 "RTE\Device\BF7006AM64\BF7006AMxx_adc.c"
N/*!
N    \file  BF7006AMxx_adc.c
N    \brief adc driver
N*/
N
N/*
N    Copyright (C) 2017 Byd
N
N    2019-11-20, V1.0.2, firmware for BF7006AMxx
N*/
N
N#include "BF7006AMxx_adc.h"
L 1 "RTE\Device\BF7006AM64\BF7006AMxx_adc.h" 1
N/*!
N    \file  BF7006AMxx_adc.h
N    \brief definitions for the adc
N*/
N
N/*
N    Copyright (C) 2017 Byd
N
N	2019-11-20, V1.0.2, firmware for BF7006AMxx
N*/
N
N#ifndef BF7006AMxx_ADC_H
N#define BF7006AMxx_ADC_H
N
N#include "BF7006AMxx.h"
L 1 ".\RTE\CMSIS\BF7006AM64\BF7006AMxx.h" 1
N/*!
N    \file  BF7006AMxx.h
N    \brief definitions for the BF7006AMxx
N*/
N
N/*
N    Copyright (C) 2017 Byd
N
N    2017-12-27, V1.0, firmware for BF7006AMxx
N*/
N
N#ifndef BF7006AMXX_H
N#define BF7006AMXX_H
N
N#ifdef __cplusplus
Sextern "C" {
N#endif
N
Ntypedef enum {FALSE = 0, TRUE = !FALSE} bool;
N#define false                   FALSE
N#define true                    TRUE
N
Ntypedef enum {RESET = 0U, SET = !RESET} FlagStatus, ITStatus;
N
Ntypedef enum {DISABLE = 0U, ENABLE = !DISABLE} FunctionalState;
N#define IS_FUNCTIONAL_STATE(STATE) (((STATE) == DISABLE) || ((STATE) == ENABLE))
N
Ntypedef enum {ERROR = 0U, SUCCESS = !ERROR} ErrorStatus;
N
N#define NULL                    ((void *)0)
N    
Ntypedef unsigned char           UINT8;              /* unsigned 8 bit definition    */
Ntypedef unsigned short          UINT16;             /* unsigned 16 bit definition   */
Ntypedef unsigned int            UINT32;             /* unsigned 32 bit definition   */
Ntypedef signed char             INT8;               /* signed 8 bit definition      */
Ntypedef short                   INT16;              /* signed 16 bit definition     */
Ntypedef signed int              INT32;              /* signed 32 bit definition     */
Ntypedef void(*pt2Func)(void);                       /* Pointer to Functions, void argument              */
Ntypedef void(*pt2FuncU8)(UINT8);                    /* Pointer to Functions, UINT8 argument             */
Ntypedef void(*pt2FuncU32)(UINT32);                  /* Pointer to Functions, UINT32 argument            */
Ntypedef void(*pt2FuncU32U8)(UINT32,UINT8);          /* Pointer to Functions, UINT32 and UINT8 argument  */
N    
N/* bit operations */
N#define REG32(addr)             (*((volatile uint32_t *)((uint32_t)(addr))))
N#define REG16(addr)             (*((volatile uint16_t *)((uint32_t)(addr))))
N#define REG8(addr)              (*((volatile uint8_t *)((uint32_t)(addr))))
N#define BIT(x)                  ((uint32_t)(0x01UL<<((uint8_t)(x))))
N//#define BIT(x)                  ((uint8_t)(((uint8_t)0x01)<<((uint32_t)x)))
N
N//#define    BIT(0)               ((uint8_t)((uint8_t)0x01<<(x)))
N#define BITS(start, end)                ((uint32_t)((0xFFFFFFFFUL << ((uint8_t)(start))) & (0xFFFFFFFFUL >> (31U - ((uint8_t)(end)))))) 
N#define GET_BITS(regval, start, end)    (((regval) & BITS((start),(end))) >> (start))
N
N/* -------------------------  Interrupt Number Definition  ------------------------ */
Ntypedef enum IRQn
N{
N/* -------------------  Cortex-M0 Processor Exceptions Numbers  ------------------- */
N  NonMaskableInt_IRQn           = -14,      /*!<  2 Non Maskable Interrupt          */
N  HardFault_IRQn                = -13,      /*!<  3 HardFault Interrupt             */
N  SVCall_IRQn                   =  -5,      /*!< 11 SV Call Interrupt               */
N  PendSV_IRQn                   =  -2,      /*!< 14 Pend SV Interrupt               */
N  SysTick_IRQn                  =  -1,      /*!< 15 System Tick Interrupt           */
N
N/* ----------------------  ARMCM0 Specific Interrupt Numbers  --------------------- */
N  RESERVED0                     =   0,      /*!<                                    */
N  SYS_IRQn                      =   1,      /*!< Flash ECC Error Interrupt          */
N  RESERVED1                     =   2,      /*!<                                    */
N  RESERVED2                     =   3,      /*!<                                    */
N  LVDT_IRQn                     =   4,      /*!< LVDT Interrupt                     */
N  PWM_CH0_IRQn                  =   5,      /*!< PWM channel 0 Interrupt            */
N  PWM_CH1_IRQn                  =   6,      /*!< PWM channel 1 Interrupt            */
N  PWM_CH2_IRQn                  =   7,      /*!< PWM channel 2 Interrupt            */
N  PWM_CH3_IRQn                  =   8,      /*!< PWM channel 3 Interrupt            */
N  PWM_CH4_IRQn                  =   9,      /*!< PWM channel 4 Interrupt            */
N  PWM_CH5_IRQn                  =  10,      /*!< PWM channel 5 Interrupt            */
N  PWM_TOF_IRQN                  =  11,      /*!< PWM overflow Interrupt             */
N  RESERVED4                     =  12,      /*!<                                    */
N  RESERVED5                     =  13,      /*!<                                    */
N  RESERVED6                     =  14,      /*!<                                    */
N  RESERVED7                     =  15,      /*!<                                    */
N  SCI0_ERR_IRQn                 =  16,      /*!< SCI0 ERR Interrupt                 */
N  SCI0_RX_IRQn                  =  17,      /*!< SCI0 RX Interrupt                  */
N  SCI0_TX_IRQn                  =  18,      /*!< SCI0 TX Interrupt                  */
N  SCI1_ERR_IRQn                 =  19,      /*!< SCI1 ERR Interrupt                 */
N  SCI1_RX_IRQn                  =  20,      /*!< SCI1 RX Interrupt                  */
N  SCI1_TX_IRQn                  =  21,      /*!< SCI1 TX Interrupt                  */
N  GPIO_IRQn                     =  22,      /*!< GPIO External Interrupt            */
N  ADC_IRQn                      =  23,      /*!< ADC Interrupt                      */
N  RESERVED8                     =  24,      /*!<                                    */
N  RTC_IRQn                      =  25,      /*!< RTC Interrupt                      */
N  CAN_WAKE_IRQn                 =  26,      /*!< CAN Interrupt                      */
N  CAN_ERR_IRQn                  =  27,      /*!< CAN ERR Interrupt                  */
N  CAN_RX_IRQn                   =  28,      /*!< CAN RX Interrupt                   */
N  CAN_TX_IRQn                   =  29,      /*!< CAN TX Interrupt                   */
N  TIMER0_IRQn                   =  30,      /*!< Timer0 Interrupt                   */
N  TIMER1_IRQn                   =  31,      /*!< Timer1 Interrupt                   */
N} IRQn_Type;
N
N/* ================================================================================ */
N/* ================      Processor and Core Peripheral Section     ================ */
N/* ================================================================================ */
N
N/* --------  Configuration of the Cortex-M4 Processor and Core Peripherals  ------- */
N#define __CM0_REV                   0x0000      /*!< Core revision r0p0                              */
N#define __MPU_PRESENT               0           /*!< MPU present or not                              */
N#define __NVIC_PRIO_BITS            2           /*!< Number of Bits used for Priority Levels         */
N#define __Vendor_SysTickConfig      0           /*!< Set to 1 if different SysTick Config is used    */
N
N#include "core_cm0.h"                           /* Processor and core peripherals                    */
L 1 ".\RTE\CMSIS\BF7006AM64\core_cm0.h" 1
N/**************************************************************************//**
N * @file     core_cm0.h
N * @brief    CMSIS Cortex-M0 Core Peripheral Access Layer Header File
N * @version  V5.0.1
N * @date     25. November 2016
N ******************************************************************************/
N/*
N * Copyright (c) 2009-2016 ARM Limited. All rights reserved.
N *
N * SPDX-License-Identifier: Apache-2.0
N *
N * Licensed under the Apache License, Version 2.0 (the License); you may
N * not use this file except in compliance with the License.
N * You may obtain a copy of the License at
N *
N * www.apache.org/licenses/LICENSE-2.0
N *
N * Unless required by applicable law or agreed to in writing, software
N * distributed under the License is distributed on an AS IS BASIS, WITHOUT
N * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
N * See the License for the specific language governing permissions and
N * limitations under the License.
N */
N
N#if   defined ( __ICCARM__ )
X#if   0L
S #pragma system_include         /* treat file as system include file for MISRA check */
S#elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
X#elif 1L && (5060960 >= 6010050)
S  #pragma clang system_header   /* treat file as system include file */
N#endif
N
N#ifndef __CORE_CM0_H_GENERIC
N#define __CORE_CM0_H_GENERIC
N
N#include "stdint.h"
L 1 ".\RTE\CMSIS\BF7006AM64\stdint.h" 1
N/* Copyright (C) ARM Ltd., 1999,2014 */
N/* All rights reserved */
N
N/*
N * RCS $Revision$
N * Checkin $Date$
N * Revising $Author: agrant $
N */
N
N#ifndef __stdint_h
N#define __stdint_h
N#define __ARMCLIB_VERSION 5060034
N
N  #ifdef __INT64_TYPE__
S    /* armclang predefines '__INT64_TYPE__' and '__INT64_C_SUFFIX__' */
S    #define __INT64 __INT64_TYPE__
N  #else
N    /* armcc has builtin '__int64' which can be used in --strict mode */
N    #define __INT64 __int64
N    #define __INT64_C_SUFFIX__ ll
N  #endif
N  #define __PASTE2(x, y) x ## y
N  #define __PASTE(x, y) __PASTE2(x, y)
N  #define __INT64_C(x)  __ESCAPE__(__PASTE(x, __INT64_C_SUFFIX__))
N  #define __UINT64_C(x)  __ESCAPE__(__PASTE(x ## u, __INT64_C_SUFFIX__))
N  #if defined(__clang__) || (defined(__ARMCC_VERSION) && !defined(__STRICT_ANSI__))
X  #if 0L || (1L && !0L)
N    /* armclang and non-strict armcc allow 'long long' in system headers */
N    #define __LONGLONG long long
N  #else
S    /* strict armcc has '__int64' */
S    #define __LONGLONG __int64
N  #endif
N
N  #ifndef __STDINT_DECLS
N  #define __STDINT_DECLS
N
N    #undef __CLIBNS
N
N    #ifdef __cplusplus
S      namespace std {
S          #define __CLIBNS std::
S          extern "C" {
N    #else
N      #define __CLIBNS
N    #endif  /* __cplusplus */
N
N
N/*
N * 'signed' is redundant below, except for 'signed char' and if
N * the typedef is used to declare a bitfield.
N */
N
N    /* 7.18.1.1 */
N
N    /* exact-width signed integer types */
Ntypedef   signed          char int8_t;
Ntypedef   signed short     int int16_t;
Ntypedef   signed           int int32_t;
Ntypedef   signed       __INT64 int64_t;
Xtypedef   signed       __int64 int64_t;
N
N    /* exact-width unsigned integer types */
Ntypedef unsigned          char uint8_t;
Ntypedef unsigned short     int uint16_t;
Ntypedef unsigned           int uint32_t;
Ntypedef unsigned       __INT64 uint64_t;
Xtypedef unsigned       __int64 uint64_t;
N
N    /* 7.18.1.2 */
N
N    /* smallest type of at least n bits */
N    /* minimum-width signed integer types */
Ntypedef   signed          char int_least8_t;
Ntypedef   signed short     int int_least16_t;
Ntypedef   signed           int int_least32_t;
Ntypedef   signed       __INT64 int_least64_t;
Xtypedef   signed       __int64 int_least64_t;
N
N    /* minimum-width unsigned integer types */
Ntypedef unsigned          char uint_least8_t;
Ntypedef unsigned short     int uint_least16_t;
Ntypedef unsigned           int uint_least32_t;
Ntypedef unsigned       __INT64 uint_least64_t;
Xtypedef unsigned       __int64 uint_least64_t;
N
N    /* 7.18.1.3 */
N
N    /* fastest minimum-width signed integer types */
Ntypedef   signed           int int_fast8_t;
Ntypedef   signed           int int_fast16_t;
Ntypedef   signed           int int_fast32_t;
Ntypedef   signed       __INT64 int_fast64_t;
Xtypedef   signed       __int64 int_fast64_t;
N
N    /* fastest minimum-width unsigned integer types */
Ntypedef unsigned           int uint_fast8_t;
Ntypedef unsigned           int uint_fast16_t;
Ntypedef unsigned           int uint_fast32_t;
Ntypedef unsigned       __INT64 uint_fast64_t;
Xtypedef unsigned       __int64 uint_fast64_t;
N
N    /* 7.18.1.4 integer types capable of holding object pointers */
N#if __sizeof_ptr == 8
X#if 4 == 8
Stypedef   signed       __INT64 intptr_t;
Stypedef unsigned       __INT64 uintptr_t;
N#else
Ntypedef   signed           int intptr_t;
Ntypedef unsigned           int uintptr_t;
N#endif
N
N    /* 7.18.1.5 greatest-width integer types */
Ntypedef   signed     __LONGLONG intmax_t;
Xtypedef   signed     long long intmax_t;
Ntypedef unsigned     __LONGLONG uintmax_t;
Xtypedef unsigned     long long uintmax_t;
N
N
N#if !defined(__cplusplus) || defined(__STDC_LIMIT_MACROS)
X#if !0L || 0L
N
N    /* 7.18.2.1 */
N
N    /* minimum values of exact-width signed integer types */
N#define INT8_MIN                   -128
N#define INT16_MIN                -32768
N#define INT32_MIN          (~0x7fffffff)   /* -2147483648 is unsigned */
N#define INT64_MIN  __INT64_C(~0x7fffffffffffffff) /* -9223372036854775808 is unsigned */
N
N    /* maximum values of exact-width signed integer types */
N#define INT8_MAX                    127
N#define INT16_MAX                 32767
N#define INT32_MAX            2147483647
N#define INT64_MAX  __INT64_C(9223372036854775807)
N
N    /* maximum values of exact-width unsigned integer types */
N#define UINT8_MAX                   255
N#define UINT16_MAX                65535
N#define UINT32_MAX           4294967295u
N#define UINT64_MAX __UINT64_C(18446744073709551615)
N
N    /* 7.18.2.2 */
N
N    /* minimum values of minimum-width signed integer types */
N#define INT_LEAST8_MIN                   -128
N#define INT_LEAST16_MIN                -32768
N#define INT_LEAST32_MIN          (~0x7fffffff)
N#define INT_LEAST64_MIN  __INT64_C(~0x7fffffffffffffff)
N
N    /* maximum values of minimum-width signed integer types */
N#define INT_LEAST8_MAX                    127
N#define INT_LEAST16_MAX                 32767
N#define INT_LEAST32_MAX            2147483647
N#define INT_LEAST64_MAX  __INT64_C(9223372036854775807)
N
N    /* maximum values of minimum-width unsigned integer types */
N#define UINT_LEAST8_MAX                   255
N#define UINT_LEAST16_MAX                65535
N#define UINT_LEAST32_MAX           4294967295u
N#define UINT_LEAST64_MAX __UINT64_C(18446744073709551615)
N
N    /* 7.18.2.3 */
N
N    /* minimum values of fastest minimum-width signed integer types */
N#define INT_FAST8_MIN           (~0x7fffffff)
N#define INT_FAST16_MIN          (~0x7fffffff)
N#define INT_FAST32_MIN          (~0x7fffffff)
N#define INT_FAST64_MIN  __INT64_C(~0x7fffffffffffffff)
N
N    /* maximum values of fastest minimum-width signed integer types */
N#define INT_FAST8_MAX             2147483647
N#define INT_FAST16_MAX            2147483647
N#define INT_FAST32_MAX            2147483647
N#define INT_FAST64_MAX  __INT64_C(9223372036854775807)
N
N    /* maximum values of fastest minimum-width unsigned integer types */
N#define UINT_FAST8_MAX            4294967295u
N#define UINT_FAST16_MAX           4294967295u
N#define UINT_FAST32_MAX           4294967295u
N#define UINT_FAST64_MAX __UINT64_C(18446744073709551615)
N
N    /* 7.18.2.4 */
N
N    /* minimum value of pointer-holding signed integer type */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define INTPTR_MIN INT64_MIN
N#else
N#define INTPTR_MIN INT32_MIN
N#endif
N
N    /* maximum value of pointer-holding signed integer type */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define INTPTR_MAX INT64_MAX
N#else
N#define INTPTR_MAX INT32_MAX
N#endif
N
N    /* maximum value of pointer-holding unsigned integer type */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define UINTPTR_MAX UINT64_MAX
N#else
N#define UINTPTR_MAX UINT32_MAX
N#endif
N
N    /* 7.18.2.5 */
N
N    /* minimum value of greatest-width signed integer type */
N#define INTMAX_MIN  __ESCAPE__(~0x7fffffffffffffffll)
N
N    /* maximum value of greatest-width signed integer type */
N#define INTMAX_MAX  __ESCAPE__(9223372036854775807ll)
N
N    /* maximum value of greatest-width unsigned integer type */
N#define UINTMAX_MAX __ESCAPE__(18446744073709551615ull)
N
N    /* 7.18.3 */
N
N    /* limits of ptrdiff_t */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define PTRDIFF_MIN INT64_MIN
S#define PTRDIFF_MAX INT64_MAX
N#else
N#define PTRDIFF_MIN INT32_MIN
N#define PTRDIFF_MAX INT32_MAX
N#endif
N
N    /* limits of sig_atomic_t */
N#define SIG_ATOMIC_MIN (~0x7fffffff)
N#define SIG_ATOMIC_MAX   2147483647
N
N    /* limit of size_t */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define SIZE_MAX UINT64_MAX
N#else
N#define SIZE_MAX UINT32_MAX
N#endif
N
N    /* limits of wchar_t */
N    /* NB we have to undef and redef because they're defined in both
N     * stdint.h and wchar.h */
N#undef WCHAR_MIN
N#undef WCHAR_MAX
N
N#if defined(__WCHAR32) || (defined(__ARM_SIZEOF_WCHAR_T) && __ARM_SIZEOF_WCHAR_T == 4)
X#if 0L || (0L && __ARM_SIZEOF_WCHAR_T == 4)
S  #define WCHAR_MIN   0
S  #define WCHAR_MAX   0xffffffffU
N#else
N  #define WCHAR_MIN   0
N  #define WCHAR_MAX   65535
N#endif
N
N    /* limits of wint_t */
N#define WINT_MIN (~0x7fffffff)
N#define WINT_MAX 2147483647
N
N#endif /* __STDC_LIMIT_MACROS */
N
N#if !defined(__cplusplus) || defined(__STDC_CONSTANT_MACROS)
X#if !0L || 0L
N
N    /* 7.18.4.1 macros for minimum-width integer constants */
N#define INT8_C(x)   (x)
N#define INT16_C(x)  (x)
N#define INT32_C(x)  (x)
N#define INT64_C(x)  __INT64_C(x)
N
N#define UINT8_C(x)  (x ## u)
N#define UINT16_C(x) (x ## u)
N#define UINT32_C(x) (x ## u)
N#define UINT64_C(x) __UINT64_C(x)
N
N    /* 7.18.4.2 macros for greatest-width integer constants */
N#define INTMAX_C(x)  __ESCAPE__(x ## ll)
N#define UINTMAX_C(x) __ESCAPE__(x ## ull)
N
N#endif /* __STDC_CONSTANT_MACROS */
N
N    #ifdef __cplusplus
S         }  /* extern "C" */
S      }  /* namespace std */
N    #endif /* __cplusplus */
N  #endif /* __STDINT_DECLS */
N
N  #ifdef __cplusplus
S    #ifndef __STDINT_NO_EXPORTS
S      using ::std::int8_t;
S      using ::std::int16_t;
S      using ::std::int32_t;
S      using ::std::int64_t;
S      using ::std::uint8_t;
S      using ::std::uint16_t;
S      using ::std::uint32_t;
S      using ::std::uint64_t;
S      using ::std::int_least8_t;
S      using ::std::int_least16_t;
S      using ::std::int_least32_t;
S      using ::std::int_least64_t;
S      using ::std::uint_least8_t;
S      using ::std::uint_least16_t;
S      using ::std::uint_least32_t;
S      using ::std::uint_least64_t;
S      using ::std::int_fast8_t;
S      using ::std::int_fast16_t;
S      using ::std::int_fast32_t;
S      using ::std::int_fast64_t;
S      using ::std::uint_fast8_t;
S      using ::std::uint_fast16_t;
S      using ::std::uint_fast32_t;
S      using ::std::uint_fast64_t;
S      using ::std::intptr_t;
S      using ::std::uintptr_t;
S      using ::std::intmax_t;
S      using ::std::uintmax_t;
S    #endif
N  #endif /* __cplusplus */
N
N#undef __INT64
N#undef __LONGLONG
N
N#endif /* __stdint_h */
N
N/* end of stdint.h */
L 35 ".\RTE\CMSIS\BF7006AM64\core_cm0.h" 2
N
N#ifdef __cplusplus
S extern "C" {
N#endif
N
N/**
N  \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
N  CMSIS violates the following MISRA-C:2004 rules:
N
N   \li Required Rule 8.5, object/function definition in header file.<br>
N     Function definitions in header files are used to allow 'inlining'.
N
N   \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
N     Unions are used for effective representation of core registers.
N
N   \li Advisory Rule 19.7, Function-like macro defined.<br>
N     Function-like macros are used to allow more efficient code.
N */
N
N
N/*******************************************************************************
N *                 CMSIS definitions
N ******************************************************************************/
N/**
N  \ingroup Cortex_M0
N  @{
N */
N
N/*  CMSIS CM0 definitions */
N#define __CM0_CMSIS_VERSION_MAIN  ( 5U)                                  /*!< [31:16] CMSIS HAL main version */
N#define __CM0_CMSIS_VERSION_SUB   ( 0U)                                  /*!< [15:0]  CMSIS HAL sub version */
N#define __CM0_CMSIS_VERSION       ((__CM0_CMSIS_VERSION_MAIN << 16U) | \
N                                    __CM0_CMSIS_VERSION_SUB           )  /*!< CMSIS HAL version number */
X#define __CM0_CMSIS_VERSION       ((__CM0_CMSIS_VERSION_MAIN << 16U) |                                     __CM0_CMSIS_VERSION_SUB           )   
N
N#define __CORTEX_M                (0U)                                   /*!< Cortex-M Core */
N
N/** __FPU_USED indicates whether an FPU is used or not.
N    This core does not support an FPU at all
N*/
N#define __FPU_USED       0U
N
N#if defined ( __CC_ARM )
X#if 1L
N  #if defined __TARGET_FPU_VFP
X  #if 0L
S    #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
N  #endif
N
N#elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
X#elif 1L && (5060960 >= 6010050)
S  #if defined __ARM_PCS_VFP
S    #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
S  #endif
S
S#elif defined ( __GNUC__ )
S  #if defined (__VFP_FP__) && !defined(__SOFTFP__)
S    #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
S  #endif
S
S#elif defined ( __ICCARM__ )
S  #if defined __ARMVFP__
S    #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
S  #endif
S
S#elif defined ( __TI_ARM__ )
S  #if defined __TI_VFP_SUPPORT__
S    #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
S  #endif
S
S#elif defined ( __TASKING__ )
S  #if defined __FPU_VFP__
S    #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
S  #endif
S
S#elif defined ( __CSMC__ )
S  #if ( __CSMC__ & 0x400U)
S    #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
S  #endif
S
N#endif
N
N#include "cmsis_compiler.h"               /* CMSIS compiler specific defines */
L 1 ".\RTE\CMSIS\BF7006AM64\cmsis_compiler.h" 1
N/**************************************************************************//**
N * @file     cmsis_compiler.h
N * @brief    CMSIS compiler generic header file
N * @version  V5.0.1
N * @date     30. January 2017
N ******************************************************************************/
N/*
N * Copyright (c) 2009-2017 ARM Limited. All rights reserved.
N *
N * SPDX-License-Identifier: Apache-2.0
N *
N * Licensed under the Apache License, Version 2.0 (the License); you may
N * not use this file except in compliance with the License.
N * You may obtain a copy of the License at
N *
N * www.apache.org/licenses/LICENSE-2.0
N *
N * Unless required by applicable law or agreed to in writing, software
N * distributed under the License is distributed on an AS IS BASIS, WITHOUT
N * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
N * See the License for the specific language governing permissions and
N * limitations under the License.
N */
N
N#ifndef __CMSIS_COMPILER_H
N#define __CMSIS_COMPILER_H
N
N#include "stdint.h"
N
N/*
N * ARM Compiler 4/5
N */
N#if   defined ( __CC_ARM )
X#if   1L
N  #include "cmsis_armcc.h"
L 1 ".\RTE\CMSIS\BF7006AM64\cmsis_armcc.h" 1
N/**************************************************************************//**
N * @file     cmsis_armcc.h
N * @brief    CMSIS compiler ARMCC (ARM compiler V5) header file
N * @version  V5.0.1
N * @date     03. February 2017
N ******************************************************************************/
N/*
N * Copyright (c) 2009-2017 ARM Limited. All rights reserved.
N *
N * SPDX-License-Identifier: Apache-2.0
N *
N * Licensed under the Apache License, Version 2.0 (the License); you may
N * not use this file except in compliance with the License.
N * You may obtain a copy of the License at
N *
N * www.apache.org/licenses/LICENSE-2.0
N *
N * Unless required by applicable law or agreed to in writing, software
N * distributed under the License is distributed on an AS IS BASIS, WITHOUT
N * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
N * See the License for the specific language governing permissions and
N * limitations under the License.
N */
N
N#ifndef __CMSIS_ARMCC_H
N#define __CMSIS_ARMCC_H
N
N
N#if defined(__ARMCC_VERSION) && (__ARMCC_VERSION < 400677)
X#if 1L && (5060960 < 400677)
S  #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
N#endif
N
N/* CMSIS compiler control architecture macros */
N#if ((defined (__TARGET_ARCH_6_M  ) && (__TARGET_ARCH_6_M   == 1)) || \
N     (defined (__TARGET_ARCH_6S_M ) && (__TARGET_ARCH_6S_M  == 1))   )
X#if ((0L && (__TARGET_ARCH_6_M   == 1)) ||      (1L && (1  == 1))   )
N  #define __ARM_ARCH_6M__           1
N#endif
N
N#if (defined (__TARGET_ARCH_7_M ) && (__TARGET_ARCH_7_M  == 1))
X#if (0L && (__TARGET_ARCH_7_M  == 1))
S  #define __ARM_ARCH_7M__           1
N#endif
N
N#if (defined (__TARGET_ARCH_7E_M) && (__TARGET_ARCH_7E_M == 1))
X#if (0L && (__TARGET_ARCH_7E_M == 1))
S  #define __ARM_ARCH_7EM__          1
N#endif
N
N  /* __ARM_ARCH_8M_BASE__  not applicable */
N  /* __ARM_ARCH_8M_MAIN__  not applicable */
N
N
N/* CMSIS compiler specific defines */
N#ifndef   __ASM
N  #define __ASM                     __asm
N#endif
N#ifndef   __INLINE
N  #define __INLINE                  __inline
N#endif
N#ifndef   __STATIC_INLINE
N  #define __STATIC_INLINE           static __inline
N#endif
N#ifndef   __NO_RETURN
N  #define __NO_RETURN               __declspec(noreturn)
N#endif
N#ifndef   __USED
N  #define __USED                    __attribute__((used))
N#endif
N#ifndef   __WEAK
N  #define __WEAK                    __attribute__((weak))
N#endif
N#ifndef   __UNALIGNED_UINT32
N  #define __UNALIGNED_UINT32(x)     (*((__packed uint32_t *)(x)))
N#endif
N#ifndef   __ALIGNED
N  #define __ALIGNED(x)              __attribute__((aligned(x)))
N#endif
N#ifndef   __PACKED
N  #define __PACKED                  __attribute__((packed))
N#endif
N#ifndef   __PACKED_STRUCT
N  #define __PACKED_STRUCT           __packed struct
N#endif
N
N
N/* ###########################  Core Function Access  ########################### */
N/** \ingroup  CMSIS_Core_FunctionInterface
N    \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
N  @{
N */
N
N/**
N  \brief   Enable IRQ Interrupts
N  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
N           Can only be executed in Privileged modes.
N */
N/* intrinsic void __enable_irq();     */
N
N
N/**
N  \brief   Disable IRQ Interrupts
N  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
N           Can only be executed in Privileged modes.
N */
N/* intrinsic void __disable_irq();    */
N
N/**
N  \brief   Get Control Register
N  \details Returns the content of the Control Register.
N  \return               Control Register value
N */
N__STATIC_INLINE uint32_t __get_CONTROL(void)
Xstatic __inline uint32_t __get_CONTROL(void)
N{
N  register uint32_t __regControl         __ASM("control");
X  register uint32_t __regControl         __asm("control");
N  return(__regControl);
N}
N
N
N/**
N  \brief   Set Control Register
N  \details Writes the given value to the Control Register.
N  \param [in]    control  Control Register value to set
N */
N__STATIC_INLINE void __set_CONTROL(uint32_t control)
Xstatic __inline void __set_CONTROL(uint32_t control)
N{
N  register uint32_t __regControl         __ASM("control");
X  register uint32_t __regControl         __asm("control");
N  __regControl = control;
N}
N
N
N/**
N  \brief   Get IPSR Register
N  \details Returns the content of the IPSR Register.
N  \return               IPSR Register value
N */
N__STATIC_INLINE uint32_t __get_IPSR(void)
Xstatic __inline uint32_t __get_IPSR(void)
N{
N  register uint32_t __regIPSR          __ASM("ipsr");
X  register uint32_t __regIPSR          __asm("ipsr");
N  return(__regIPSR);
N}
N
N
N/**
N  \brief   Get APSR Register
N  \details Returns the content of the APSR Register.
N  \return               APSR Register value
N */
N__STATIC_INLINE uint32_t __get_APSR(void)
Xstatic __inline uint32_t __get_APSR(void)
N{
N  register uint32_t __regAPSR          __ASM("apsr");
X  register uint32_t __regAPSR          __asm("apsr");
N  return(__regAPSR);
N}
N
N
N/**
N  \brief   Get xPSR Register
N  \details Returns the content of the xPSR Register.
N  \return               xPSR Register value
N */
N__STATIC_INLINE uint32_t __get_xPSR(void)
Xstatic __inline uint32_t __get_xPSR(void)
N{
N  register uint32_t __regXPSR          __ASM("xpsr");
X  register uint32_t __regXPSR          __asm("xpsr");
N  return(__regXPSR);
N}
N
N
N/**
N  \brief   Get Process Stack Pointer
N  \details Returns the current value of the Process Stack Pointer (PSP).
N  \return               PSP Register value
N */
N__STATIC_INLINE uint32_t __get_PSP(void)
Xstatic __inline uint32_t __get_PSP(void)
N{
N  register uint32_t __regProcessStackPointer  __ASM("psp");
X  register uint32_t __regProcessStackPointer  __asm("psp");
N  return(__regProcessStackPointer);
N}
N
N
N/**
N  \brief   Set Process Stack Pointer
N  \details Assigns the given value to the Process Stack Pointer (PSP).
N  \param [in]    topOfProcStack  Process Stack Pointer value to set
N */
N__STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
Xstatic __inline void __set_PSP(uint32_t topOfProcStack)
N{
N  register uint32_t __regProcessStackPointer  __ASM("psp");
X  register uint32_t __regProcessStackPointer  __asm("psp");
N  __regProcessStackPointer = topOfProcStack;
N}
N
N
N/**
N  \brief   Get Main Stack Pointer
N  \details Returns the current value of the Main Stack Pointer (MSP).
N  \return               MSP Register value
N */
N__STATIC_INLINE uint32_t __get_MSP(void)
Xstatic __inline uint32_t __get_MSP(void)
N{
N  register uint32_t __regMainStackPointer     __ASM("msp");
X  register uint32_t __regMainStackPointer     __asm("msp");
N  return(__regMainStackPointer);
N}
N
N
N/**
N  \brief   Set Main Stack Pointer
N  \details Assigns the given value to the Main Stack Pointer (MSP).
N  \param [in]    topOfMainStack  Main Stack Pointer value to set
N */
N__STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
Xstatic __inline void __set_MSP(uint32_t topOfMainStack)
N{
N  register uint32_t __regMainStackPointer     __ASM("msp");
X  register uint32_t __regMainStackPointer     __asm("msp");
N  __regMainStackPointer = topOfMainStack;
N}
N
N
N/**
N  \brief   Get Priority Mask
N  \details Returns the current state of the priority mask bit from the Priority Mask Register.
N  \return               Priority Mask value
N */
N__STATIC_INLINE uint32_t __get_PRIMASK(void)
Xstatic __inline uint32_t __get_PRIMASK(void)
N{
N  register uint32_t __regPriMask         __ASM("primask");
X  register uint32_t __regPriMask         __asm("primask");
N  return(__regPriMask);
N}
N
N
N/**
N  \brief   Set Priority Mask
N  \details Assigns the given value to the Priority Mask Register.
N  \param [in]    priMask  Priority Mask
N */
N__STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
Xstatic __inline void __set_PRIMASK(uint32_t priMask)
N{
N  register uint32_t __regPriMask         __ASM("primask");
X  register uint32_t __regPriMask         __asm("primask");
N  __regPriMask = (priMask);
N}
N
N
N#if ((defined (__ARM_ARCH_7M__ ) && (__ARM_ARCH_7M__  == 1)) || \
N     (defined (__ARM_ARCH_7EM__) && (__ARM_ARCH_7EM__ == 1))     )
X#if ((0L && (__ARM_ARCH_7M__  == 1)) ||      (0L && (__ARM_ARCH_7EM__ == 1))     )
S
S/**
S  \brief   Enable FIQ
S  \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
S           Can only be executed in Privileged modes.
S */
S#define __enable_fault_irq                __enable_fiq
S
S
S/**
S  \brief   Disable FIQ
S  \details Disables FIQ interrupts by setting the F-bit in the CPSR.
S           Can only be executed in Privileged modes.
S */
S#define __disable_fault_irq               __disable_fiq
S
S
S/**
S  \brief   Get Base Priority
S  \details Returns the current value of the Base Priority register.
S  \return               Base Priority register value
S */
S__STATIC_INLINE uint32_t  __get_BASEPRI(void)
S{
S  register uint32_t __regBasePri         __ASM("basepri");
S  return(__regBasePri);
S}
S
S
S/**
S  \brief   Set Base Priority
S  \details Assigns the given value to the Base Priority register.
S  \param [in]    basePri  Base Priority value to set
S */
S__STATIC_INLINE void __set_BASEPRI(uint32_t basePri)
S{
S  register uint32_t __regBasePri         __ASM("basepri");
S  __regBasePri = (basePri & 0xFFU);
S}
S
S
S/**
S  \brief   Set Base Priority with condition
S  \details Assigns the given value to the Base Priority register only if BASEPRI masking is disabled,
S           or the new value increases the BASEPRI priority level.
S  \param [in]    basePri  Base Priority value to set
S */
S__STATIC_INLINE void __set_BASEPRI_MAX(uint32_t basePri)
S{
S  register uint32_t __regBasePriMax      __ASM("basepri_max");
S  __regBasePriMax = (basePri & 0xFFU);
S}
S
S
S/**
S  \brief   Get Fault Mask
S  \details Returns the current value of the Fault Mask register.
S  \return               Fault Mask register value
S */
S__STATIC_INLINE uint32_t __get_FAULTMASK(void)
S{
S  register uint32_t __regFaultMask       __ASM("faultmask");
S  return(__regFaultMask);
S}
S
S
S/**
S  \brief   Set Fault Mask
S  \details Assigns the given value to the Fault Mask register.
S  \param [in]    faultMask  Fault Mask value to set
S */
S__STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
S{
S  register uint32_t __regFaultMask       __ASM("faultmask");
S  __regFaultMask = (faultMask & (uint32_t)1U);
S}
S
N#endif /* ((defined (__ARM_ARCH_7M__ ) && (__ARM_ARCH_7M__  == 1)) || \
N           (defined (__ARM_ARCH_7EM__) && (__ARM_ARCH_7EM__ == 1))     ) */
X#endif  
N
N
N#if ((defined (__ARM_ARCH_7EM__) && (__ARM_ARCH_7EM__ == 1))     )
X#if ((0L && (__ARM_ARCH_7EM__ == 1))     )
S
S/**
S  \brief   Get FPSCR
S  \details Returns the current value of the Floating Point Status/Control register.
S  \return               Floating Point Status/Control register value
S */
S__STATIC_INLINE uint32_t __get_FPSCR(void)
S{
S#if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
S     (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
X#if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) &&      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
S  register uint32_t __regfpscr         __ASM("fpscr");
S  return(__regfpscr);
S#else
S   return(0U);
S#endif
S}
S
S
S/**
S  \brief   Set FPSCR
S  \details Assigns the given value to the Floating Point Status/Control register.
S  \param [in]    fpscr  Floating Point Status/Control value to set
S */
S__STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
S{
S#if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
S     (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
X#if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) &&      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
S  register uint32_t __regfpscr         __ASM("fpscr");
S  __regfpscr = (fpscr);
S#else
S  (void)fpscr;
S#endif
S}
S
N#endif /* ((defined (__ARM_ARCH_7EM__) && (__ARM_ARCH_7EM__ == 1))     ) */
N
N
N
N/*@} end of CMSIS_Core_RegAccFunctions */
N
N
N/* ##########################  Core Instruction Access  ######################### */
N/** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
N  Access to dedicated instructions
N  @{
N*/
N
N/**
N  \brief   No Operation
N  \details No Operation does nothing. This instruction can be used for code alignment purposes.
N */
N#define __NOP                             __nop
N
N
N/**
N  \brief   Wait For Interrupt
N  \details Wait For Interrupt is a hint instruction that suspends execution until one of a number of events occurs.
N */
N#define __WFI                             __wfi
N
N
N/**
N  \brief   Wait For Event
N  \details Wait For Event is a hint instruction that permits the processor to enter
N           a low-power state until one of a number of events occurs.
N */
N#define __WFE                             __wfe
N
N
N/**
N  \brief   Send Event
N  \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
N */
N#define __SEV                             __sev
N
N
N/**
N  \brief   Instruction Synchronization Barrier
N  \details Instruction Synchronization Barrier flushes the pipeline in the processor,
N           so that all instructions following the ISB are fetched from cache or memory,
N           after the instruction has been completed.
N */
N#define __ISB() do {\
N                   __schedule_barrier();\
N                   __isb(0xF);\
N                   __schedule_barrier();\
N                } while (0U)
X#define __ISB() do {                   __schedule_barrier();                   __isb(0xF);                   __schedule_barrier();                } while (0U)
N
N/**
N  \brief   Data Synchronization Barrier
N  \details Acts as a special kind of Data Memory Barrier.
N           It completes when all explicit memory accesses before this instruction complete.
N */
N#define __DSB() do {\
N                   __schedule_barrier();\
N                   __dsb(0xF);\
N                   __schedule_barrier();\
N                } while (0U)
X#define __DSB() do {                   __schedule_barrier();                   __dsb(0xF);                   __schedule_barrier();                } while (0U)
N
N/**
N  \brief   Data Memory Barrier
N  \details Ensures the apparent order of the explicit memory operations before
N           and after the instruction, without ensuring their completion.
N */
N#define __DMB() do {\
N                   __schedule_barrier();\
N                   __dmb(0xF);\
N                   __schedule_barrier();\
N                } while (0U)
X#define __DMB() do {                   __schedule_barrier();                   __dmb(0xF);                   __schedule_barrier();                } while (0U)
N
N/**
N  \brief   Reverse byte order (32 bit)
N  \details Reverses the byte order in integer value.
N  \param [in]    value  Value to reverse
N  \return               Reversed value
N */
N#define __REV                             __rev
N
N
N/**
N  \brief   Reverse byte order (16 bit)
N  \details Reverses the byte order in two unsigned short values.
N  \param [in]    value  Value to reverse
N  \return               Reversed value
N */
N#ifndef __NO_EMBEDDED_ASM
N__attribute__((section(".rev16_text"))) __STATIC_INLINE __ASM uint32_t __REV16(uint32_t value)
X__attribute__((section(".rev16_text"))) static __inline __asm uint32_t __REV16(uint32_t value)
N{
N  rev16 r0, r0
N  bx lr
N}
N#endif
N
N
N/**
N  \brief   Reverse byte order in signed short value
N  \details Reverses the byte order in a signed short value with sign extension to integer.
N  \param [in]    value  Value to reverse
N  \return               Reversed value
N */
N#ifndef __NO_EMBEDDED_ASM
N__attribute__((section(".revsh_text"))) __STATIC_INLINE __ASM int32_t __REVSH(int32_t value)
X__attribute__((section(".revsh_text"))) static __inline __asm int32_t __REVSH(int32_t value)
N{
N  revsh r0, r0
N  bx lr
N}
N#endif
N
N
N/**
N  \brief   Rotate Right in unsigned value (32 bit)
N  \details Rotate Right (immediate) provides the value of the contents of a register rotated by a variable number of bits.
N  \param [in]    op1  Value to rotate
N  \param [in]    op2  Number of Bits to rotate
N  \return               Rotated value
N */
N#define __ROR                             __ror
N
N
N/**
N  \brief   Breakpoint
N  \details Causes the processor to enter Debug state.
N           Debug tools can use this to investigate system state when the instruction at a particular address is reached.
N  \param [in]    value  is ignored by the processor.
N                 If required, a debugger can use it to store additional information about the breakpoint.
N */
N#define __BKPT(value)                       __breakpoint(value)
N
N
N/**
N  \brief   Reverse bit order of value
N  \details Reverses the bit order of the given value.
N  \param [in]    value  Value to reverse
N  \return               Reversed value
N */
N#if ((defined (__ARM_ARCH_7M__ ) && (__ARM_ARCH_7M__  == 1)) || \
N     (defined (__ARM_ARCH_7EM__) && (__ARM_ARCH_7EM__ == 1))     )
X#if ((0L && (__ARM_ARCH_7M__  == 1)) ||      (0L && (__ARM_ARCH_7EM__ == 1))     )
S  #define __RBIT                          __rbit
N#else
N__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
X__attribute__((always_inline)) static __inline uint32_t __RBIT(uint32_t value)
N{
N  uint32_t result;
N  int32_t s = (4 /*sizeof(v)*/ * 8) - 1; /* extra shift needed at end */
N
N  result = value;                      /* r will be reversed bits of v; first get LSB of v */
N  for (value >>= 1U; value; value >>= 1U)
N  {
N    result <<= 1U;
N    result |= value & 1U;
N    s--;
N  }
N  result <<= s;                        /* shift when v's highest bits are zero */
N  return(result);
N}
N#endif
N
N
N/**
N  \brief   Count leading zeros
N  \details Counts the number of leading zeros of a data value.
N  \param [in]  value  Value to count the leading zeros
N  \return             number of leading zeros in value
N */
N#define __CLZ                             __clz
N
N
N#if ((defined (__ARM_ARCH_7M__ ) && (__ARM_ARCH_7M__  == 1)) || \
N     (defined (__ARM_ARCH_7EM__) && (__ARM_ARCH_7EM__ == 1))     )
X#if ((0L && (__ARM_ARCH_7M__  == 1)) ||      (0L && (__ARM_ARCH_7EM__ == 1))     )
S
S/**
S  \brief   LDR Exclusive (8 bit)
S  \details Executes a exclusive LDR instruction for 8 bit value.
S  \param [in]    ptr  Pointer to data
S  \return             value of type uint8_t at (*ptr)
S */
S#if defined(__ARMCC_VERSION) && (__ARMCC_VERSION < 5060020)
S  #define __LDREXB(ptr)                                                        ((uint8_t ) __ldrex(ptr))
S#else
S  #define __LDREXB(ptr)          _Pragma("push") _Pragma("diag_suppress 3731") ((uint8_t ) __ldrex(ptr))  _Pragma("pop")
S#endif
S
S
S/**
S  \brief   LDR Exclusive (16 bit)
S  \details Executes a exclusive LDR instruction for 16 bit values.
S  \param [in]    ptr  Pointer to data
S  \return        value of type uint16_t at (*ptr)
S */
S#if defined(__ARMCC_VERSION) && (__ARMCC_VERSION < 5060020)
S  #define __LDREXH(ptr)                                                        ((uint16_t) __ldrex(ptr))
S#else
S  #define __LDREXH(ptr)          _Pragma("push") _Pragma("diag_suppress 3731") ((uint16_t) __ldrex(ptr))  _Pragma("pop")
S#endif
S
S
S/**
S  \brief   LDR Exclusive (32 bit)
S  \details Executes a exclusive LDR instruction for 32 bit values.
S  \param [in]    ptr  Pointer to data
S  \return        value of type uint32_t at (*ptr)
S */
S#if defined(__ARMCC_VERSION) && (__ARMCC_VERSION < 5060020)
S  #define __LDREXW(ptr)                                                        ((uint32_t ) __ldrex(ptr))
S#else
S  #define __LDREXW(ptr)          _Pragma("push") _Pragma("diag_suppress 3731") ((uint32_t ) __ldrex(ptr))  _Pragma("pop")
S#endif
S
S
S/**
S  \brief   STR Exclusive (8 bit)
S  \details Executes a exclusive STR instruction for 8 bit values.
S  \param [in]  value  Value to store
S  \param [in]    ptr  Pointer to location
S  \return          0  Function succeeded
S  \return          1  Function failed
S */
S#if defined(__ARMCC_VERSION) && (__ARMCC_VERSION < 5060020)
S  #define __STREXB(value, ptr)                                                 __strex(value, ptr)
S#else
S  #define __STREXB(value, ptr)   _Pragma("push") _Pragma("diag_suppress 3731") __strex(value, ptr)        _Pragma("pop")
S#endif
S
S
S/**
S  \brief   STR Exclusive (16 bit)
S  \details Executes a exclusive STR instruction for 16 bit values.
S  \param [in]  value  Value to store
S  \param [in]    ptr  Pointer to location
S  \return          0  Function succeeded
S  \return          1  Function failed
S */
S#if defined(__ARMCC_VERSION) && (__ARMCC_VERSION < 5060020)
S  #define __STREXH(value, ptr)                                                 __strex(value, ptr)
S#else
S  #define __STREXH(value, ptr)   _Pragma("push") _Pragma("diag_suppress 3731") __strex(value, ptr)        _Pragma("pop")
S#endif
S
S
S/**
S  \brief   STR Exclusive (32 bit)
S  \details Executes a exclusive STR instruction for 32 bit values.
S  \param [in]  value  Value to store
S  \param [in]    ptr  Pointer to location
S  \return          0  Function succeeded
S  \return          1  Function failed
S */
S#if defined(__ARMCC_VERSION) && (__ARMCC_VERSION < 5060020)
S  #define __STREXW(value, ptr)                                                 __strex(value, ptr)
S#else
S  #define __STREXW(value, ptr)   _Pragma("push") _Pragma("diag_suppress 3731") __strex(value, ptr)        _Pragma("pop")
S#endif
S
S
S/**
S  \brief   Remove the exclusive lock
S  \details Removes the exclusive lock which is created by LDREX.
S */
S#define __CLREX                           __clrex
S
S
S/**
S  \brief   Signed Saturate
S  \details Saturates a signed value.
S  \param [in]  value  Value to be saturated
S  \param [in]    sat  Bit position to saturate to (1..32)
S  \return             Saturated value
S */
S#define __SSAT                            __ssat
S
S
S/**
S  \brief   Unsigned Saturate
S  \details Saturates an unsigned value.
S  \param [in]  value  Value to be saturated
S  \param [in]    sat  Bit position to saturate to (0..31)
S  \return             Saturated value
S */
S#define __USAT                            __usat
S
S
S/**
S  \brief   Rotate Right with Extend (32 bit)
S  \details Moves each bit of a bitstring right by one bit.
S           The carry input is shifted in at the left end of the bitstring.
S  \param [in]    value  Value to rotate
S  \return               Rotated value
S */
S#ifndef __NO_EMBEDDED_ASM
S__attribute__((section(".rrx_text"))) __STATIC_INLINE __ASM uint32_t __RRX(uint32_t value)
S{
S  rrx r0, r0
S  bx lr
S}
S#endif
S
S
S/**
S  \brief   LDRT Unprivileged (8 bit)
S  \details Executes a Unprivileged LDRT instruction for 8 bit value.
S  \param [in]    ptr  Pointer to data
S  \return             value of type uint8_t at (*ptr)
S */
S#define __LDRBT(ptr)                      ((uint8_t )  __ldrt(ptr))
S
S
S/**
S  \brief   LDRT Unprivileged (16 bit)
S  \details Executes a Unprivileged LDRT instruction for 16 bit values.
S  \param [in]    ptr  Pointer to data
S  \return        value of type uint16_t at (*ptr)
S */
S#define __LDRHT(ptr)                      ((uint16_t)  __ldrt(ptr))
S
S
S/**
S  \brief   LDRT Unprivileged (32 bit)
S  \details Executes a Unprivileged LDRT instruction for 32 bit values.
S  \param [in]    ptr  Pointer to data
S  \return        value of type uint32_t at (*ptr)
S */
S#define __LDRT(ptr)                       ((uint32_t ) __ldrt(ptr))
S
S
S/**
S  \brief   STRT Unprivileged (8 bit)
S  \details Executes a Unprivileged STRT instruction for 8 bit values.
S  \param [in]  value  Value to store
S  \param [in]    ptr  Pointer to location
S */
S#define __STRBT(value, ptr)               __strt(value, ptr)
S
S
S/**
S  \brief   STRT Unprivileged (16 bit)
S  \details Executes a Unprivileged STRT instruction for 16 bit values.
S  \param [in]  value  Value to store
S  \param [in]    ptr  Pointer to location
S */
S#define __STRHT(value, ptr)               __strt(value, ptr)
S
S
S/**
S  \brief   STRT Unprivileged (32 bit)
S  \details Executes a Unprivileged STRT instruction for 32 bit values.
S  \param [in]  value  Value to store
S  \param [in]    ptr  Pointer to location
S */
S#define __STRT(value, ptr)                __strt(value, ptr)
S
N#endif /* ((defined (__ARM_ARCH_7M__ ) && (__ARM_ARCH_7M__  == 1)) || \
N           (defined (__ARM_ARCH_7EM__) && (__ARM_ARCH_7EM__ == 1))     ) */
X#endif  
N
N/*@}*/ /* end of group CMSIS_Core_InstructionInterface */
N
N
N/* ###################  Compiler specific Intrinsics  ########################### */
N/** \defgroup CMSIS_SIMD_intrinsics CMSIS SIMD Intrinsics
N  Access to dedicated SIMD instructions
N  @{
N*/
N
N#if ((defined (__ARM_ARCH_7EM__) && (__ARM_ARCH_7EM__ == 1))     )
X#if ((0L && (__ARM_ARCH_7EM__ == 1))     )
S
S#define __SADD8                           __sadd8
S#define __QADD8                           __qadd8
S#define __SHADD8                          __shadd8
S#define __UADD8                           __uadd8
S#define __UQADD8                          __uqadd8
S#define __UHADD8                          __uhadd8
S#define __SSUB8                           __ssub8
S#define __QSUB8                           __qsub8
S#define __SHSUB8                          __shsub8
S#define __USUB8                           __usub8
S#define __UQSUB8                          __uqsub8
S#define __UHSUB8                          __uhsub8
S#define __SADD16                          __sadd16
S#define __QADD16                          __qadd16
S#define __SHADD16                         __shadd16
S#define __UADD16                          __uadd16
S#define __UQADD16                         __uqadd16
S#define __UHADD16                         __uhadd16
S#define __SSUB16                          __ssub16
S#define __QSUB16                          __qsub16
S#define __SHSUB16                         __shsub16
S#define __USUB16                          __usub16
S#define __UQSUB16                         __uqsub16
S#define __UHSUB16                         __uhsub16
S#define __SASX                            __sasx
S#define __QASX                            __qasx
S#define __SHASX                           __shasx
S#define __UASX                            __uasx
S#define __UQASX                           __uqasx
S#define __UHASX                           __uhasx
S#define __SSAX                            __ssax
S#define __QSAX                            __qsax
S#define __SHSAX                           __shsax
S#define __USAX                            __usax
S#define __UQSAX                           __uqsax
S#define __UHSAX                           __uhsax
S#define __USAD8                           __usad8
S#define __USADA8                          __usada8
S#define __SSAT16                          __ssat16
S#define __USAT16                          __usat16
S#define __UXTB16                          __uxtb16
S#define __UXTAB16                         __uxtab16
S#define __SXTB16                          __sxtb16
S#define __SXTAB16                         __sxtab16
S#define __SMUAD                           __smuad
S#define __SMUADX                          __smuadx
S#define __SMLAD                           __smlad
S#define __SMLADX                          __smladx
S#define __SMLALD                          __smlald
S#define __SMLALDX                         __smlaldx
S#define __SMUSD                           __smusd
S#define __SMUSDX                          __smusdx
S#define __SMLSD                           __smlsd
S#define __SMLSDX                          __smlsdx
S#define __SMLSLD                          __smlsld
S#define __SMLSLDX                         __smlsldx
S#define __SEL                             __sel
S#define __QADD                            __qadd
S#define __QSUB                            __qsub
S
S#define __PKHBT(ARG1,ARG2,ARG3)          ( ((((uint32_t)(ARG1))          ) & 0x0000FFFFUL) |  \
S                                           ((((uint32_t)(ARG2)) << (ARG3)) & 0xFFFF0000UL)  )
X#define __PKHBT(ARG1,ARG2,ARG3)          ( ((((uint32_t)(ARG1))          ) & 0x0000FFFFUL) |                                             ((((uint32_t)(ARG2)) << (ARG3)) & 0xFFFF0000UL)  )
S
S#define __PKHTB(ARG1,ARG2,ARG3)          ( ((((uint32_t)(ARG1))          ) & 0xFFFF0000UL) |  \
S                                           ((((uint32_t)(ARG2)) >> (ARG3)) & 0x0000FFFFUL)  )
X#define __PKHTB(ARG1,ARG2,ARG3)          ( ((((uint32_t)(ARG1))          ) & 0xFFFF0000UL) |                                             ((((uint32_t)(ARG2)) >> (ARG3)) & 0x0000FFFFUL)  )
S
S#define __SMMLA(ARG1,ARG2,ARG3)          ( (int32_t)((((int64_t)(ARG1) * (ARG2)) + \
S                                                      ((int64_t)(ARG3) << 32U)     ) >> 32U))
X#define __SMMLA(ARG1,ARG2,ARG3)          ( (int32_t)((((int64_t)(ARG1) * (ARG2)) +                                                       ((int64_t)(ARG3) << 32U)     ) >> 32U))
S
N#endif /* ((defined (__ARM_ARCH_7EM__) && (__ARM_ARCH_7EM__ == 1))     ) */
N/*@} end of group CMSIS_SIMD_intrinsics */
N
N
N#endif /* __CMSIS_ARMCC_H */
L 35 ".\RTE\CMSIS\BF7006AM64\cmsis_compiler.h" 2
N
N
N/*
N * ARM Compiler 6 (armclang)
N */
N#elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
X#elif 1L && (5060960 >= 6010050)
S  #include "cmsis_armclang.h"
S
S
S/*
S * GNU Compiler
S */
S#elif defined ( __GNUC__ )
S  #include "cmsis_gcc.h"
S
S
S/*
S * IAR Compiler
S */
S#elif defined ( __ICCARM__ )
S
S  #ifndef   __ASM
S    #define __ASM                     __asm
S  #endif
S  #ifndef   __INLINE
S    #define __INLINE                  inline
S  #endif
S  #ifndef   __STATIC_INLINE
S    #define __STATIC_INLINE           static inline
S  #endif
S
S  #include <cmsis_iar.h>
S
S  #ifndef   __NO_RETURN
S    #define __NO_RETURN               __noreturn
S  #endif
S  #ifndef   __USED
S    #define __USED                    __root
S  #endif
S  #ifndef   __WEAK
S    #define __WEAK                    __weak
S  #endif
S  #ifndef   __UNALIGNED_UINT32
S    __packed struct T_UINT32 { uint32_t v; };
S      #define __UNALIGNED_UINT32(x)     (((struct T_UINT32 *)(x))->v)
S  #endif
S  #ifndef   __ALIGNED
S    #warning No compiler specific solution for __ALIGNED. __ALIGNED is ignored.
S    #define __ALIGNED(x)
S  #endif
S  #ifndef   __PACKED
S    #define __PACKED                  __packed
S  #endif
S  #ifndef   __PACKED_STRUCT
S    #define __PACKED_STRUCT           __packed struct
S  #endif
S
S
S/*
S * TI ARM Compiler
S */
S#elif defined ( __TI_ARM__ )
S  #include <cmsis_ccs.h>
S
S  #ifndef   __ASM
S    #define __ASM                     __asm
S  #endif
S  #ifndef   __INLINE
S    #define __INLINE                  inline
S  #endif
S  #ifndef   __STATIC_INLINE
S    #define __STATIC_INLINE           static inline
S  #endif
S  #ifndef   __NO_RETURN
S    #define __NO_RETURN               __attribute__((noreturn))
S  #endif
S  #ifndef   __USED
S    #define __USED                    __attribute__((used))
S  #endif
S  #ifndef   __WEAK
S    #define __WEAK                    __attribute__((weak))
S  #endif
S  #ifndef   __UNALIGNED_UINT32
S    struct __attribute__((packed)) T_UINT32 { uint32_t v; };
S    #define __UNALIGNED_UINT32(x)     (((struct T_UINT32 *)(x))->v)
S  #endif
S  #ifndef   __ALIGNED
S    #define __ALIGNED(x)              __attribute__((aligned(x)))
S  #endif
S  #ifndef   __PACKED
S    #define __PACKED                  __attribute__((packed))
S  #endif
S  #ifndef   __PACKED_STRUCT
S    #define __PACKED_STRUCT           struct __attribute__((packed))
S  #endif
S
S
S/*
S * TASKING Compiler
S */
S#elif defined ( __TASKING__ )
S  /*
S   * The CMSIS functions have been implemented as intrinsics in the compiler.
S   * Please use "carm -?i" to get an up to date list of all intrinsics,
S   * Including the CMSIS ones.
S   */
S
S  #ifndef   __ASM
S    #define __ASM                     __asm
S  #endif
S  #ifndef   __INLINE
S    #define __INLINE                  inline
S  #endif
S  #ifndef   __STATIC_INLINE
S    #define __STATIC_INLINE           static inline
S  #endif
S  #ifndef   __NO_RETURN
S    #define __NO_RETURN               __attribute__((noreturn))
S  #endif
S  #ifndef   __USED
S    #define __USED                    __attribute__((used))
S  #endif
S  #ifndef   __WEAK
S    #define __WEAK                    __attribute__((weak))
S  #endif
S  #ifndef   __UNALIGNED_UINT32
S    struct __packed__ T_UINT32 { uint32_t v; };
S    #define __UNALIGNED_UINT32(x)     (((struct T_UINT32 *)(x))->v)
S  #endif
S  #ifndef   __ALIGNED
S    #define __ALIGNED(x)              __align(x)
S  #endif
S  #ifndef   __PACKED
S    #define __PACKED                  __packed__
S  #endif
S  #ifndef   __PACKED_STRUCT
S    #define __PACKED_STRUCT           struct __packed__
S  #endif
S
S
S/*
S * COSMIC Compiler
S */
S#elif defined ( __CSMC__ )
S   #include <cmsis_csm.h>
S
S #ifndef   __ASM
S    #define __ASM                     _asm
S  #endif
S  #ifndef   __INLINE
S    #define __INLINE                  inline
S  #endif
S  #ifndef   __STATIC_INLINE
S    #define __STATIC_INLINE           static inline
S  #endif
S  #ifndef   __NO_RETURN
S    // NO RETURN is automatically detected hence no warning here
S    #define __NO_RETURN
S  #endif
S  #ifndef   __USED
S    #warning No compiler specific solution for __USED. __USED is ignored.
S    #define __USED
S  #endif
S  #ifndef   __WEAK
S    #define __WEAK                    __weak
S  #endif
S  #ifndef   __UNALIGNED_UINT32
S    @packed struct T_UINT32 { uint32_t v; };
S    #define __UNALIGNED_UINT32(x)     (((struct T_UINT32 *)(x))->v)
S  #endif
S  #ifndef   __ALIGNED
S    #warning No compiler specific solution for __ALIGNED. __ALIGNED is ignored.
S    #define __ALIGNED(x)
S  #endif
S  #ifndef   __PACKED
S    #define __PACKED                  @packed
S  #endif
S  #ifndef   __PACKED_STRUCT
S    #define __PACKED_STRUCT           @packed struct
S  #endif
S
S
S#else
S  #error Unknown compiler.
N#endif
N
N
N#endif /* __CMSIS_COMPILER_H */
N
L 114 ".\RTE\CMSIS\BF7006AM64\core_cm0.h" 2
N
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /* __CORE_CM0_H_GENERIC */
N
N#ifndef __CMSIS_GENERIC
N
N#ifndef __CORE_CM0_H_DEPENDANT
N#define __CORE_CM0_H_DEPENDANT
N
N#ifdef __cplusplus
S extern "C" {
N#endif
N
N/* check device defines and use defaults */
N#if defined __CHECK_DEVICE_DEFINES
X#if 0L
S  #ifndef __CM0_REV
S    #define __CM0_REV               0x0000U
S    #warning "__CM0_REV not defined in device header file; using default!"
S  #endif
S
S  #ifndef __NVIC_PRIO_BITS
S    #define __NVIC_PRIO_BITS          2U
S    #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
S  #endif
S
S  #ifndef __Vendor_SysTickConfig
S    #define __Vendor_SysTickConfig    0U
S    #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
S  #endif
N#endif
N
N/* IO definitions (access restrictions to peripheral registers) */
N/**
N    \defgroup CMSIS_glob_defs CMSIS Global Defines
N
N    <strong>IO Type Qualifiers</strong> are used
N    \li to specify the access to peripheral variables.
N    \li for automatic generation of peripheral register debug information.
N*/
N#ifdef __cplusplus
S  #define   __I     volatile             /*!< Defines 'read only' permissions */
N#else
N  #define   __I     volatile const       /*!< Defines 'read only' permissions */
N#endif
N#define     __O     volatile             /*!< Defines 'write only' permissions */
N#define     __IO    volatile             /*!< Defines 'read / write' permissions */
N
N/* following defines should be used for structure members */
N#define     __IM     volatile const      /*! Defines 'read only' structure member permissions */
N#define     __OM     volatile            /*! Defines 'write only' structure member permissions */
N#define     __IOM    volatile            /*! Defines 'read / write' structure member permissions */
N
N/*@} end of group Cortex_M0 */
N
N
N
N/*******************************************************************************
N *                 Register Abstraction
N  Core Register contain:
N  - Core Register
N  - Core NVIC Register
N  - Core SCB Register
N  - Core SysTick Register
N ******************************************************************************/
N/**
N  \defgroup CMSIS_core_register Defines and Type Definitions
N  \brief Type definitions and defines for Cortex-M processor based devices.
N*/
N
N/**
N  \ingroup    CMSIS_core_register
N  \defgroup   CMSIS_CORE  Status and Control Registers
N  \brief      Core Register type definitions.
N  @{
N */
N
N/**
N  \brief  Union type to access the Application Program Status Register (APSR).
N */
Ntypedef union
N{
N  struct
N  {
N    uint32_t _reserved0:28;              /*!< bit:  0..27  Reserved */
N    uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
N    uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
N    uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
N    uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
N  } b;                                   /*!< Structure used for bit  access */
N  uint32_t w;                            /*!< Type      used for word access */
N} APSR_Type;
N
N/* APSR Register Definitions */
N#define APSR_N_Pos                         31U                                            /*!< APSR: N Position */
N#define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR: N Mask */
N
N#define APSR_Z_Pos                         30U                                            /*!< APSR: Z Position */
N#define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR: Z Mask */
N
N#define APSR_C_Pos                         29U                                            /*!< APSR: C Position */
N#define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR: C Mask */
N
N#define APSR_V_Pos                         28U                                            /*!< APSR: V Position */
N#define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR: V Mask */
N
N
N/**
N  \brief  Union type to access the Interrupt Program Status Register (IPSR).
N */
Ntypedef union
N{
N  struct
N  {
N    uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
N    uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved */
N  } b;                                   /*!< Structure used for bit  access */
N  uint32_t w;                            /*!< Type      used for word access */
N} IPSR_Type;
N
N/* IPSR Register Definitions */
N#define IPSR_ISR_Pos                        0U                                            /*!< IPSR: ISR Position */
N#define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR: ISR Mask */
N
N
N/**
N  \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
N */
Ntypedef union
N{
N  struct
N  {
N    uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
N    uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved */
N    uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0) */
N    uint32_t _reserved1:3;               /*!< bit: 25..27  Reserved */
N    uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
N    uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
N    uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
N    uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
N  } b;                                   /*!< Structure used for bit  access */
N  uint32_t w;                            /*!< Type      used for word access */
N} xPSR_Type;
N
N/* xPSR Register Definitions */
N#define xPSR_N_Pos                         31U                                            /*!< xPSR: N Position */
N#define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR: N Mask */
N
N#define xPSR_Z_Pos                         30U                                            /*!< xPSR: Z Position */
N#define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR: Z Mask */
N
N#define xPSR_C_Pos                         29U                                            /*!< xPSR: C Position */
N#define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR: C Mask */
N
N#define xPSR_V_Pos                         28U                                            /*!< xPSR: V Position */
N#define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR: V Mask */
N
N#define xPSR_T_Pos                         24U                                            /*!< xPSR: T Position */
N#define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR: T Mask */
N
N#define xPSR_ISR_Pos                        0U                                            /*!< xPSR: ISR Position */
N#define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR: ISR Mask */
N
N
N/**
N  \brief  Union type to access the Control Registers (CONTROL).
N */
Ntypedef union
N{
N  struct
N  {
N    uint32_t _reserved0:1;               /*!< bit:      0  Reserved */
N    uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used */
N    uint32_t _reserved1:30;              /*!< bit:  2..31  Reserved */
N  } b;                                   /*!< Structure used for bit  access */
N  uint32_t w;                            /*!< Type      used for word access */
N} CONTROL_Type;
N
N/* CONTROL Register Definitions */
N#define CONTROL_SPSEL_Pos                   1U                                            /*!< CONTROL: SPSEL Position */
N#define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONTROL: SPSEL Mask */
N
N/*@} end of group CMSIS_CORE */
N
N
N/**
N  \ingroup    CMSIS_core_register
N  \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
N  \brief      Type definitions for the NVIC Registers
N  @{
N */
N
N/**
N  \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
N */
Ntypedef struct
N{
N  __IOM uint32_t ISER[1U];               /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
X  volatile uint32_t ISER[1U];                
N        uint32_t RESERVED0[31U];
N  __IOM uint32_t ICER[1U];               /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register */
X  volatile uint32_t ICER[1U];                
N        uint32_t RSERVED1[31U];
N  __IOM uint32_t ISPR[1U];               /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register */
X  volatile uint32_t ISPR[1U];                
N        uint32_t RESERVED2[31U];
N  __IOM uint32_t ICPR[1U];               /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register */
X  volatile uint32_t ICPR[1U];                
N        uint32_t RESERVED3[31U];
N        uint32_t RESERVED4[64U];
N  __IOM uint32_t IP[8U];                 /*!< Offset: 0x300 (R/W)  Interrupt Priority Register */
X  volatile uint32_t IP[8U];                  
N}  NVIC_Type;
N
N/*@} end of group CMSIS_NVIC */
N
N
N/**
N  \ingroup  CMSIS_core_register
N  \defgroup CMSIS_SCB     System Control Block (SCB)
N  \brief    Type definitions for the System Control Block Registers
N  @{
N */
N
N/**
N  \brief  Structure type to access the System Control Block (SCB).
N */
Ntypedef struct
N{
N  __IM  uint32_t CPUID;                  /*!< Offset: 0x000 (R/ )  CPUID Base Register */
X  volatile const  uint32_t CPUID;                   
N  __IOM uint32_t ICSR;                   /*!< Offset: 0x004 (R/W)  Interrupt Control and State Register */
X  volatile uint32_t ICSR;                    
N        uint32_t RESERVED0;
N  __IOM uint32_t AIRCR;                  /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset Control Register */
X  volatile uint32_t AIRCR;                   
N  __IOM uint32_t SCR;                    /*!< Offset: 0x010 (R/W)  System Control Register */
X  volatile uint32_t SCR;                     
N  __IOM uint32_t CCR;                    /*!< Offset: 0x014 (R/W)  Configuration Control Register */
X  volatile uint32_t CCR;                     
N        uint32_t RESERVED1;
N  __IOM uint32_t SHP[2U];                /*!< Offset: 0x01C (R/W)  System Handlers Priority Registers. [0] is RESERVED */
X  volatile uint32_t SHP[2U];                 
N  __IOM uint32_t SHCSR;                  /*!< Offset: 0x024 (R/W)  System Handler Control and State Register */
X  volatile uint32_t SHCSR;                   
N} SCB_Type;
N
N/* SCB CPUID Register Definitions */
N#define SCB_CPUID_IMPLEMENTER_Pos          24U                                            /*!< SCB CPUID: IMPLEMENTER Position */
N#define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB CPUID: IMPLEMENTER Mask */
N
N#define SCB_CPUID_VARIANT_Pos              20U                                            /*!< SCB CPUID: VARIANT Position */
N#define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB CPUID: VARIANT Mask */
N
N#define SCB_CPUID_ARCHITECTURE_Pos         16U                                            /*!< SCB CPUID: ARCHITECTURE Position */
N#define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB CPUID: ARCHITECTURE Mask */
N
N#define SCB_CPUID_PARTNO_Pos                4U                                            /*!< SCB CPUID: PARTNO Position */
N#define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB CPUID: PARTNO Mask */
N
N#define SCB_CPUID_REVISION_Pos              0U                                            /*!< SCB CPUID: REVISION Position */
N#define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB CPUID: REVISION Mask */
N
N/* SCB Interrupt Control State Register Definitions */
N#define SCB_ICSR_NMIPENDSET_Pos            31U                                            /*!< SCB ICSR: NMIPENDSET Position */
N#define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB ICSR: NMIPENDSET Mask */
N
N#define SCB_ICSR_PENDSVSET_Pos             28U                                            /*!< SCB ICSR: PENDSVSET Position */
N#define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB ICSR: PENDSVSET Mask */
N
N#define SCB_ICSR_PENDSVCLR_Pos             27U                                            /*!< SCB ICSR: PENDSVCLR Position */
N#define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB ICSR: PENDSVCLR Mask */
N
N#define SCB_ICSR_PENDSTSET_Pos             26U                                            /*!< SCB ICSR: PENDSTSET Position */
N#define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB ICSR: PENDSTSET Mask */
N
N#define SCB_ICSR_PENDSTCLR_Pos             25U                                            /*!< SCB ICSR: PENDSTCLR Position */
N#define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB ICSR: PENDSTCLR Mask */
N
N#define SCB_ICSR_ISRPREEMPT_Pos            23U                                            /*!< SCB ICSR: ISRPREEMPT Position */
N#define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB ICSR: ISRPREEMPT Mask */
N
N#define SCB_ICSR_ISRPENDING_Pos            22U                                            /*!< SCB ICSR: ISRPENDING Position */
N#define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB ICSR: ISRPENDING Mask */
N
N#define SCB_ICSR_VECTPENDING_Pos           12U                                            /*!< SCB ICSR: VECTPENDING Position */
N#define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB ICSR: VECTPENDING Mask */
N
N#define SCB_ICSR_VECTACTIVE_Pos             0U                                            /*!< SCB ICSR: VECTACTIVE Position */
N#define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB ICSR: VECTACTIVE Mask */
N
N/* SCB Application Interrupt and Reset Control Register Definitions */
N#define SCB_AIRCR_VECTKEY_Pos              16U                                            /*!< SCB AIRCR: VECTKEY Position */
N#define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB AIRCR: VECTKEY Mask */
N
N#define SCB_AIRCR_VECTKEYSTAT_Pos          16U                                            /*!< SCB AIRCR: VECTKEYSTAT Position */
N#define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB AIRCR: VECTKEYSTAT Mask */
N
N#define SCB_AIRCR_ENDIANESS_Pos            15U                                            /*!< SCB AIRCR: ENDIANESS Position */
N#define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB AIRCR: ENDIANESS Mask */
N
N#define SCB_AIRCR_SYSRESETREQ_Pos           2U                                            /*!< SCB AIRCR: SYSRESETREQ Position */
N#define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB AIRCR: SYSRESETREQ Mask */
N
N#define SCB_AIRCR_VECTCLRACTIVE_Pos         1U                                            /*!< SCB AIRCR: VECTCLRACTIVE Position */
N#define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB AIRCR: VECTCLRACTIVE Mask */
N
N/* SCB System Control Register Definitions */
N#define SCB_SCR_SEVONPEND_Pos               4U                                            /*!< SCB SCR: SEVONPEND Position */
N#define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB SCR: SEVONPEND Mask */
N
N#define SCB_SCR_SLEEPDEEP_Pos               2U                                            /*!< SCB SCR: SLEEPDEEP Position */
N#define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB SCR: SLEEPDEEP Mask */
N
N#define SCB_SCR_SLEEPONEXIT_Pos             1U                                            /*!< SCB SCR: SLEEPONEXIT Position */
N#define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB SCR: SLEEPONEXIT Mask */
N
N/* SCB Configuration Control Register Definitions */
N#define SCB_CCR_STKALIGN_Pos                9U                                            /*!< SCB CCR: STKALIGN Position */
N#define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB CCR: STKALIGN Mask */
N
N#define SCB_CCR_UNALIGN_TRP_Pos             3U                                            /*!< SCB CCR: UNALIGN_TRP Position */
N#define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB CCR: UNALIGN_TRP Mask */
N
N/* SCB System Handler Control and State Register Definitions */
N#define SCB_SHCSR_SVCALLPENDED_Pos         15U                                            /*!< SCB SHCSR: SVCALLPENDED Position */
N#define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB SHCSR: SVCALLPENDED Mask */
N
N/*@} end of group CMSIS_SCB */
N
N
N/**
N  \ingroup  CMSIS_core_register
N  \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
N  \brief    Type definitions for the System Timer Registers.
N  @{
N */
N
N/**
N  \brief  Structure type to access the System Timer (SysTick).
N */
Ntypedef struct
N{
N  __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  SysTick Control and Status Register */
X  volatile uint32_t CTRL;                    
N  __IOM uint32_t LOAD;                   /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
X  volatile uint32_t LOAD;                    
N  __IOM uint32_t VAL;                    /*!< Offset: 0x008 (R/W)  SysTick Current Value Register */
X  volatile uint32_t VAL;                     
N  __IM  uint32_t CALIB;                  /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
X  volatile const  uint32_t CALIB;                   
N} SysTick_Type;
N
N/* SysTick Control / Status Register Definitions */
N#define SysTick_CTRL_COUNTFLAG_Pos         16U                                            /*!< SysTick CTRL: COUNTFLAG Position */
N#define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysTick CTRL: COUNTFLAG Mask */
N
N#define SysTick_CTRL_CLKSOURCE_Pos          2U                                            /*!< SysTick CTRL: CLKSOURCE Position */
N#define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysTick CTRL: CLKSOURCE Mask */
N
N#define SysTick_CTRL_TICKINT_Pos            1U                                            /*!< SysTick CTRL: TICKINT Position */
N#define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysTick CTRL: TICKINT Mask */
N
N#define SysTick_CTRL_ENABLE_Pos             0U                                            /*!< SysTick CTRL: ENABLE Position */
N#define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysTick CTRL: ENABLE Mask */
N
N/* SysTick Reload Register Definitions */
N#define SysTick_LOAD_RELOAD_Pos             0U                                            /*!< SysTick LOAD: RELOAD Position */
N#define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysTick LOAD: RELOAD Mask */
N
N/* SysTick Current Register Definitions */
N#define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysTick VAL: CURRENT Position */
N#define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysTick VAL: CURRENT Mask */
N
N/* SysTick Calibration Register Definitions */
N#define SysTick_CALIB_NOREF_Pos            31U                                            /*!< SysTick CALIB: NOREF Position */
N#define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysTick CALIB: NOREF Mask */
N
N#define SysTick_CALIB_SKEW_Pos             30U                                            /*!< SysTick CALIB: SKEW Position */
N#define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysTick CALIB: SKEW Mask */
N
N#define SysTick_CALIB_TENMS_Pos             0U                                            /*!< SysTick CALIB: TENMS Position */
N#define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysTick CALIB: TENMS Mask */
N
N/*@} end of group CMSIS_SysTick */
N
N
N/**
N  \ingroup  CMSIS_core_register
N  \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
N  \brief    Cortex-M0 Core Debug Registers (DCB registers, SHCSR, and DFSR) are only accessible over DAP and not via processor.
N            Therefore they are not covered by the Cortex-M0 header file.
N  @{
N */
N/*@} end of group CMSIS_CoreDebug */
N
N
N/**
N  \ingroup    CMSIS_core_register
N  \defgroup   CMSIS_core_bitfield     Core register bit field macros
N  \brief      Macros for use with bit field definitions (xxx_Pos, xxx_Msk).
N  @{
N */
N
N/**
N  \brief   Mask and shift a bit field value for use in a register bit range.
N  \param[in] field  Name of the register bit field.
N  \param[in] value  Value of the bit field. This parameter is interpreted as an uint32_t type.
N  \return           Masked and shifted value.
N*/
N#define _VAL2FLD(field, value)    (((uint32_t)(value) << field ## _Pos) & field ## _Msk)
N
N/**
N  \brief     Mask and shift a register value to extract a bit filed value.
N  \param[in] field  Name of the register bit field.
N  \param[in] value  Value of register. This parameter is interpreted as an uint32_t type.
N  \return           Masked and shifted bit field value.
N*/
N#define _FLD2VAL(field, value)    (((uint32_t)(value) & field ## _Msk) >> field ## _Pos)
N
N/*@} end of group CMSIS_core_bitfield */
N
N
N/**
N  \ingroup    CMSIS_core_register
N  \defgroup   CMSIS_core_base     Core Definitions
N  \brief      Definitions for base addresses, unions, and structures.
N  @{
N */
N
N/* Memory mapping of Core Hardware */
N#define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Base Address */
N#define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address */
N#define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address */
N#define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Base Address */
N
N#define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct */
N#define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration struct */
N#define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struct */
N
N
N/*@} */
N
N
N
N/*******************************************************************************
N *                Hardware Abstraction Layer
N  Core Function Interface contains:
N  - Core NVIC Functions
N  - Core SysTick Functions
N  - Core Register Access Functions
N ******************************************************************************/
N/**
N  \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
N*/
N
N
N
N/* ##########################   NVIC functions  #################################### */
N/**
N  \ingroup  CMSIS_Core_FunctionInterface
N  \defgroup CMSIS_Core_NVICFunctions NVIC Functions
N  \brief    Functions that manage interrupts and exceptions via the NVIC.
N  @{
N */
N
N#ifndef CMSIS_NVIC_VIRTUAL
N/*#define NVIC_SetPriorityGrouping    __NVIC_SetPriorityGrouping   not available for Cortex-M0 */
N/*#define NVIC_GetPriorityGrouping    __NVIC_GetPriorityGrouping   not available for Cortex-M0 */
N  #define NVIC_EnableIRQ              __NVIC_EnableIRQ
N  #define NVIC_GetEnableIRQ           __NVIC_GetEnableIRQ
N  #define NVIC_DisableIRQ             __NVIC_DisableIRQ
N  #define NVIC_GetPendingIRQ          __NVIC_GetPendingIRQ
N  #define NVIC_SetPendingIRQ          __NVIC_SetPendingIRQ
N  #define NVIC_ClearPendingIRQ        __NVIC_ClearPendingIRQ
N/*#define NVIC_GetActive              __NVIC_GetActive             not available for Cortex-M0 */
N  #define NVIC_SetPriority            __NVIC_SetPriority
N  #define NVIC_GetPriority            __NVIC_GetPriority
N#endif /* CMSIS_NVIC_VIRTUAL */
N
N#ifndef CMSIS_VECTAB_VIRTUAL
N  #define NVIC_SetVector              __NVIC_SetVector
N  #define NVIC_GetVector              __NVIC_GetVector
N#endif  /* (CMSIS_VECTAB_VIRTUAL) */
N
N#define NVIC_USER_IRQ_OFFSET          16
N
N
N/* Interrupt Priorities are WORD accessible only under ARMv6M                   */
N/* The following MACROS handle generation of the register offset and byte masks */
N#define _BIT_SHIFT(IRQn)         (  ((((uint32_t)(int32_t)(IRQn))         )      &  0x03UL) * 8UL)
N#define _SHP_IDX(IRQn)           ( (((((uint32_t)(int32_t)(IRQn)) & 0x0FUL)-8UL) >>    2UL)      )
N#define _IP_IDX(IRQn)            (   (((uint32_t)(int32_t)(IRQn))                >>    2UL)      )
N
N
N/**
N  \brief   Enable Interrupt
N  \details Enables a device specific interrupt in the NVIC interrupt controller.
N  \param [in]      IRQn  Device specific interrupt number.
N  \note    IRQn must not be negative.
N */
N__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
Xstatic __inline void __NVIC_EnableIRQ(IRQn_Type IRQn)
N{
N  if ((int32_t)(IRQn) >= 0)
N  {
N    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
X    ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
N  }
N}
N
N
N/**
N  \brief   Get Interrupt Enable status
N  \details Returns a device specific interrupt enable status from the NVIC interrupt controller.
N  \param [in]      IRQn  Device specific interrupt number.
N  \return             0  Interrupt is not enabled.
N  \return             1  Interrupt is enabled.
N  \note    IRQn must not be negative.
N */
N__STATIC_INLINE uint32_t __NVIC_GetEnableIRQ(IRQn_Type IRQn)
Xstatic __inline uint32_t __NVIC_GetEnableIRQ(IRQn_Type IRQn)
N{
N  if ((int32_t)(IRQn) >= 0)
N  {
N    return((uint32_t)(((NVIC->ISER[0U] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
X    return((uint32_t)(((((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ISER[0U] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
N  }
N  else
N  {
N    return(0U);
N  }
N}
N
N
N/**
N  \brief   Disable Interrupt
N  \details Disables a device specific interrupt in the NVIC interrupt controller.
N  \param [in]      IRQn  Device specific interrupt number.
N  \note    IRQn must not be negative.
N */
N__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
Xstatic __inline void __NVIC_DisableIRQ(IRQn_Type IRQn)
N{
N  if ((int32_t)(IRQn) >= 0)
N  {
N    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
X    ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ICER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
N    __DSB();
X    do { __schedule_barrier(); __dsb(0xF); __schedule_barrier(); } while (0U);
N    __ISB();
X    do { __schedule_barrier(); __isb(0xF); __schedule_barrier(); } while (0U);
N  }
N}
N
N
N/**
N  \brief   Get Pending Interrupt
N  \details Reads the NVIC pending register and returns the pending bit for the specified device specific interrupt.
N  \param [in]      IRQn  Device specific interrupt number.
N  \return             0  Interrupt status is not pending.
N  \return             1  Interrupt status is pending.
N  \note    IRQn must not be negative.
N */
N__STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
Xstatic __inline uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
N{
N  if ((int32_t)(IRQn) >= 0)
N  {
N    return((uint32_t)(((NVIC->ISPR[0U] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
X    return((uint32_t)(((((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ISPR[0U] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
N  }
N  else
N  {
N    return(0U);
N  }
N}
N
N
N/**
N  \brief   Set Pending Interrupt
N  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
N  \param [in]      IRQn  Device specific interrupt number.
N  \note    IRQn must not be negative.
N */
N__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
Xstatic __inline void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
N{
N  if ((int32_t)(IRQn) >= 0)
N  {
N    NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
X    ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
N  }
N}
N
N
N/**
N  \brief   Clear Pending Interrupt
N  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
N  \param [in]      IRQn  Device specific interrupt number.
N  \note    IRQn must not be negative.
N */
N__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
Xstatic __inline void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
N{
N  if ((int32_t)(IRQn) >= 0)
N  {
N    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
X    ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
N  }
N}
N
N
N/**
N  \brief   Set Interrupt Priority
N  \details Sets the priority of a device specific interrupt or a processor exception.
N           The interrupt number can be positive to specify a device specific interrupt,
N           or negative to specify a processor exception.
N  \param [in]      IRQn  Interrupt number.
N  \param [in]  priority  Priority to set.
N  \note    The priority cannot be set for every processor exception.
N */
N__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
Xstatic __inline void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
N{
N  if ((int32_t)(IRQn) >= 0)
N  {
N    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
X    ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->IP[( (((uint32_t)(int32_t)(IRQn)) >> 2UL) )]  = ((uint32_t)(((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->IP[( (((uint32_t)(int32_t)(IRQn)) >> 2UL) )]  & ~(0xFFUL << ( ((((uint32_t)(int32_t)(IRQn)) ) & 0x03UL) * 8UL))) |
N       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
X       (((priority << (8U - 2)) & (uint32_t)0xFFUL) << ( ((((uint32_t)(int32_t)(IRQn)) ) & 0x03UL) * 8UL)));
N  }
N  else
N  {
N    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
X    ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->SHP[( (((((uint32_t)(int32_t)(IRQn)) & 0x0FUL)-8UL) >> 2UL) )] = ((uint32_t)(((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->SHP[( (((((uint32_t)(int32_t)(IRQn)) & 0x0FUL)-8UL) >> 2UL) )] & ~(0xFFUL << ( ((((uint32_t)(int32_t)(IRQn)) ) & 0x03UL) * 8UL))) |
N       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
X       (((priority << (8U - 2)) & (uint32_t)0xFFUL) << ( ((((uint32_t)(int32_t)(IRQn)) ) & 0x03UL) * 8UL)));
N  }
N}
N
N
N/**
N  \brief   Get Interrupt Priority
N  \details Reads the priority of a device specific interrupt or a processor exception.
N           The interrupt number can be positive to specify a device specific interrupt,
N           or negative to specify a processor exception.
N  \param [in]   IRQn  Interrupt number.
N  \return             Interrupt Priority.
N                      Value is aligned automatically to the implemented priority bits of the microcontroller.
N */
N__STATIC_INLINE uint32_t __NVIC_GetPriority(IRQn_Type IRQn)
Xstatic __inline uint32_t __NVIC_GetPriority(IRQn_Type IRQn)
N{
N
N  if ((int32_t)(IRQn) >= 0)
N  {
N    return((uint32_t)(((NVIC->IP[ _IP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U - __NVIC_PRIO_BITS)));
X    return((uint32_t)(((((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->IP[ ( (((uint32_t)(int32_t)(IRQn)) >> 2UL) )] >> ( ((((uint32_t)(int32_t)(IRQn)) ) & 0x03UL) * 8UL) ) & (uint32_t)0xFFUL) >> (8U - 2)));
N  }
N  else
N  {
N    return((uint32_t)(((SCB->SHP[_SHP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U - __NVIC_PRIO_BITS)));
X    return((uint32_t)(((((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->SHP[( (((((uint32_t)(int32_t)(IRQn)) & 0x0FUL)-8UL) >> 2UL) )] >> ( ((((uint32_t)(int32_t)(IRQn)) ) & 0x03UL) * 8UL) ) & (uint32_t)0xFFUL) >> (8U - 2)));
N  }
N}
N
N
N/**
N  \brief   Set Interrupt Vector
N  \details Sets an interrupt vector in SRAM based interrupt vector table.
N           The interrupt number can be positive to specify a device specific interrupt,
N           or negative to specify a processor exception.
N           Address 0 must be mapped to SRAM.
N  \param [in]   IRQn      Interrupt number
N  \param [in]   vector    Address of interrupt handler function
N */
N__STATIC_INLINE void __NVIC_SetVector(IRQn_Type IRQn, uint32_t vector)
Xstatic __inline void __NVIC_SetVector(IRQn_Type IRQn, uint32_t vector)
N{
N  uint32_t *vectors = (uint32_t *)0x0U;
N  vectors[(int32_t)IRQn + NVIC_USER_IRQ_OFFSET] = vector;
X  vectors[(int32_t)IRQn + 16] = vector;
N}
N
N
N/**
N  \brief   Get Interrupt Vector
N  \details Reads an interrupt vector from interrupt vector table.
N           The interrupt number can be positive to specify a device specific interrupt,
N           or negative to specify a processor exception.
N  \param [in]   IRQn      Interrupt number.
N  \return                 Address of interrupt handler function
N */
N__STATIC_INLINE uint32_t __NVIC_GetVector(IRQn_Type IRQn)
Xstatic __inline uint32_t __NVIC_GetVector(IRQn_Type IRQn)
N{
N  uint32_t *vectors = (uint32_t *)0x0U;
N  return vectors[(int32_t)IRQn + NVIC_USER_IRQ_OFFSET];
X  return vectors[(int32_t)IRQn + 16];
N}
N
N
N/**
N  \brief   System Reset
N  \details Initiates a system reset request to reset the MCU.
N */
N__STATIC_INLINE void NVIC_SystemReset(void)
Xstatic __inline void NVIC_SystemReset(void)
N{
N  __DSB();                                                          /* Ensure all outstanding memory accesses included
X  do { __schedule_barrier(); __dsb(0xF); __schedule_barrier(); } while (0U);                                                          
N                                                                       buffered write are completed before reset */
N  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
X  ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->AIRCR  = ((0x5FAUL << 16U) |
N                 SCB_AIRCR_SYSRESETREQ_Msk);
X                 (1UL << 2U));
N  __DSB();                                                          /* Ensure completion of memory access */
X  do { __schedule_barrier(); __dsb(0xF); __schedule_barrier(); } while (0U);                                                           
N
N  for(;;)                                                           /* wait until reset */
N  {
N    __NOP();
X    __nop();
N  }
N}
N
N/*@} end of CMSIS_Core_NVICFunctions */
N
N
N/* ##########################  FPU functions  #################################### */
N/**
N  \ingroup  CMSIS_Core_FunctionInterface
N  \defgroup CMSIS_Core_FpuFunctions FPU Functions
N  \brief    Function that provides FPU type.
N  @{
N */
N
N/**
N  \brief   get FPU type
N  \details returns the FPU type
N  \returns
N   - \b  0: No FPU
N   - \b  1: Single precision FPU
N   - \b  2: Double + Single precision FPU
N */
N__STATIC_INLINE uint32_t SCB_GetFPUType(void)
Xstatic __inline uint32_t SCB_GetFPUType(void)
N{
N    return 0U;           /* No FPU */
N}
N
N
N/*@} end of CMSIS_Core_FpuFunctions */
N
N
N
N/* ##################################    SysTick function  ############################################ */
N/**
N  \ingroup  CMSIS_Core_FunctionInterface
N  \defgroup CMSIS_Core_SysTickFunctions SysTick Functions
N  \brief    Functions that configure the System.
N  @{
N */
N
N#if defined (__Vendor_SysTickConfig) && (__Vendor_SysTickConfig == 0U)
X#if 1L && (0 == 0U)
N
N/**
N  \brief   System Tick Configuration
N  \details Initializes the System Timer and its interrupt, and starts the System Tick Timer.
N           Counter is in free running mode to generate periodic interrupts.
N  \param [in]  ticks  Number of ticks between two interrupts.
N  \return          0  Function succeeded.
N  \return          1  Function failed.
N  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
N           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
N           must contain a vendor-specific implementation of this function.
N */
N__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
Xstatic __inline uint32_t SysTick_Config(uint32_t ticks)
N{
N  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
X  if ((ticks - 1UL) > (0xFFFFFFUL ))
N  {
N    return (1UL);                                                   /* Reload value impossible */
N  }
N
N  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
X  ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->LOAD  = (uint32_t)(ticks - 1UL);                          
N  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
X  __NVIC_SetPriority (SysTick_IRQn, (1UL << 2) - 1UL);  
N  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
X  ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->VAL   = 0UL;                                              
N  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
X  ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->CTRL  = (1UL << 2U) |
N                   SysTick_CTRL_TICKINT_Msk   |
X                   (1UL << 1U)   |
N                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
X                   (1UL );                          
N  return (0UL);                                                     /* Function successful */
N}
N
N#endif
N
N/*@} end of CMSIS_Core_SysTickFunctions */
N
N
N
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /* __CORE_CM0_H_DEPENDANT */
N
N#endif /* __CMSIS_GENERIC */
L 110 ".\RTE\CMSIS\BF7006AM64\BF7006AMxx.h" 2
N#include "system_ARMCM0.h"                      /* System Header                                     */
L 1 ".\RTE\CMSIS\BF7006AM64\system_ARMCM0.h" 1
N/**************************************************************************//**
N * @file     system_ARMCM0.h
N * @brief    CMSIS Device System Header File for
N *           ARMCM0 Device Series
N * @version  V1.08
N * @date     23. November 2012
N *
N * @note
N *
N ******************************************************************************/
N/* Copyright (c) 2011 - 2012 ARM LIMITED
N
N   All rights reserved.
N   Redistribution and use in source and binary forms, with or without
N   modification, are permitted provided that the following conditions are met:
N   - Redistributions of source code must retain the above copyright
N     notice, this list of conditions and the following disclaimer.
N   - Redistributions in binary form must reproduce the above copyright
N     notice, this list of conditions and the following disclaimer in the
N     documentation and/or other materials provided with the distribution.
N   - Neither the name of ARM nor the names of its contributors may be used
N     to endorse or promote products derived from this software without
N     specific prior written permission.
N   *
N   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
N   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
N   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
N   ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
N   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
N   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
N   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
N   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
N   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
N   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
N   POSSIBILITY OF SUCH DAMAGE.
N   ---------------------------------------------------------------------------*/
N
N
N#ifndef SYSTEM_ARMCM0_H
N#define SYSTEM_ARMCM0_H
N
N#include "stdint.h"
N
N#ifdef __cplusplus
Sextern "C" {
N#endif
N
N
Nextern uint32_t SystemCoreClock;     /*!< System Clock Frequency (Core Clock)  */
N
N
N/**
N * Initialize the system
N *
N * @param  none
N * @return none
N *
N * @brief  Setup the microcontroller system.
N *         Initialize the System and update the SystemCoreClock variable.
N */
Nextern void SystemInit (void);
N
N/**
N * Update SystemCoreClock variable
N *
N * @param  none
N * @return none
N *
N * @brief  Updates the SystemCoreClock with current core Clock
N *         retrieved from cpu registers.
N */
Nextern void SystemCoreClockUpdate (void);
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /* SYSTEM_ARMCM0_H */
L 111 ".\RTE\CMSIS\BF7006AM64\BF7006AMxx.h" 2
N
N/* ================================================================================ */
N/* ================       Device Specific Peripheral Section       ================ */
N/* ================================================================================ */
N
N/* -------------------  Start of section using anonymous unions  ------------------ */
N#if defined(__CC_ARM)
X#if 1L
N  #pragma push
N  #pragma anon_unions
N#elif defined(__ICCARM__)
X#elif 0L
S  #pragma language=extended
S#elif defined(__GNUC__)
S  /* anonymous unions are enabled by default */
S#elif defined(__TMS470__)
S/* anonymous unions are enabled by default */
S#elif defined(__TASKING__)
S  #pragma warning 586
S#elif defined ( __CSMC__ )      /* Cosmic */
S/* anonymous unions are enabled by default */
S#else
S  #warning Not supported compiler type
N#endif
N
N
N/**
N  \brief   System Sleeping
N  \details system step into sleeping mode
N */
N__STATIC_INLINE void System_Sleeping(void)
Xstatic __inline void System_Sleeping(void)
N{
N    SCB->SCR &= (uint32_t)(~SCB_SCR_SLEEPDEEP_Msk);
X    ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->SCR &= (uint32_t)(~(1UL << 2U));
N    __WFI();
X    __wfi();
N}
N
N/**
N  \brief   System Sleepdeep
N  \details system step into sleepdeep mode
N */
N__STATIC_INLINE void System_SleepDeep(void)
Xstatic __inline void System_SleepDeep(void)
N{
N    SCB->SCR |= (uint32_t)SCB_SCR_SLEEPDEEP_Msk;
X    ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->SCR |= (uint32_t)(1UL << 2U);
N    __WFI();
X    __wfi();
N}
N
N/**
N  \brief   Set Main Stack Pointer
N  \details Assigns the given value to the Main Stack Pointer (MSP).
N  \param [in]    topOfMainStack  Main Stack Pointer value to set
N */
N__STATIC_INLINE void set_MSP(uint32_t topOfMainStack)
Xstatic __inline void set_MSP(uint32_t topOfMainStack)
N{
N    __set_MSP(topOfMainStack);
N}
N
N/**
N  \brief   Set Process Stack Pointer
N  \details Assigns the given value to the Process Stack Pointer (PSP).
N  \param [in]    topOfProcStack  Process Stack Pointer value to set
N */
N__STATIC_INLINE void set_PSP(uint32_t topOfProcStack)
Xstatic __inline void set_PSP(uint32_t topOfProcStack)
N{
N    __set_PSP(topOfProcStack);
N}
N
N/**
N  \brief   No Operation
N  \details No Operation does nothing. This instruction can be used for code alignment purposes.
N */
N__STATIC_INLINE void NOP(void)
Xstatic __inline void NOP(void)
N{
N    __NOP();
X    __nop();
N}
N
N/**
N  \brief   Enable Interrupt
N  \details Enable Interrupt. This instruction can be used for code alignment purposes.
N */
N__STATIC_INLINE void Enable_Irq(void)
Xstatic __inline void Enable_Irq(void)
N{
N    __enable_irq();
N}
N
N/**
N  \brief   Disable Interrupt
N  \details Disable interrupt. This instruction can be used for code alignment purposes.
N */
N__STATIC_INLINE void Disable_Irq(void)
Xstatic __inline void Disable_Irq(void)
N{
N    __disable_irq();
N}
N
N/* ================================================================================ */
N/* ================              Peripheral memory map             ================ */
N/* ================================================================================ */
N/* Peripheral and SRAM base address */
N#define FLASH_BASE              ((uint32_t)0x00000000)          ///< Flash base address
N#define FLASH_NVR_BASE          ((uint32_t)0x00018000)          ///< Flash information block,read only
N#define SRAM_BASE               ((uint32_t)0x20000000)          ///< SRAM base address
N#define EEPROM_BASE             ((uint32_t)0x40000000)          ///< EEPROM base address
N#define AHBPERIPH_BASE          ((uint32_t)0x50000000)          ///< AHB base address
N
N/* Peripheral memory map */
N#define EFLASH_CTRL_BASE        (AHBPERIPH_BASE + (uint32_t)0x00000)    ///< FLASH and EEPROM register base address
N#define SYSCTRL_BASE            (AHBPERIPH_BASE + (uint32_t)0x10000)    ///< SYS control register base address
N#define SCI_BASE                (AHBPERIPH_BASE + (uint32_t)0x40000)    ///< LIN0 register base address
N#define CAN_BASE                (AHBPERIPH_BASE + (uint32_t)0x50000)    ///< CAN register base address
N#define PWM_BASE                (AHBPERIPH_BASE + (uint32_t)0x60000)    ///< PWM register base address
N#define RTC_BASE                (AHBPERIPH_BASE + (uint32_t)0x70000)    ///< RTC register base address
N#define WDT_BASE                (AHBPERIPH_BASE + (uint32_t)0x80000)    ///< WDT register base address
N#define ADC_BASE                (AHBPERIPH_BASE + (uint32_t)0x90000)    ///< ADC/ACMP register base address
N#define GPIO_BASE               (AHBPERIPH_BASE + (uint32_t)0xA0000)    ///< GPIO register base address
N#define TIMER_BASE              (AHBPERIPH_BASE + (uint32_t)0xB0000)    ///< Timer0/1 register base address
N
N#define SCI0                    (SCI_BASE       + (uint32_t)0x0000)     ///< SCI0 register base address
N#define SCI1                    (SCI_BASE       + (uint32_t)0x4000)     ///< SCI1 register base address
N
N#define GPIOA                   (GPIO_BASE      + (uint32_t)0x0000)     ///< GPIOA register base address
N#define GPIOB                   (GPIO_BASE      + (uint32_t)0x001C)     ///< GPIOB register base address
N#define GPIOC                   (GPIO_BASE      + (uint32_t)0x0038)     ///< GPIOC register base address
N#define GPIOD                   (GPIO_BASE      + (uint32_t)0x0048)     ///< GPIOD register base address
N#define GPIOE                   (GPIO_BASE      + (uint32_t)0x0064)     ///< GPIOE register base address
N#define GPIOF                   (GPIO_BASE      + (uint32_t)0x0074)     ///< GPIOF register base address
N#define GPIOG                   (GPIO_BASE      + (uint32_t)0x0084)     ///< GPIOG register base address
N
N#define TIMER0                  (TIMER_BASE     + (uint32_t)0x0000)     ///< Timer0 register base address
N#define TIMER1                  (TIMER_BASE     + (uint32_t)0x4000)     ///< Timer1 register base address
N
N/* --------------------  End of section using anonymous unions  ------------------- */
N#if defined(__CC_ARM)
X#if 1L
N  #pragma pop
N#elif defined(__ICCARM__)
X#elif 0L
S  /* leave anonymous unions enabled */
S#elif defined(__GNUC__)
S  /* anonymous unions are enabled by default */
S#elif defined(__TMS470__)
S  /* anonymous unions are enabled by default */
S#elif defined(__TASKING__)
S  #pragma warning restore
S#elif defined ( __CSMC__ )      /* Cosmic */
S/* anonymous unions are enabled by default */
S#else
S  #warning Not supported compiler type
N#endif
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif  /* ARMCM0_H */
L 16 "RTE\Device\BF7006AM64\BF7006AMxx_adc.h" 2
N
N/* register definitions */
N#define ADC_SC1                 REG32(ADC_BASE + 0x00U)         /*!< adc control register1            */
N#define ADC_SC2                 REG32(ADC_BASE + 0x04U)         /*!< adc count register2              */
N#define ADC_DATA                REG32(ADC_BASE + 0x08U)         /*!< adc data register                */
N#define ADC_CV0                 REG32(ADC_BASE + 0x0cU)         /*!< adc compare value register0      */
N#define ADC_CV1                 REG32(ADC_BASE + 0x10U)         /*!< adc compare value register1      */
N#define ADC_CFG                 REG32(ADC_BASE + 0x14U)         /*!< adc config register              */
N#define ADC_APCTL               REG32(ADC_BASE + 0x18U)         /*!< adc pin analog enable register   */
N#define ADC_SPT                 REG32(ADC_BASE + 0x1cU)         /*!< adc sample clock config register */
N#define ADC_ALC                 REG32(ADC_BASE + 0x20U)         /*!< adc calibration config register  */
N#define ADC_BL5                 REG32(ADC_BASE + 0x24U)         /*!< adc calibration bit5 register    */
N#define ADC_BL6                 REG32(ADC_BASE + 0x28U)         /*!< adc calibration bit6 register    */
N#define ADC_BL7                 REG32(ADC_BASE + 0x2cU)         /*!< adc calibration bit7 register    */
N#define ADC_BL8                 REG32(ADC_BASE + 0x30U)         /*!< adc calibration bit8 register    */
N#define ADC_BL9                 REG32(ADC_BASE + 0x34U)         /*!< adc calibration bit9 register    */
N#define ADC_BL10                REG32(ADC_BASE + 0x38U)         /*!< adc calibration bit10 register   */
N#define ADC_BL11                REG32(ADC_BASE + 0x3cU)         /*!< adc calibration bit11 register   */
N#define ADC_CTEN                REG32(ADC_BASE + 0x40U)
N#define ADC_CTWIDTH             REG32(ADC_BASE + 0x44U)
N#define ADC_CTM8                REG32(ADC_BASE + 0x48U)
N#define ADC_CTM4                REG32(ADC_BASE + 0x4cU)
N#define ADC_CTM2                REG32(ADC_BASE + 0x50U)
N#define ADC_CTL8                REG32(ADC_BASE + 0x54U)
N#define ADC_CTL4                REG32(ADC_BASE + 0x58U)
N#define ADC_CTL2                REG32(ADC_BASE + 0x5cU)
N#define ADC_CTSL8               REG32(ADC_BASE + 0x60U)
N#define ADC_CTSL4               REG32(ADC_BASE + 0x64U)
N#define ADC_CTSL2               REG32(ADC_BASE + 0x68U)
N#define ADC_CTSL1               REG32(ADC_BASE + 0x6cU)
N#define ADC_CTCOMP              REG32(ADC_BASE + 0x70U)
N#define ADC_CTGR                REG32(ADC_BASE + 0x74U)
N#define ADC_CKC                 REG32(ADC_BASE + 0x78U)         /*!< adc timing sequence set register    */
N#define ADC_ISEL                REG32(ADC_BASE + 0x7cU)         /*!< adc bias current select register    */
N#define ADC_PD                  REG32(ADC_BASE + 0x80U)         /*!< adc power down register             */
N#define ADC_TEST                REG32(ADC_BASE + 0x84U)         /*!< adc self test mode register         */
N#define ADC_CALEN               REG32(ADC_BASE + 0x88U)         /*!< adc calibration enable register     */
N#define ADC_IKW                 REG32(ADC_BASE + 0x8cU)         /*!< adc hardware trigge select register */
N#define ADC_FRSEL               REG32(ADC_BASE + 0x90U)         /*!< adc filter select register          */
N#define ADC_CTRLSEL             REG32(ADC_BASE + 0x94U)         /*!< adc compare config register         */
N/* end registers definitions */
N
N/* bits definitions */
N/* ADC_SC1 bits definitions */
N#define ADC_SC1_COCO            BIT(7)                          /*!< adc convert over flag             */
N#define ADC_SC1_AIEN            BIT(6)                          /*!< adc convert over interrupt enable */
N#define ADC_SC1_ADCO            BIT(5)                          /*!< adc continue convert enable       */
N#define ADC_SC1_ADCH            BITS(0,4)                       /*!< adc convert channel select        */
N#define ADC_SC1_ADCH_LSB        0U                              /*!< lowest bit of ADC_SC1_ADCH        */
N
N/* ADC_SC2 bits definitions */
N#define ADC_SC2_ADACT           BIT(7)                          /*!< adc converting flag               */
N#define ADC_SC2_ADTRG           BIT(6)                          /*!< adc convert trigge select         */
N#define ADC_SC2_ACFE0           BIT(5)                          /*!< adc compare0 enable               */
N#define ADC_SC2_ACFGT0          BIT(4)                          /*!< adc compare0 condition select     */
N#define ADC_SC2_ACFE1           BIT(3)                          /*!< adc compare1 enable               */
N#define ADC_SC2_ACFGT1          BIT(2)                          /*!< adc compare1 condition select     */
N#define ADC_SC2_ADHTS           BIT(1)                          /*!< adc hardware trigge source select */
N#define ADC_SC2_CONREN          BIT(0)                          /*!< adc calibration enable            */
N
N/* ADC_CFG bits definitions */
N#define ADC_CFG_ADIV            BITS(4,6)                       /*!< adc clock divide config        */
N#define ADC_CFG_ADIV_LSB        4U                              /*!< LSB of adc clock divide config */
N#define ADC_CFG_MODE            BIT(2)                          /*!< adc convert data width select  */
N
N/* ADC_APCTL bits definitions */
N#define ADC_APCTL_23            BIT(23)                         /*!< adc23 pin analog enable */
N#define ADC_APCTL_22            BIT(22)                         /*!< adc22 pin analog enable */
N#define ADC_APCTL_21            BIT(21)                         /*!< adc21 pin analog enable */
N#define ADC_APCTL_20            BIT(20)                         /*!< adc20 pin analog enable */
N#define ADC_APCTL_19            BIT(19)                         /*!< adc19 pin analog enable */
N#define ADC_APCTL_18            BIT(18)                         /*!< adc18 pin analog enable */
N#define ADC_APCTL_17            BIT(17)                         /*!< adc17 pin analog enable */
N#define ADC_APCTL_16            BIT(16)                         /*!< adc16 pin analog enable */
N#define ADC_APCTL_15            BIT(15)                         /*!< adc15 pin analog enable */
N#define ADC_APCTL_14            BIT(14)                         /*!< adc14 pin analog enable */
N#define ADC_APCTL_13            BIT(13)                         /*!< adc13 pin analog enable */
N#define ADC_APCTL_12            BIT(12)                         /*!< adc12 pin analog enable */
N#define ADC_APCTL_11            BIT(11)                         /*!< adc11 pin analog enable */
N#define ADC_APCTL_10            BIT(10)                         /*!< adc10 pin analog enable */
N#define ADC_APCTL_9             BIT(9)                          /*!< adc9  pin analog enable */
N#define ADC_APCTL_8             BIT(8)                          /*!< adc8  pin analog enable */
N#define ADC_APCTL_7             BIT(7)                          /*!< adc7  pin analog enable */
N#define ADC_APCTL_6             BIT(6)                          /*!< adc6  pin analog enable */
N#define ADC_APCTL_5             BIT(5)                          /*!< adc5  pin analog enable */
N#define ADC_APCTL_4             BIT(4)                          /*!< adc4  pin analog enable */
N#define ADC_APCTL_3             BIT(3)                          /*!< adc3  pin analog enable */
N#define ADC_APCTL_2             BIT(2)                          /*!< adc2  pin analog enable */
N#define ADC_APCTL_1             BIT(1)                          /*!< adc1  pin analog enable */
N#define ADC_APCTL_0             BIT(0)                          /*!< adc0  pin analog enable */
N
N/* ADC_ALC bits definitions */
N#define ADC_ALC_WIDTH           BIT(5)                          /*!< adc calibrate data width select */
N#define ADC_ALC_SEL             BITS(1,4)                       /*!< adc calibrate bit select        */
N#define ADC_ALC_SEL_LSB         1U                              /*!< lowest bit of ADC_ALC_SEL       */
N#define ADC_ALC_EN              BIT(0)                          /*!< adc calibrate enable            */
N
N/* ADC_TEST bits definitions */
N#define ADC_TEST_NUM            BIT(1)                          /*!< adc self test convert number */
N#define ADC_TEST_EN             BIT(0)                          /*!< adc self test mode ebable    */
N/* end bits definitions */
N
N/* contacts definition */
N/* adc data width define */
N#define ADC_DATA_12BITS         0x01U                           /*!< dc data width 12bits */
N#define ADC_DATA_8BITS          0x00U                           /*!< dc data width 8bits  */
N
N/* adc clock divide define,adc_clk m 16M */
N#define ADC_CLK_DIV_1           0x00U                           /*!< adc clock select system clock divide 1  */
N#define ADC_CLK_DIV_2           0x10U                           /*!< adc clock select system clock divide 2  */
N#define ADC_CLK_DIV_3           0x70U                           /*!< adc clock select system clock divide 3  */
N#define ADC_CLK_DIV_4           0x20U                           /*!< adc clock select system clock divide 4  */
N#define ADC_CLK_DIV_6           0x30U                           /*!< adc clock select system clock divide 6  */
N#define ADC_CLK_DIV_8           0x40U                           /*!< adc clock select system clock divide 8  */
N#define ADC_CLK_DIV_10          0x50U                           /*!< adc clock select system clock divide 10 */
N#define ADC_CLK_DIV_12          0x60U                           /*!< adc clock select system clock divide 12 */
N
N/* adc trigger mode define */
N#define ADC_TRIGG_SOFT          0x00U                           /*!< adc trigger mode select software trigger */
N#define ADC_TRIGG_HARD          0x01U                           /*!< adc trigger mode select hardware trigger */
N
N/* adc hardware trigger source select define */
N#define ADC_TRIGG_HARD_NMI      0x01U                           /*!< adc hardware trigger source select NMI interrupt */
N#define ADC_TRIGG_HARD_PWM      0x02U                           /*!< adc hardware trigger source select PWM interrupt */
N#define ADC_TRIGG_HARD_RTC      0x03U                           /*!< adc hardware trigger source select RTC interrupt */
N
N/* adc compare condition define */
N#define ADC_COMP_LESS           0x00U                           /*!< adc compare condition: less than ADC_CV0            */
N#define ADC_COMP_LARGER         0x01U                           /*!< adc compare condition: larger or equal than ADC_CV0 */
N#define ADC_COMP_BETWEEN        0x02U                           /*!< adc compare condition: between ADC_CV0 and ADC_CV1  */
N
N/* adc channel define */
N#define ADC_CH_0(x)             ((uint8_t)(x))                  /*<! adc channel x                         */
N#define ADC_CH_TEMP             26U                             /*<! adc channel internal temperature      */
N#define ADC_CH_BG               27U                             /*!< adc channel internal bandgap (1.267V) */
N#define ADC_CH_VREFH            29U                             /*!< adc channel VREFH                     */
N#define ADC_CH_VREFL            30U                             /*!< adc channel VREFL                     */
N#define ADC_CH_OFF              31U                             /*!< adc channel off, adc stop scan        */
N
N/* adc compare 0 or 1 enum */
Ntypedef enum
N{
N    ADC_COMPARE_0,
N    ADC_COMPARE_1
N}adc_compare_n;
N
N/* ADC trigger parameters struct */
Ntypedef struct
N{
N    uint8_t             trigger_mode;           /*!< adc trigger mode select:hardware or software               */
N    uint8_t             trigger_source;         /*!< adc trigger source select:PWM or RTC or NMI                */
N    uint16_t            pwm_trigger_delay;      /*!< delay between pwm overflow interrupt and start adc convert */
N}adc_trigger_struct;
N
N/* ADC compare function parameters struct */
Ntypedef struct
N{
N    FunctionalState     compare_en;             /*!< adc compare function enable  */
N    uint8_t             compare_condition;      /*!< adc compare condition select */
N    uint16_t            lower_limit_val;        /*!< adc compare lower limit val  */
N    uint16_t            higher_limit_val;       /*!< adc compare higher limit val */
N}adc_compare_struct;
N
N/* ADC initiliaze parameters struct */
Ntypedef struct
N{
N    uint8_t             adc_clk;                /*!< adc clock select:system clock divide(1/2/3/4/6/8/10/12) */
N    uint16_t            sample_clk_num;         /*!< adc sample clock number set,low 10bits valid            */
N    FunctionalState     adco_en;                /*!< adc continuous convert enable                           */
N    uint8_t             data_width;             /*!< adc convert data width select:8bits or 12bits           */
N    uint32_t            channel_en;             /*!< adc channel enale    */
N    FunctionalState     int_en;                 /*!< adc interrupt enable */
N    adc_trigger_struct  trigger;                /*!< adc trigger config   */
N    adc_compare_struct  compare;                /*!< adc compare config   */
N    adc_compare_struct  compare_0;              /*!< adc compare 0 config */
N    adc_compare_struct  compare_1;              /*!< adc compare 1 config */
N}adc_parameter_struct;
N
N/* function declarations */
N/* adc initialize */
Nvoid adc_init(adc_parameter_struct adc_init_para);
N/* adc channel enable */
Nvoid adc_channel_enable(uint32_t ch);
N/* adc channel disable */
Nvoid adc_channel_disable(uint32_t ch);
N/* adc start convert */
Nvoid adc_start_convert(uint8_t ch);
N/* adc convert data get */
Nuint16_t adc_data_get(void);
N/*! wait for adc convert */
NErrorStatus wait_adc_convert(void);
N/* adc interrupt set */
Nvoid adc_interrupt_set(FunctionalState en);
N/* adc power down enable */
Nvoid adc_powerdown(FunctionalState en);
N/* adc compare config */
Nvoid adc_compare_config(adc_compare_struct adc_compare);
N/* adc trigger config */
Nvoid adc_trigger_config(adc_trigger_struct adc_trigger);
N#endif
L 13 "RTE\Device\BF7006AM64\BF7006AMxx_adc.c" 2
N#include "BF7006AMxx_sci.h"
L 1 "C:\Keil_v5\ARM\PACK\BYD\BYDMicro_DFP\1.1.0\Device\Include\BF7006AMxx\BF7006AMxx_sci.h" 1
N/*!
N    \file  BF7006AMxx_sci.h
N    \brief definitions for the sci
N*/
N
N/*
N    Copyright (C) 2017 Byd
N
N    2017-12-27, V1.0.0, firmware for BF7006AMxx
N    2019-11-22, V1.0.2, firmware for BF7006AMxx
N*/
N
N#ifndef BF7006AMxx_SCI_H
N#define	BF7006AMxx_SCI_H
N
N#include "BF7006AMxx.h"
L 1 "C:\Keil_v5\ARM\PACK\BYD\BYDMicro_DFP\1.1.0\Device\Include\BF7006AMxx\BF7006AMxx.h" 1
N/*!
N    \file  BF7006AMxx.h
N    \brief definitions for the BF7006AMxx
N*/
N
N/*
N    Copyright (C) 2017 Byd
N
N    2017-12-27, V1.0, firmware for BF7006AMxx
N*/
N
N#ifndef BF7006AMXX_H
S#define BF7006AMXX_H
S
S#ifdef __cplusplus
Sextern "C" {
S#endif
S
Stypedef enum {FALSE = 0, TRUE = !FALSE} bool;
S#define false                   FALSE
S#define true                    TRUE
S
Stypedef enum {RESET = 0U, SET = !RESET} FlagStatus, ITStatus;
S
Stypedef enum {DISABLE = 0U, ENABLE = !DISABLE} FunctionalState;
S#define IS_FUNCTIONAL_STATE(STATE) (((STATE) == DISABLE) || ((STATE) == ENABLE))
S
Stypedef enum {ERROR = 0U, SUCCESS = !ERROR} ErrorStatus;
S
S#define NULL                    ((void *)0)
S    
Stypedef unsigned char           UINT8;              /* unsigned 8 bit definition    */
Stypedef unsigned short          UINT16;             /* unsigned 16 bit definition   */
Stypedef unsigned int            UINT32;             /* unsigned 32 bit definition   */
Stypedef signed char             INT8;               /* signed 8 bit definition      */
Stypedef short                   INT16;              /* signed 16 bit definition     */
Stypedef signed int              INT32;              /* signed 32 bit definition     */
Stypedef void(*pt2Func)(void);                       /* Pointer to Functions, void argument              */
Stypedef void(*pt2FuncU8)(UINT8);                    /* Pointer to Functions, UINT8 argument             */
Stypedef void(*pt2FuncU32)(UINT32);                  /* Pointer to Functions, UINT32 argument            */
Stypedef void(*pt2FuncU32U8)(UINT32,UINT8);          /* Pointer to Functions, UINT32 and UINT8 argument  */
S    
S/* bit operations */
S#define REG32(addr)             (*((volatile uint32_t *)((uint32_t)(addr))))
S#define REG16(addr)             (*((volatile uint16_t *)((uint32_t)(addr))))
S#define REG8(addr)              (*((volatile uint8_t *)((uint32_t)(addr))))
S#define BIT(x)                  ((uint32_t)(0x01UL<<((uint8_t)(x))))
S//#define BIT(x)                  ((uint8_t)(((uint8_t)0x01)<<((uint32_t)x)))
S
S//#define    BIT(0)               ((uint8_t)((uint8_t)0x01<<(x)))
S#define BITS(start, end)                ((uint32_t)((0xFFFFFFFFUL << ((uint8_t)(start))) & (0xFFFFFFFFUL >> (31U - ((uint8_t)(end)))))) 
S#define GET_BITS(regval, start, end)    (((regval) & BITS((start),(end))) >> (start))
S
S/* -------------------------  Interrupt Number Definition  ------------------------ */
Stypedef enum IRQn
S{
S/* -------------------  Cortex-M0 Processor Exceptions Numbers  ------------------- */
S  NonMaskableInt_IRQn           = -14,      /*!<  2 Non Maskable Interrupt          */
S  HardFault_IRQn                = -13,      /*!<  3 HardFault Interrupt             */
S  SVCall_IRQn                   =  -5,      /*!< 11 SV Call Interrupt               */
S  PendSV_IRQn                   =  -2,      /*!< 14 Pend SV Interrupt               */
S  SysTick_IRQn                  =  -1,      /*!< 15 System Tick Interrupt           */
S
S/* ----------------------  ARMCM0 Specific Interrupt Numbers  --------------------- */
S  RESERVED0                     =   0,      /*!<                                    */
S  SYS_IRQn                      =   1,      /*!< Flash ECC Error Interrupt          */
S  RESERVED1                     =   2,      /*!<                                    */
S  RESERVED2                     =   3,      /*!<                                    */
S  LVDT_IRQn                     =   4,      /*!< LVDT Interrupt                     */
S  PWM_CH0_IRQn                  =   5,      /*!< PWM channel 0 Interrupt            */
S  PWM_CH1_IRQn                  =   6,      /*!< PWM channel 1 Interrupt            */
S  PWM_CH2_IRQn                  =   7,      /*!< PWM channel 2 Interrupt            */
S  PWM_CH3_IRQn                  =   8,      /*!< PWM channel 3 Interrupt            */
S  PWM_CH4_IRQn                  =   9,      /*!< PWM channel 4 Interrupt            */
S  PWM_CH5_IRQn                  =  10,      /*!< PWM channel 5 Interrupt            */
S  PWM_TOF_IRQN                  =  11,      /*!< PWM overflow Interrupt             */
S  RESERVED4                     =  12,      /*!<                                    */
S  RESERVED5                     =  13,      /*!<                                    */
S  RESERVED6                     =  14,      /*!<                                    */
S  RESERVED7                     =  15,      /*!<                                    */
S  SCI0_ERR_IRQn                 =  16,      /*!< SCI0 ERR Interrupt                 */
S  SCI0_RX_IRQn                  =  17,      /*!< SCI0 RX Interrupt                  */
S  SCI0_TX_IRQn                  =  18,      /*!< SCI0 TX Interrupt                  */
S  SCI1_ERR_IRQn                 =  19,      /*!< SCI1 ERR Interrupt                 */
S  SCI1_RX_IRQn                  =  20,      /*!< SCI1 RX Interrupt                  */
S  SCI1_TX_IRQn                  =  21,      /*!< SCI1 TX Interrupt                  */
S  GPIO_IRQn                     =  22,      /*!< GPIO External Interrupt            */
S  ADC_IRQn                      =  23,      /*!< ADC Interrupt                      */
S  RESERVED8                     =  24,      /*!<                                    */
S  RTC_IRQn                      =  25,      /*!< RTC Interrupt                      */
S  CAN_WAKE_IRQn                 =  26,      /*!< CAN Interrupt                      */
S  CAN_ERR_IRQn                  =  27,      /*!< CAN ERR Interrupt                  */
S  CAN_RX_IRQn                   =  28,      /*!< CAN RX Interrupt                   */
S  CAN_TX_IRQn                   =  29,      /*!< CAN TX Interrupt                   */
S  TIMER0_IRQn                   =  30,      /*!< Timer0 Interrupt                   */
S  TIMER1_IRQn                   =  31,      /*!< Timer1 Interrupt                   */
S} IRQn_Type;
S
S/* ================================================================================ */
S/* ================      Processor and Core Peripheral Section     ================ */
S/* ================================================================================ */
S
S/* --------  Configuration of the Cortex-M4 Processor and Core Peripherals  ------- */
S#define __CM0_REV                   0x0000      /*!< Core revision r0p0                              */
S#define __MPU_PRESENT               0           /*!< MPU present or not                              */
S#define __NVIC_PRIO_BITS            2           /*!< Number of Bits used for Priority Levels         */
S#define __Vendor_SysTickConfig      0           /*!< Set to 1 if different SysTick Config is used    */
S
S#include "core_cm0.h"                           /* Processor and core peripherals                    */
S#include "system_ARMCM0.h"                      /* System Header                                     */
S
S/* ================================================================================ */
S/* ================       Device Specific Peripheral Section       ================ */
S/* ================================================================================ */
S
S/* -------------------  Start of section using anonymous unions  ------------------ */
S#if defined(__CC_ARM)
S  #pragma push
S  #pragma anon_unions
S#elif defined(__ICCARM__)
S  #pragma language=extended
S#elif defined(__GNUC__)
S  /* anonymous unions are enabled by default */
S#elif defined(__TMS470__)
S/* anonymous unions are enabled by default */
S#elif defined(__TASKING__)
S  #pragma warning 586
S#elif defined ( __CSMC__ )      /* Cosmic */
S/* anonymous unions are enabled by default */
S#else
S  #warning Not supported compiler type
S#endif
S
S
S/**
S  \brief   System Sleeping
S  \details system step into sleeping mode
S */
S__STATIC_INLINE void System_Sleeping(void)
S{
S    SCB->SCR &= (uint32_t)(~SCB_SCR_SLEEPDEEP_Msk);
S    __WFI();
S}
S
S/**
S  \brief   System Sleepdeep
S  \details system step into sleepdeep mode
S */
S__STATIC_INLINE void System_SleepDeep(void)
S{
S    SCB->SCR |= (uint32_t)SCB_SCR_SLEEPDEEP_Msk;
S    __WFI();
S}
S
S/**
S  \brief   Set Main Stack Pointer
S  \details Assigns the given value to the Main Stack Pointer (MSP).
S  \param [in]    topOfMainStack  Main Stack Pointer value to set
S */
S__STATIC_INLINE void set_MSP(uint32_t topOfMainStack)
S{
S    __set_MSP(topOfMainStack);
S}
S
S/**
S  \brief   Set Process Stack Pointer
S  \details Assigns the given value to the Process Stack Pointer (PSP).
S  \param [in]    topOfProcStack  Process Stack Pointer value to set
S */
S__STATIC_INLINE void set_PSP(uint32_t topOfProcStack)
S{
S    __set_PSP(topOfProcStack);
S}
S
S/**
S  \brief   No Operation
S  \details No Operation does nothing. This instruction can be used for code alignment purposes.
S */
S__STATIC_INLINE void NOP(void)
S{
S    __NOP();
S}
S
S/**
S  \brief   Enable Interrupt
S  \details Enable Interrupt. This instruction can be used for code alignment purposes.
S */
S__STATIC_INLINE void Enable_Irq(void)
S{
S    __enable_irq();
S}
S
S/**
S  \brief   Disable Interrupt
S  \details Disable interrupt. This instruction can be used for code alignment purposes.
S */
S__STATIC_INLINE void Disable_Irq(void)
S{
S    __disable_irq();
S}
S
S/* ================================================================================ */
S/* ================              Peripheral memory map             ================ */
S/* ================================================================================ */
S/* Peripheral and SRAM base address */
S#define FLASH_BASE              ((uint32_t)0x00000000)          ///< Flash base address
S#define FLASH_NVR_BASE          ((uint32_t)0x00018000)          ///< Flash information block,read only
S#define SRAM_BASE               ((uint32_t)0x20000000)          ///< SRAM base address
S#define EEPROM_BASE             ((uint32_t)0x40000000)          ///< EEPROM base address
S#define AHBPERIPH_BASE          ((uint32_t)0x50000000)          ///< AHB base address
S
S/* Peripheral memory map */
S#define EFLASH_CTRL_BASE        (AHBPERIPH_BASE + (uint32_t)0x00000)    ///< FLASH and EEPROM register base address
S#define SYSCTRL_BASE            (AHBPERIPH_BASE + (uint32_t)0x10000)    ///< SYS control register base address
S#define SCI_BASE                (AHBPERIPH_BASE + (uint32_t)0x40000)    ///< LIN0 register base address
S#define CAN_BASE                (AHBPERIPH_BASE + (uint32_t)0x50000)    ///< CAN register base address
S#define PWM_BASE                (AHBPERIPH_BASE + (uint32_t)0x60000)    ///< PWM register base address
S#define RTC_BASE                (AHBPERIPH_BASE + (uint32_t)0x70000)    ///< RTC register base address
S#define WDT_BASE                (AHBPERIPH_BASE + (uint32_t)0x80000)    ///< WDT register base address
S#define ADC_BASE                (AHBPERIPH_BASE + (uint32_t)0x90000)    ///< ADC/ACMP register base address
S#define GPIO_BASE               (AHBPERIPH_BASE + (uint32_t)0xA0000)    ///< GPIO register base address
S#define TIMER_BASE              (AHBPERIPH_BASE + (uint32_t)0xB0000)    ///< Timer0/1 register base address
S
S#define SCI0                    (SCI_BASE       + (uint32_t)0x0000)     ///< SCI0 register base address
S#define SCI1                    (SCI_BASE       + (uint32_t)0x4000)     ///< SCI1 register base address
S
S#define GPIOA                   (GPIO_BASE      + (uint32_t)0x0000)     ///< GPIOA register base address
S#define GPIOB                   (GPIO_BASE      + (uint32_t)0x001C)     ///< GPIOB register base address
S#define GPIOC                   (GPIO_BASE      + (uint32_t)0x0038)     ///< GPIOC register base address
S#define GPIOD                   (GPIO_BASE      + (uint32_t)0x0048)     ///< GPIOD register base address
S#define GPIOE                   (GPIO_BASE      + (uint32_t)0x0064)     ///< GPIOE register base address
S#define GPIOF                   (GPIO_BASE      + (uint32_t)0x0074)     ///< GPIOF register base address
S#define GPIOG                   (GPIO_BASE      + (uint32_t)0x0084)     ///< GPIOG register base address
S
S#define TIMER0                  (TIMER_BASE     + (uint32_t)0x0000)     ///< Timer0 register base address
S#define TIMER1                  (TIMER_BASE     + (uint32_t)0x4000)     ///< Timer1 register base address
S
S/* --------------------  End of section using anonymous unions  ------------------- */
S#if defined(__CC_ARM)
S  #pragma pop
S#elif defined(__ICCARM__)
S  /* leave anonymous unions enabled */
S#elif defined(__GNUC__)
S  /* anonymous unions are enabled by default */
S#elif defined(__TMS470__)
S  /* anonymous unions are enabled by default */
S#elif defined(__TASKING__)
S  #pragma warning restore
S#elif defined ( __CSMC__ )      /* Cosmic */
S/* anonymous unions are enabled by default */
S#else
S  #warning Not supported compiler type
S#endif
S
S#ifdef __cplusplus
S}
S#endif
S
N#endif  /* ARMCM0_H */
L 17 "C:\Keil_v5\ARM\PACK\BYD\BYDMicro_DFP\1.1.0\Device\Include\BF7006AMxx\BF7006AMxx_sci.h" 2
N
N/* registers definitions */
N#define SCI_BDH(scix)                   (REG32((scix) + 0x00U))         /*!< sci(0/1) baud rate register: High   */
N#define SCI_BDL(scix)                   (REG32((scix) + 0x04U))         /*!< sci(0/1) baud rate register: Low    */
N#define SCI_C1(scix)                    (REG32((scix) + 0x08U))         /*!< sci(0/1) control register 1         */
N#define SCI_C2(scix)                    (REG32((scix) + 0x0CU))         /*!< sci(0/1) control register 2         */
N#define SCI_S1(scix)                    (REG32((scix) + 0x10U))         /*!< sci(0/1) status register 1          */
N#define SCI_S2(scix)                    (REG32((scix) + 0x14U))         /*!< sci(0/1) status register 2          */
N#define SCI_C3(scix)                    (REG32((scix) + 0x18U))         /*!< sci(0/1) control register 3         */
N#define SCI_D(scix)                     (REG32((scix) + 0x1CU))         /*!< sci(0/1) data register 3            */
N#define SCI_EN(scix)                    (REG32((scix) + 0x20U))         /*!< sci(0/1) enable register            */
N/* end registers definitions */
N
N/* bits definitions */
N/* SCI_BDH */
N#define SCI_BDH_BREAK_CHECK_EN          BIT(7)                          /*!< sci break check enable or disable          */
N#define SCI_BDH_RX_EDGE_INT_EN          BIT(6)                          /*!< sci rx edge interrupt enable or disable    */
N#define SCI_BDH_RATE_AUTOMATCH_EN       BIT(5)                          /*!< sci baud rate auto match enable or disable */
N#define SCI_BDH_BPR_H                   BIT(0,4)                        /*!< sci baud rate high 4 bits                  */
N
N/* SCI_BDL */
N#define SCI_BDL_BPR_L                   BITS(0,7)                       /*!< sci baud rate low 8 bits */
N
N/* SCI_C1 */
N#define SCI_C1_CYCLE_MODE               BIT(7)                          /*!< sci cycle mode enable          */
N#define SCI_C1_STOP_WIDTH               BIT(6)                          /*!< sci stop bit width as 2bits    */
N#define SCI_C1_SINGLE_TXD               BIT(5)                          /*!< sci single wire enable         */
N#define SCI_C1_DATA_WIDTH               BIT(4)                          /*!< sci data bit width as 9bits    */
N#define SCI_C1_WAKE_SEL                 BIT(3)                          /*!< sci receiver waked up(received data highest bit=1) */
N#define SCI_C1_IDLE_SEL                 BIT(2)                          /*!< sci idle timer start after stop bit */
N#define SCI_C1_PARITY_EN                BIT(1)                          /*!< sci parity enable              */
N#define SCI_C1_PARITY_ODD               BIT(0)                          /*!< sci odd parity                 */
N
N/* SCI_C2 */
N#define SCI_C2_TX_EMPTY_INT_EN          BIT(7)                          /*!< sci tx empty intterrupt enable     */
N#define SCI_C2_TX_COMP_INT_EN           BIT(6)                          /*!< sci tx complete intterupt enable   */
N#define SCI_C2_RX_FULL_INT_EN           BIT(5)                          /*!< sci rx full interrupt enable       */
N#define SCI_C2_IDLE_INT_EN              BIT(4)                          /*!< sci idle interrupt enable          */
N#define SCI_C2_TX_EN                    BIT(3)                          /*!< sci tx enable                      */
N#define SCI_C2_RX_EN                    BIT(2)                          /*!< sci rx enable                      */
N#define SCI_C2_RWU                      BIT(1)                          /*!< sci receiver is standby state      */
N#define SCI_C2_BREAK_TX                 BIT(0)                          /*!< sci transmit break control         */
N
N/* SCI_S1 */
N#define SCI_S1_TX_EMPTY_FLAG            BIT(7)                          /*!< sci tx empty interrupt flag        */
N#define SCI_S1_TX_COMP_FLAG             BIT(6)                          /*!< sci tx complete interrupt flag     */
N#define SCI_S1_RX_FULL_FLAG             BIT(5)                          /*!< sci rx full interrupt flag         */
N#define SCI_S1_IDLE_FLAG                BIT(4)                          /*!< sci idle interrupt flag            */
N#define SCI_S1_RX_OVERFLOW_FLAG         BIT(3)                          /*!< sci rx over flow interrupt flag    */
N#define SCI_S1_NOSIE_ERR_FLAG           BIT(2)                          /*!< sci nosie error interrupt flag     */
N#define SCI_S1_FRAME_ERR_FLAG           BIT(1)                          /*!< sci frame error interrupt flag     */
N#define SCI_S1_PARITY_ERR_FLAG          BIT(0)                          /*!< sci parity error interrupt flag    */
N
N/* SCI_S2 */
N#define SCI_S2_BREAK_CHECK_FLAG         BIT(7)                          /*!< sci break check interrupt flag     */
N#define SCI_S2_RX_EDGE_FLAG             BIT(6)                          /*!< sci rx edge interrupt flag         */
N#define SCI_S2_RX_INVERSION             BIT(4)                          /*!< sci rx data inversion flag         */
N#define SCI_S2_RWU_IDLESEL              BIT(3)                          /*!< sci set IDLE or not when receiver in standby state after an idle is detected */
N#define SCI_S2_BREAK_TX_SIZE            BIT(2)                          /*!< sci trans break size is 13bits     */
N#define SCI_S2_BREAK_CHECK_EN           BIT(1)                          /*!< sci rx break check enable          */
N#define SCI_S2_RX_ACTIVE_FLAG           BIT(0)                          /*!< sci receiver is active             */
N
N/* SCI_C3 */
N#define SCI_C3_R8                       BIT(7)                          /*!< sci rx 8th bit data                */
N#define SCI_C3_T8                       BIT(6)                          /*!< sci tx 8th bit data                */
N#define SCI_C3_TX_DIR                   BIT(5)                          /*!< sci tx is output in single mode    */
N#define SCI_C3_TX_INV                   BIT(4)                          /*!< sci tx data inversion              */
N#define SCI_C3_RX_OF_INT_EN             BIT(3)                          /*!< sci rx over flow interrupt enable  */
N#define SCI_C3_NOISE_ERR_INT_EN         BIT(2)                          /*!< sci rx noise error interrupt enable */
N#define SCI_C3_FRAME_ERR_INT_EN         BIT(1)                          /*!< sci rx frame error interrupt enable */
N#define SCI_C3_PARITY_ERR_INT_EN        BIT(0)                          /*!< sci parity error interrupt enable  */
N
N/* SCI_D */
N#define SCI_DATA                        BITS(0,7)                       /*!< sci data register */
N
N/* SCI_EN */
N#define SCI_ENABLE                      BIT(0)                          /*!< sci enable */
N
N/* end bits definitions */
N
N/* constants definitions */
N/* SCI baud rate define */
N#define SCI_BAUD_RATE_4800              (uint32_t)4800                  /*!< sci(0/1) baud rate define */
N#define SCI_BAUD_RATE_9600              (uint32_t)9600                  /*!< sci(0/1) baud rate define */
N#define SCI_BAUD_RATE_19200             (uint32_t)19200                 /*!< sci(0/1) baud rate define */
N#define SCI_BAUD_RATE_38400             (uint32_t)38400                 /*!< sci(0/1) baud rate define */
N#define SCI_BAUD_RATE_57600             (uint32_t)57600                 /*!< sci(0/1) baud rate define */
N#define SCI_BAUD_RATE_115200            (uint32_t)115200                /*!< sci(0/1) baud rate define */
N
N/* SCI work mode define */
N#define SCI_CYCLE_MODE                  BIT(7)                          /*!< sci(0/1) cycle mode, tx connect to rx automatic */
N#define SCI_SINGLE_MODE                 BIT(5)                          /*!< sci(0/1) single mode, rx pin is invalid    */
N#define SCI_NORMAL_MODE                 0U                              /*!< sci(0/1) normal mode                       */
N
N/* SCI idle select define */
N#define SCI_IDLE_SEL_STARTBIT           0U                              /*!< sci idle timer start count after start bit */
N#define SCI_IDLE_SEL_STOPBIT            BIT(2)                          /*!< sci idle timer start count after stop bit  */
N
N/* SCI receiver wake up select define */
N#define SCI_WAKE_SEL_ADDRRECE           BIT(3)                          /*!< sci receiver use received data to wake up  */
N#define SCI_WAKE_SEL_IDLE               0U                              /*!< sci receiver use idle to wake up           */
N
N/* SCI stop bit width set */
N#define SCI_STOP_BIT_1BIT               0U                              /*!< sci stop bit width is 1bit     */
N#define SCI_STOP_BIT_2BITS              BIT(6)                          /*!< sci stop bit width is 2bits    */
N
N/* SCI data bit width set */
N#define SCI_DATA_BIT_8BITS              0U                              /*!< sci data bits width is 8bits   */
N#define SCI_DATA_BIT_9BITS              BIT(4)                          /*!< sci data bits width is 9bits   */
N
N/* SCI parity enable or disable set */
N#define SCI_PARITY_ENABLE               BIT(1)                          /*!< sci parity enable  */
N#define SCI_PARITY_DISABLE              0U                              /*!< sci parity disable */
N
N/* SCI parity select: odd or even */
N#define SCI_PARITY_ODD                  BIT(0)                          /*!< sci set as odd parity  */
N#define SCI_PARITY_EVEN                 0U                              /*!< sci set as even parity */
N
N/* SCI tx data inversion enable */
N#define SCI_TX_INV_DISABLE              0U                              /*!< sci tx data inversion disable */
N#define SCI_TX_INV_ENABLE               BIT(4)                          /*!< sci tx data inversion enable  */
N
N/* SCI interrupt enable define */
N#define SCI_IE_BREAK_CHECK              BIT(15)                         /*!< sci break check interrupt enable   */
N#define SCI_IE_RX_EDGE                  BIT(14)                         /*!< sci rx edge interrupt enable       */
N#define SCI_IE_TX_EMPTY                 BIT(7)                          /*!< sci tx empty interrupt enable      */
N#define SCI_IE_TX_COMP                  BIT(6)                          /*!< sci tx complete interrupt enable   */
N#define SCI_IE_RX_FULL                  BIT(5)                          /*!< sci rx full interrupt enable       */
N#define SCI_IE_IDLE                     BIT(4)                          /*!< sci idle interrupt enable          */
N#define SCI_IE_RX_OF                    BIT(3)                          /*!< sci rx over flow interrupt enable  */
N#define SCI_IE_NOISE_ERR                BIT(2)                          /*!< sci noise error interrupt enable   */
N#define SCI_IE_FRAME_ERR                BIT(1)                          /*!< sci frame error interrupt enable   */
N#define SCI_IE_PARITY_ERR               BIT(0)                          /*!< sci parity error interrupt enable  */
N
N/* SCI rwu_idlesel set */
N#define SCI_RWU_IDLESEL_ENABLE          BIT(3)          /*!< sci set IDLE when receiver in standby state after an idle is detected */
N#define SCI_RWU_IDLESEL_DISABLE         0U              /*!< sci not set IDLE when receiver in standby state after an idle is detected */
N
N/* SCI break tx size select */
N#define SCI_BREAK_TX_SIZE_13BITS        BIT(2)                          /*!< sci transmit break width is 13bits */
N#define SCI_BREAK_TX_SIZE_10BITS        0U                              /*!< sci transmit break width is 10bits */
N
N/* SCI break check enable set */
N#define SCI_BREAK_CHECK_ENABLE          BIT(1)                          /*!< sci break check enable     */
N#define SCI_BREAK_CHECK_DISABLE         0U                              /*!< sci break check disable    */
N
N/* SCI baud rate auto match set */
N#define SCI_RATE_AUTOMATCH_ENABLE       BIT(5)                          /*!< sci rate auto match enable when receive sync segment */
N#define SCI_RATE_AUTOMATCH_DISABLE      0U                              /*!< sci rate auto match disable when receive sync segment */
N
N/* SCI tx enable or disable set */
N#define SCI_TX_ENABLE                   BIT(3)                          /*!< sci tx enable  */
N#define SCI_TX_DISABLE                  0U                              /*!< sci tx disable */
N
N/* SCI rx enable or disable set */
N#define SCI_RX_ENABLE                   BIT(2)                          /*!< sci rx enable  */
N#define SCI_RX_DISABLE                  0U                              /*!< sci tx disable */
N
N/* SCI tx interrupt flag define */    
N#define SCI_IF_TX_EMPTY                 BIT(7)                          /*!< sci tx empty interrupt flag    */
N#define SCI_IF_TX_COMP                  BIT(6)                          /*!< sci tx complete interrupt flag */
N
N/* SCI rx interrupt flag define */    
N#define SCI_IF_BREAK_CHECK              BIT(7)                          /*!< sci break check interrupt flag */
N#define SCI_IF_RX_EDGE                  BIT(6)                          /*!< sci rx edge interrupt flag     */
N#define SCI_IF_RX_FULL                  BIT(5)                          /*!< sci rx full interrupt flag     */
N#define SCI_IF_IDLE                     BIT(4)                          /*!< sci idle interrupt flag        */
N
N/* SCI error interrupt flag define */    
N#define SCI_IF_RX_OF                    BIT(3)                          /*!< sci rx over flow interrupt flag */
N#define SCI_IF_NOISE_ERR                BIT(2)                          /*!< sci noise error interrupt flag  */
N#define SCI_IF_FRAME_ERR                BIT(1)                          /*!< sci frame error interrupt flag  */
N#define SCI_IF_PARITY_ERR               BIT(0)                          /*!< sci parity error interrupt flag */
N
N/* SCI nvic enable define */
N#define SCI_NVIC_ERR_ENABLE             BIT(0)                          /*!< sci nvic err interrupt enable  */
N#define SCI_NVIC_ERR_DISABLE            0U                              /*!< sci nvic err interrupt disable */
N#define SCI_NVIC_TX_ENABLE              BIT(1)                          /*!< sci nvic tx interrupt enable   */
N#define SCI_NVIC_TX_DISABLE             0U                              /*!< sci nvic tx interrupt disable  */
N#define SCI_NVIC_RX_ENABLE              BIT(2)                          /*!< sci nvic rx interrupt enable   */
N#define SCI_NVIC_RX_DISABLE             0U                              /*!< sci nvic rx interrupt disable  */
N
N/* SCI PID calculate define */
N/*#define ParityBIT(A,B)                  (((A)>>(B))&0x01U)     */            /*!< A is the variable while B is the bit number */  
N
N/* SCI initiliaze parameters struct */
Ntypedef struct
N{
N    uint32_t    baud_rate;          /*!< sci baud rate set                                          */
N    uint8_t     work_mode;          /*!< sci work mode select                                       */
N    uint8_t     stop_bit_width;     /*!< sci stop bit width set                                     */
N    uint8_t     data_bit_width;     /*!< sci data bit width set                                     */
N    uint8_t     parity_en;          /*!< sci parity enable or disable                               */
N    uint8_t     parity_sel;         /*!< sci parity select: odd or even                             */
N    uint8_t     break_tx_size;      /*!< sci break transmit size select: 13 bits or 11 bits         */
N    uint8_t     break_check_en;     /*!< sci break check enable or disable                          */
N    uint8_t     rate_automatch_en;  /*!< sci baud rate auto match enable when detect lin sync section */
N    uint8_t     tx_en;              /*!< sci tx enable or disable                                   */
N    uint8_t     rx_en;              /*!< sci rx enable or disable                                   */
N    uint8_t     idle_sel;           /*!< sci idle timer start count select                          */
N    uint8_t     wake_sel;           /*!< sci receiver wake up mode select                           */
N    uint8_t     tx_inversion_en;    /*!< sci tx data inversion enable                               */
N    uint8_t     rwu_idlesel;        /*!< sci set IDLE or not when receiver in standby state after an idle is detected */
N    uint16_t    int_enable;         /*!< sci interrupt enable                                       */
N    uint8_t     nvic_enable;        /*!< sci nvic interrupt enable                                  */
N}sci_parameter_struct;
N
N
N/* function declarations */
N/* sci initialize */
NErrorStatus sci_init(uint32_t scix,sci_parameter_struct sci_parameter_init);
N/* sci enable */
Nvoid sci_enable(uint32_t scix);
N/* sci disable */
Nvoid sci_disable(uint32_t scix);
N/* sci data send */
Nvoid sci_data_send(uint32_t scix,uint8_t dat);
N/* sci data get */
Nuint8_t sci_data_get(uint32_t scix);
N
N/* sci tx enable */
Nvoid sci_tx_enable(uint32_t scix);
N/* sci tx disable */
Nvoid sci_tx_disable(uint32_t scix);
N/* sci rx enable */
Nvoid sci_rx_enable(uint32_t scix);
N/* sci rx disable */
Nvoid sci_rx_disable(uint32_t scix);
N
N/* sci tx output in single mode */
Nvoid sci_tx_out(uint32_t scix);
N/* sci tx input in single mode */
Nvoid sci_tx_in(uint32_t scix);
N/* sci t8 set */
Nvoid sci_t8_set(uint32_t scix);
N/* sci t8 reset */
Nvoid sci_t8_reset(uint32_t scix);
N/* sci r8 get */
NFlagStatus sci_r8_get(uint32_t scix);
N/* sci rx data inversion state get */
NFlagStatus sci_rx_inv_get(uint32_t scix);
N
N/* sci tx interrupt flag get */
Nuint8_t sci_tx_int_flag_get(uint32_t scix);
N/* sci rx interrupt flag get */
Nuint8_t sci_rx_int_flag_get(uint32_t scix);
N/* sci error interrupt flag get */
Nuint8_t sci_err_int_flag_get(uint32_t scix);
N/* sci break check interrupt flag clear */
Nvoid sci_break_int_flag_clr(uint32_t scix);
N/* sci rx edge interrupt flag clear */
Nvoid sci_rx_edge_int_flag_clr(uint32_t scix);
N
N/* sci send byte */
NErrorStatus sci_send_byte(uint32_t scix,uint8_t dat);
N/* sci receive byte */
NErrorStatus sci_rece_byte(uint32_t scix,uint8_t *rece_dat);
N
N
N#endif
L 14 "RTE\Device\BF7006AM64\BF7006AMxx_adc.c" 2
N#include "BF7006AMxx_wdt.h"
L 1 "RTE\Device\BF7006AM64\BF7006AMxx_wdt.h" 1
N/*!
N    \file  BF7006AMxx_wdt.h
N    \brief definitions for the wdt
N*/
N
N/*
N    Copyright (C) 2017 Byd
N
N    2017-12-27, V1.0.0, firmware for BF7006AMxx
N	2019-11-22, V1.0.2, firmware for BF7006AMxx
N*/
N
N#ifndef BF7006AMxx_WDT_H
N#define	BF7006AMxx_WDT_H
N
N#include "BF7006AMxx.h"
N
N/* register definitions */
N#define	WDT_CS					(REG32(WDT_BASE + 0x00U))		/*!< wdt control register */
N#define	WDT_CNT					(REG32(WDT_BASE + 0x04U))		/*!< wdt count register */
N#define	WDT_TOVAL				(REG32(WDT_BASE + 0x08U))		/*!< wdt over flow register */
N#define	WDT_WINVAL				(REG32(WDT_BASE + 0x0cU))		/*!< wdt over flow register in window mode */
N/* end registers definitions */
N
N/* WDT_CS bits definitions */
N#define	WDT_CS_WINEN			BIT(15)						/*!< wdt window mode enable */
N#define	WDT_CS_CLKSEL			BIT(8)						/*!< wdt clock select */
N#define	WDT_CS_EN				BIT(7)						/*!< wdt enable */
N#define	WDT_CS_UPDATA			BIT(5)						/*!< wdt_cs register updata enable */
N#define	WDT_CS_SLEEP			BIT(1)						/*!< wdt enable when in sleeping mode */
N#define	WDT_CS_DEEPSLEEP		BIT(0)						/*!< wdt enable when in deep sleep mode */
N/* end bits definitions */
N
N/* WDT control define */
N/* wdt window mode select */
N#define	WDT_WIN_ENABLE			BIT(15)						/*!< wdt window mode enable */
N#define	WDT_WIN_DISABLE			0U							/*!< wdt window mode disable */
N
N/* wdt clock select */
N#define	WDT_CLOCK_32KHZ			BIT(8)						/*!< wdt clock select 32k HZ */
N#define	WDT_CLOCK_1KHZ			0U							/*!< wdt clock select 1k HZ */
N
N/* wdt enable */
N#define	WDT_ENABLE				BIT(7)						/*!< wdt enable */
N#define	WDT_DISABLE				0U							/*!< wdt disable */
N
N/* wdt updata enable */
N#define	WDT_UPDATA_ENABLE		BIT(5)						/*!< wdt updata enable */
N#define	WDT_UPDATA_DISABLE		0U							/*!< wdt updata disable */
N
N/* wdt enable in sleep mode */
N#define	WDT_SLEEP_ENABLE		BIT(1)						/*!< wdt enable when in sleep mode */
N#define	WDT_SLEEP_DISABLE		0U							/*!< wdt disable when in sleep mode */
N
N/* wdt enable in deep sleep mode */
N#define	WDT_DEEPSLEEP_ENABLE	BIT(0)						/*!< wdt enable when in deep sleep mode */
N#define	WDT_DEEPSLEEP_DISABLE	0U							/*!< wdt disable when in deep sleep mode */
N
N/* function declarations */
N/* wdt clear */
Nvoid wdt_clear(void);
N/* wdt updata */
Nvoid wdt_updata(uint16_t wdt_cs);
N/* wdt config */
Nvoid wdt_config(uint16_t wdt_cs);
N/* wdt overflow count set */
Nvoid wdt_overflow_count(uint16_t wdt_cnt);
N/* wdt overflow count set in window mode */
Nvoid wdt_overflow_count_win(uint16_t wdt_cnt);
N
N#endif
L 15 "RTE\Device\BF7006AM64\BF7006AMxx_adc.c" 2
N#include "BF7006AMxx_pwm.h"
L 1 "RTE\Device\BF7006AM64\BF7006AMxx_pwm.h" 1
N/*!
N    \file  BF7006AMxx_pwm.h
N    \brief definitions for the pwm
N*/
N
N/*
N    Copyright (C) 2017 Byd
N
N    2017-12-27, V1.0.0, firmware for BF7006AMxx
N	2019-11-22, V1.0.2, firmware for BF7006AMxx
N    2021-03-03, V1.0.3, fixed problems which may cause by configuration order of pwm control reg and channel value reg
N                        now configure mod reg first then sc reg
N*/
N
N#ifndef BF7006AMxx_PWM_H
N#define	BF7006AMxx_PWM_H
N
N#include "BF7006AMxx.h"
N
N/* register definitions */
N#define PWM_SC                      (REG32(PWM_BASE + 0x00U))       /*!< pwm control register               */
N#define PWM_CNT                     (REG32(PWM_BASE + 0x04U))       /*!< pwm current count register         */
N#define PWM_MOD                     (REG32(PWM_BASE + 0x08U))       /*!< pwm mod count register             */
N#define PWM_C0SC                    (REG32(PWM_BASE + 0x0cU))       /*!< pwm channel 0 control register     */
N#define PWM_C0V                     (REG32(PWM_BASE + 0x10U))       /*!< pwm channel 0 count register       */
N#define PWM_C1SC                    (REG32(PWM_BASE + 0x14U))       /*!< pwm channel 1 control register     */
N#define PWM_C1V                     (REG32(PWM_BASE + 0x18U))       /*!< pwm channel 1 count register       */
N#define PWM_C2SC                    (REG32(PWM_BASE + 0x1cU))       /*!< pwm channel 2 control register     */
N#define PWM_C2V                     (REG32(PWM_BASE + 0x20U))       /*!< pwm channel 2 count register       */
N#define PWM_C3SC                    (REG32(PWM_BASE + 0x24U))       /*!< pwm channel 3 control register     */
N#define PWM_C3V                     (REG32(PWM_BASE + 0x28U))       /*!< pwm channel 3 count register       */
N#define PWM_C4SC                    (REG32(PWM_BASE + 0x2cU))       /*!< pwm channel 4 control register     */
N#define PWM_C4V                     (REG32(PWM_BASE + 0x30U))       /*!< pwm channel 4 count register       */
N#define PWM_C5SC                    (REG32(PWM_BASE + 0x34U))       /*!< pwm channel 5 control register     */
N#define PWM_C5V                     (REG32(PWM_BASE + 0x38U))       /*!< pwm channel 5 count register       */
N#define PWM_ADC_CV                  (REG32(PWM_BASE + 0x3CU))       /*!< pwm trigg adc scan count register  */
N/* end register definitions */
N
N/* bits definitions */
N/* PWM_SC */
N#define PWM_SC_TOF                  BIT(7)                          /*!< pwm over flow interrupt flag       */
N#define PWM_SC_TOIE                 BIT(6)                          /*!< pwm over flow interrupt enable     */
N#define PWM_SC_CPWMS                BIT(5)                          /*!< pwm count unidirectional or bidirectional select */
N#define PWM_SC_CLK_SEL              BITS(3,4)                       /*!< pwm clock select                   */
N#define PWM_SC_CLK_SEL_LSB          3                               /*!< pwm clock select LSB               */
N#define PWM_SC_CLK_DIV              BITS(0,2)                       /*!< pwm clock divide                   */
N#define PWM_SC_CLK_DIV_LSB          0                               /*!< pwm clock divide LSB               */
N
N/* PWM_CnSC(n=0~5) */
N#define PWM_CnSC_IF                 BIT(7)                          /*!< pwm channel n input or output capture interrupt flag   */
N#define PWM_CnSC_IE                 BIT(6)                          /*!< pwm channel n input or output capture interrupt enable */
N#define PWM_CnSC_MS                 BITS(4,5)                       /*!< pwm channel n mode select          */
N#define PWM_CnSC_MS_LSB             4U                              /*!< pwm channel n mode select LSB      */
N#define PWM_CnSC_ELS                BITS(2,3)                       /*!< pwm channel n edge or level select */
N#define PWM_CnSC_ELS_LSB            2U                              /*!< pwm channel n edge or level select LSB */
N/* end bits definitions */
N
N/* contacts definitions */
N/* pwm interrupt enable */
N#define PWM_INT_ENABLE              BIT(6)                          /*!< pwm interrupt enable   */
N#define PWM_INT_DISABLE             0U                              /*!< pwm interrupt disable  */
N
N/* pwm cpwms set */
N#define PWM_CPWMS_UNIDIR            0U                              /*!< pwm count unidirectional   */
N#define PWM_CPWMS_BIDIR             BIT(5)                          /*!< pwm count bidirectional    */
N
N/* pwm clock select */
N#define PWM_CLK_SEL_SYS             (1U << PWM_SC_CLK_SEL_LSB)      /*!< pwm clock select as system clock       */
N#define PWM_CLK_SEL_EXIN            (3U << PWM_SC_CLK_SEL_LSB)      /*!< pwm clock select as external input pin */
N#define PWM_CLK_SEL_CLOSE           0U                              /*!< pwm clock close                        */
N
N/* pwm clock divide */
N#define PWM_CLK_DIV_1               0U                              /*!< pwm clock divide 1 */
N#define PWM_CLK_DIV_2               1U                              /*!< pwm clock divide 2 */
N#define PWM_CLK_DIV_4               2U                              /*!< pwm clock divide 4 */
N#define PWM_CLK_DIV_8               3U                              /*!< pwm clock divide 8 */
N#define PWM_CLK_DIV_16              4U                              /*!< pwm clock divide 16 */
N#define PWM_CLK_DIV_32              5U                              /*!< pwm clock divide 32 */
N#define PWM_CLK_DIV_64              6U                              /*!< pwm clock divide 64 */
N#define PWM_CLK_DIV_128             7U                              /*!< pwm clock divide 128 */
N
N/* pwm channel n interrupr enable */
N#define PWM_CHn_INT_ENABLE          BIT(6)
N#define PWM_CHn_INT_DISABLE         0U
N
N/* pwm channel n mode select */
N#define PWM_CHn_MS(x)               (PWM_CnSC_MS & ((uint8_t)(x) << PWM_CnSC_MS_LSB))
N
N/* pwm channel n edge or level select */
N#define PWM_CHn_ELS(x)              (PWM_CnSC_ELS & ((uint8_t)(x) << PWM_CnSC_ELS_LSB))
N
N/* function declarations */
N/* pwm initialize */
Nvoid pwm_init(uint8_t pwm_sc,uint16_t pwm_mod);
N/* pwm mod count set */
Nvoid pwm_mod_set(uint16_t mod_count);
N/* pwm current count get */
Nuint16_t pwm_get_count(void);
N/* pwm interrupt flag clear */
Nvoid pwm_tof_clr(void);
N
N/* pwm channel 0 initialize */
Nvoid pwm_ch0_init(uint8_t pwm_ch_sc,uint16_t pwm_ch_cnt);
N/* pwm channel 0 count set */
Nvoid pwm_ch0_cnt_set(uint16_t count);
N/* pwm channel 0 current count get */
Nuint16_t pwm_ch0_get_count(void);
N/* pwm channel 0 interrupt flag clear */
Nvoid pwm_ch0_if_clr(void);
N
N/* pwm channel 1 initialize */
Nvoid pwm_ch1_init(uint8_t pwm_ch_sc,uint16_t pwm_ch_cnt);
N/* pwm channel 1 count set */
Nvoid pwm_ch1_cnt_set(uint16_t count);
N/* pwm channel 1 current count get */
Nuint16_t pwm_ch1_get_count(void);
N/* pwm channel 1 interrupt flag clear */
Nvoid pwm_ch1_if_clr(void);
N
N/* pwm channel 2 initialize */
Nvoid pwm_ch2_init(uint8_t pwm_ch_sc,uint16_t pwm_ch_cnt);
N/* pwm channel 2 count set */
Nvoid pwm_ch2_cnt_set(uint16_t count);
N/* pwm channel 2 current count get */
Nuint16_t pwm_ch2_get_count(void);
N/* pwm channel 2 interrupt flag clear */
Nvoid pwm_ch2_if_clr(void);
N
N/* pwm channel 3 initialize */
Nvoid pwm_ch3_init(uint8_t pwm_ch_sc,uint16_t pwm_ch_cnt);
N/* pwm channel 3 count set */
Nvoid pwm_ch3_cnt_set(uint16_t count);
N/* pwm channel 3 current count get */
Nuint16_t pwm_ch3_get_count(void);
N/* pwm channel 3 interrupt flag clear */
Nvoid pwm_ch3_if_clr(void);
N
N/* pwm channel 4 initialize */
Nvoid pwm_ch4_init(uint8_t pwm_ch_sc,uint16_t pwm_ch_cnt);
N/* pwm channel 4 count set */
Nvoid pwm_ch4_cnt_set(uint16_t count);
N/* pwm channel 4 current count get */
Nuint16_t pwm_ch4_get_count(void);
N/* pwm channel 4 interrupt flag clear */
Nvoid pwm_ch4_if_clr(void);
N
N/* pwm channel 5 initialize */
Nvoid pwm_ch5_init(uint8_t pwm_ch_sc,uint16_t pwm_ch_cnt);
N/* pwm channel 5 count set */
Nvoid pwm_ch5_cnt_set(uint16_t count);
N/* pwm channel 5 current count get */
Nuint16_t pwm_ch5_get_count(void);
N/* pwm channel 5 interrupt flag clear */
Nvoid pwm_ch5_if_clr(void);
N
N
N#endif	
L 16 "RTE\Device\BF7006AM64\BF7006AMxx_adc.c" 2
N#include "stdio.h"
L 1 ".\RTE\CMSIS\BF7006AM64\stdio.h" 1
N/* stdio.h: ANSI 'C' (X3J11 Oct 88) library header, section 4.9 */
N/* Copyright (C) Codemist Ltd., 1988-1993                       */
N/* Copyright 1991-1998 ARM Limited. All rights reserved.        */
N
N/*
N * RCS $Revision$
N * Checkin $Date$
N * Revising $Author: sdouglas $
N */
N
N/*
N * stdio.h declares two types, several macros, and many functions for
N * performing input and output. For a discussion on Streams and Files
N * refer to sections 4.9.2 and 4.9.3 in the above ANSI draft, or to a
N * modern textbook on C.
N */
N
N#ifndef __stdio_h
N#define __stdio_h
N#define __ARMCLIB_VERSION 5060034
N
N/*
N * Depending on compiler version __int64 or __INT64_TYPE__ should be defined.
N */
N#ifndef __int64
N  #ifdef __INT64_TYPE__
S    #define __int64 __INT64_TYPE__
N  #endif
N  /* On some architectures neither of these may be defined - if so, fall
N     through and error out if used. */
N#endif
N
N
N#define _ARMABI __declspec(__nothrow)
N
N  #ifndef __STDIO_DECLS
N  #define __STDIO_DECLS
N
N    #undef __CLIBNS
N    #ifdef __cplusplus
S      namespace std {
S      #define __CLIBNS ::std::
S        extern "C" {
N    #else /* ndef __cplusplus */
N      #define __CLIBNS
N    #endif /* ndef __cplusplus */
N
N#if defined(__cplusplus) || !defined(__STRICT_ANSI__) || !defined(__size_t)
X#if 0L || !0L || !0L
N /* always defined in C++ and non-strict C for consistency of debug info */
N  #if __sizeof_ptr == 8
X  #if 4 == 8
S    typedef unsigned long size_t;   /* see <stddef.h> */
N  #else
N    typedef unsigned int size_t;   /* see <stddef.h> */
N  #endif
N  #if !defined(__cplusplus) && defined(__STRICT_ANSI__)
X  #if !0L && 0L
S    #define __size_t 1
N  #endif
N#endif
N
N#undef NULL
N#define NULL 0                   /* see <stddef.h> */
N
N/* ANSI forbids va_list to be defined here */
N/* keep in step with <stdarg.h> and <wchar.h> */
N#if !defined(__va_list) && (defined(__cplusplus) || !defined(__STRICT_ANSI__) || !defined(__va_list_defined))
X#if !0L && (0L || !0L || !0L)
N/* always defined in C++ and non-strict C for consistency of debug info */
N  #ifdef __clang__
S    typedef __builtin_va_list __va_list;
N  #else
N    typedef struct __va_list __va_list;
N  #endif
N  #if !defined(__cplusplus) && defined(__STRICT_ANSI__)
X  #if !0L && 0L
S    #define __va_list_defined 1
N  #endif
N#endif
N
N   /*
N    * If the compiler supports signalling nans as per N965 then it
N    * will define __SUPPORT_SNAN__, in which case a user may define
N    * _WANT_SNAN in order to obtain compliant versions of the printf
N    * and scanf families of functions
N    */
N#if defined(__SUPPORT_SNAN__) && defined(_WANT_SNAN)
X#if 0L && 0L
S#pragma import(__use_snan)
N#endif
N
Ntypedef struct __fpos_t_struct {
N    unsigned __int64 __pos;
N    /*
N     * this structure is equivalent to an mbstate_t, but we're not
N     * allowed to actually define the type name `mbstate_t' within
N     * stdio.h
N     */
N    struct {
N        unsigned int __state1, __state2;
N    } __mbstate;
N} fpos_t;
N   /*
N    * fpos_t is an object capable of recording all information needed to
N    * specify uniquely every position within a file.
N    */
N
N#define _SYS_OPEN 16
N   /* _SYS_OPEN defines a limit on the number of open files that is imposed
N    * by this C library
N    */
N
Ntypedef struct __FILE FILE;
N   /*
N    * FILE is an object capable of recording all information needed to control
N    * a stream, such as its file position indicator, a pointer to its
N    * associated buffer, an error indicator that records whether a read/write
N    * error has occurred and an end-of-file indicator that records whether the
N    * end-of-file has been reached.
N    * Its structure is not made known to library clients.
N    */
N
N#if defined(__STRICT_ANSI__) && !__FILE_INCOMPLETE
X#if 0L && !__FILE_INCOMPLETE
Sstruct __FILE {
S    union {
S        long __FILE_alignment;
S#ifdef __TARGET_ARCH_AARCH64
S        char __FILE_size[136];
S#else /* __TARGET_ARCH_AARCH64 */
S        char __FILE_size[84];
S#endif /* __TARGET_ARCH_AARCH64 */
S    } __FILE_opaque;
S};
S    /*
S     * FILE must be an object type (C99 - 7.19.1) and an object type fully
S     * describes an object [including its static size] (C99 - 6.2.5).
S     * This definition is a placeholder which matches the struct __FILE in
S     * size and alignment as used internally by libc.
S     */
N#endif
N
N
Nextern FILE __stdin, __stdout, __stderr;
Nextern FILE *__aeabi_stdin, *__aeabi_stdout, *__aeabi_stderr;
N
N#if _AEABI_PORTABILITY_LEVEL != 0 || (!defined _AEABI_PORTABILITY_LEVEL && __DEFAULT_AEABI_PORTABILITY_LEVEL != 0)
X#if _AEABI_PORTABILITY_LEVEL != 0 || (!0L && __DEFAULT_AEABI_PORTABILITY_LEVEL != 0)
S#define stdin  (__CLIBNS __aeabi_stdin)
S   /* pointer to a FILE object associated with standard input stream */
S#define stdout (__CLIBNS __aeabi_stdout)
S   /* pointer to a FILE object associated with standard output stream */
S#define stderr (__CLIBNS __aeabi_stderr)
S   /* pointer to a FILE object associated with standard error stream */
Sextern const int __aeabi_IOFBF;
S#define _IOFBF (__CLIBNS __aeabi_IOFBF)
Sextern const int __aeabi_IONBF;
S#define _IONBF (__CLIBNS __aeabi_IONBF)
Sextern const int __aeabi_IOLBF;
S#define _IOLBF (__CLIBNS __aeabi_IOLBF)
Sextern const int __aeabi_BUFSIZ;
S#define BUFSIZ (__CLIBNS __aeabi_BUFSIZ)
Sextern const int __aeabi_FOPEN_MAX;
S#define FOPEN_MAX (__CLIBNS __aeabi_FOPEN_MAX)
Sextern const int __aeabi_TMP_MAX;
S#define TMP_MAX (__CLIBNS __aeabi_TMP_MAX)
Sextern const int __aeabi_FILENAME_MAX;
S#define FILENAME_MAX (__CLIBNS __aeabi_FILENAME_MAX)
Sextern const int __aeabi_L_tmpnam;
S#define L_tmpnam (__CLIBNS __aeabi_L_tmpnam)
N#else
N#define stdin  (&__CLIBNS __stdin)
N   /* pointer to a FILE object associated with standard input stream */
N#define stdout (&__CLIBNS __stdout)
N   /* pointer to a FILE object associated with standard output stream */
N#define stderr (&__CLIBNS __stderr)
N   /* pointer to a FILE object associated with standard error stream */
N
N#define _IOFBF           0x100 /* fully buffered IO */
N#define _IOLBF           0x200 /* line buffered IO */
N#define _IONBF           0x400 /* unbuffered IO */
N
N    /* Various default file IO buffer sizes */
N#define BUFSIZ       (512)  /* system buffer size (as used by setbuf) */
N
N#define FOPEN_MAX _SYS_OPEN
N   /*
N    * an integral constant expression that is the minimum number of files that
N    * this implementation guarantees can be open simultaneously.
N    */
N
N#define FILENAME_MAX 256
N   /*
N    * an integral constant expression that is the size of an array of char
N    * large enough to hold the longest filename string
N    */
N#define L_tmpnam FILENAME_MAX
N   /*
N    * an integral constant expression that is the size of an array of char
N    * large enough to hold a temporary file name string generated by the
N    * tmpnam function.
N    */
N#define TMP_MAX 256
N   /*
N    * an integral constant expression that is the minimum number of unique
N    * file names that shall be generated by the tmpnam function.
N    */
N
N#endif
N
N#define EOF      (-1)
N   /*
N    * negative integral constant, indicates end-of-file, that is, no more input
N    * from a stream.
N    */
N
N#define SEEK_SET 0 /* start of stream (see fseek) */
N#define SEEK_CUR 1 /* current position in stream (see fseek) */
N#define SEEK_END 2 /* end of stream (see fseek) */
N
N    /*
N     * _IOBIN is the flag passed to _sys_write to denote a binary
N     * file.
N     */
N#define _IOBIN            0x04     /* binary stream */
N
N#define __STDIN_BUFSIZ  (64)  /* default stdin buffer size */
N#define __STDOUT_BUFSIZ (64)  /* default stdout buffer size */
N#define __STDERR_BUFSIZ (16)  /* default stderr buffer size */
N
Nextern _ARMABI int remove(const char * /*filename*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int remove(const char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * causes the file whose name is the string pointed to by filename to be
N    * removed. Subsequent attempts to open the file will fail, unless it is
N    * created anew. If the file is open, the behaviour of the remove function
N    * is implementation-defined.
N    * Returns: zero if the operation succeeds, nonzero if it fails.
N    */
Nextern _ARMABI int rename(const char * /*old*/, const char * /*new*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int rename(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * causes the file whose name is the string pointed to by old to be
N    * henceforth known by the name given by the string pointed to by new. The
N    * file named old is effectively removed. If a file named by the string
N    * pointed to by new exists prior to the call of the rename function, the
N    * behaviour is implementation-defined.
N    * Returns: zero if the operation succeeds, nonzero if it fails, in which
N    *          case if the file existed previously it is still known by its
N    *          original name.
N    */
Nextern _ARMABI FILE *tmpfile(void);
Xextern __declspec(__nothrow) FILE *tmpfile(void);
N   /*
N    * creates a temporary binary file that will be automatically removed when
N    * it is closed or at program termination. The file is opened for update.
N    * Returns: a pointer to the stream of the file that it created. If the file
N    *          cannot be created, a null pointer is returned.
N    */
Nextern _ARMABI char *tmpnam(char * /*s*/);
Xextern __declspec(__nothrow) char *tmpnam(char *  );
N   /*
N    * generates a string that is not the same as the name of an existing file.
N    * The tmpnam function generates a different string each time it is called,
N    * up to TMP_MAX times. If it is called more than TMP_MAX times, the
N    * behaviour is implementation-defined.
N    * Returns: If the argument is a null pointer, the tmpnam function leaves
N    *          its result in an internal static object and returns a pointer to
N    *          that object. Subsequent calls to the tmpnam function may modify
N    *          the same object. if the argument is not a null pointer, it is
N    *          assumed to point to an array of at least L_tmpnam characters;
N    *          the tmpnam function writes its result in that array and returns
N    *          the argument as its value.
N    */
N
Nextern _ARMABI int fclose(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int fclose(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * causes the stream pointed to by stream to be flushed and the associated
N    * file to be closed. Any unwritten buffered data for the stream are
N    * delivered to the host environment to be written to the file; any unread
N    * buffered data are discarded. The stream is disassociated from the file.
N    * If the associated buffer was automatically allocated, it is deallocated.
N    * Returns: zero if the stream was succesfully closed, or nonzero if any
N    *          errors were detected or if the stream was already closed.
N    */
Nextern _ARMABI int fflush(FILE * /*stream*/);
Xextern __declspec(__nothrow) int fflush(FILE *  );
N   /*
N    * If the stream points to an output or update stream in which the most
N    * recent operation was output, the fflush function causes any unwritten
N    * data for that stream to be delivered to the host environment to be
N    * written to the file. If the stream points to an input or update stream,
N    * the fflush function undoes the effect of any preceding ungetc operation
N    * on the stream.
N    * Returns: nonzero if a write error occurs.
N    */
Nextern _ARMABI FILE *fopen(const char * __restrict /*filename*/,
Xextern __declspec(__nothrow) FILE *fopen(const char * __restrict  ,
N                           const char * __restrict /*mode*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * opens the file whose name is the string pointed to by filename, and
N    * associates a stream with it.
N    * The argument mode points to a string beginning with one of the following
N    * sequences:
N    * "r"         open text file for reading
N    * "w"         create text file for writing, or truncate to zero length
N    * "a"         append; open text file or create for writing at eof
N    * "rb"        open binary file for reading
N    * "wb"        create binary file for writing, or truncate to zero length
N    * "ab"        append; open binary file or create for writing at eof
N    * "r+"        open text file for update (reading and writing)
N    * "w+"        create text file for update, or truncate to zero length
N    * "a+"        append; open text file or create for update, writing at eof
N    * "r+b"/"rb+" open binary file for update (reading and writing)
N    * "w+b"/"wb+" create binary file for update, or truncate to zero length
N    * "a+b"/"ab+" append; open binary file or create for update, writing at eof
N    *
N    * Opening a file with read mode ('r' as the first character in the mode
N    * argument) fails if the file does not exist or cannot be read.
N    * Opening a file with append mode ('a' as the first character in the mode
N    * argument) causes all subsequent writes to be forced to the current end of
N    * file, regardless of intervening calls to the fseek function. In some
N    * implementations, opening a binary file with append mode ('b' as the
N    * second or third character in the mode argument) may initially position
N    * the file position indicator beyond the last data written, because of the
N    * NUL padding.
N    * When a file is opened with update mode ('+' as the second or third
N    * character in the mode argument), both input and output may be performed
N    * on the associated stream. However, output may not be directly followed
N    * by input without an intervening call to the fflush fuction or to a file
N    * positioning function (fseek, fsetpos, or rewind), and input be not be
N    * directly followed by output without an intervening call to the fflush
N    * fuction or to a file positioning function, unless the input operation
N    * encounters end-of-file. Opening a file with update mode may open or
N    * create a binary stream in some implementations. When opened, a stream
N    * is fully buffered if and only if it does not refer to an interactive
N    * device. The error and end-of-file indicators for the stream are
N    * cleared.
N    * Returns: a pointer to the object controlling the stream. If the open
N    *          operation fails, fopen returns a null pointer.
N    */
Nextern _ARMABI FILE *freopen(const char * __restrict /*filename*/,
Xextern __declspec(__nothrow) FILE *freopen(const char * __restrict  ,
N                    const char * __restrict /*mode*/,
N                    FILE * __restrict /*stream*/) __attribute__((__nonnull__(2,3)));
N   /*
N    * opens the file whose name is the string pointed to by filename and
N    * associates the stream pointed to by stream with it. The mode argument is
N    * used just as in the fopen function.
N    * The freopen function first attempts to close any file that is associated
N    * with the specified stream. Failure to close the file successfully is
N    * ignored. The error and end-of-file indicators for the stream are cleared.
N    * Returns: a null pointer if the operation fails. Otherwise, freopen
N    *          returns the value of the stream.
N    */
Nextern _ARMABI void setbuf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) void setbuf(FILE * __restrict  ,
N                    char * __restrict /*buf*/) __attribute__((__nonnull__(1)));
N   /*
N    * Except that it returns no value, the setbuf function is equivalent to the
N    * setvbuf function invoked with the values _IOFBF for mode and BUFSIZ for
N    * size, or (if buf is a null pointer), with the value _IONBF for mode.
N    * Returns: no value.
N    */
Nextern _ARMABI int setvbuf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int setvbuf(FILE * __restrict  ,
N                   char * __restrict /*buf*/,
N                   int /*mode*/, size_t /*size*/) __attribute__((__nonnull__(1)));
N   /*
N    * may be used after the stream pointed to by stream has been associated
N    * with an open file but before it is read or written. The argument mode
N    * determines how stream will be buffered, as follows: _IOFBF causes
N    * input/output to be fully buffered; _IOLBF causes output to be line
N    * buffered (the buffer will be flushed when a new-line character is
N    * written, when the buffer is full, or when input is requested); _IONBF
N    * causes input/output to be completely unbuffered. If buf is not the null
N    * pointer, the array it points to may be used instead of an automatically
N    * allocated buffer (the buffer must have a lifetime at least as great as
N    * the open stream, so the stream should be closed before a buffer that has
N    * automatic storage duration is deallocated upon block exit). The argument
N    * size specifies the size of the array. The contents of the array at any
N    * time are indeterminate.
N    * Returns: zero on success, or nonzero if an invalid value is given for
N    *          mode or size, or if the request cannot be honoured.
N    */
N#pragma __printf_args
Nextern _ARMABI int fprintf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int fprintf(FILE * __restrict  ,
N                    const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * writes output to the stream pointed to by stream, under control of the
N    * string pointed to by format that specifies how subsequent arguments are
N    * converted for output. If there are insufficient arguments for the format,
N    * the behaviour is undefined. If the format is exhausted while arguments
N    * remain, the excess arguments are evaluated but otherwise ignored. The
N    * fprintf function returns when the end of the format string is reached.
N    * The format shall be a multibyte character sequence, beginning and ending
N    * in its initial shift state. The format is composed of zero or more
N    * directives: ordinary multibyte characters (not %), which are copied
N    * unchanged to the output stream; and conversion specifiers, each of which
N    * results in fetching zero or more subsequent arguments. Each conversion
N    * specification is introduced by the character %. For a description of the
N    * available conversion specifiers refer to section 4.9.6.1 in the ANSI
N    * draft mentioned at the start of this file or to any modern textbook on C.
N    * The minimum value for the maximum number of characters producable by any
N    * single conversion is at least 509.
N    * Returns: the number of characters transmitted, or a negative value if an
N    *          output error occurred.
N    */
N#pragma __printf_args
Nextern _ARMABI int _fprintf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int _fprintf(FILE * __restrict  ,
N                     const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to fprintf, but does not support floating-point formats.
N    * You can use instead of fprintf to improve code size.
N    * Returns: as fprintf.
N    */
N#pragma __printf_args
Nextern _ARMABI int printf(const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int printf(const char * __restrict  , ...) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to fprintf with the argument stdout interposed before the
N    * arguments to printf.
N    * Returns: the number of characters transmitted, or a negative value if an
N    *          output error occurred.
N    */
N#pragma __printf_args
Nextern _ARMABI int _printf(const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int _printf(const char * __restrict  , ...) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to printf, but does not support floating-point formats.
N    * You can use instead of printf to improve code size.
N    * Returns: as printf.
N    */
N#pragma __printf_args
Nextern _ARMABI int sprintf(char * __restrict /*s*/, const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int sprintf(char * __restrict  , const char * __restrict  , ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to fprintf, except that the argument s specifies an array
N    * into which the generated output is to be written, rather than to a
N    * stream. A null character is written at the end of the characters written;
N    * it is not counted as part of the returned sum.
N    * Returns: the number of characters written to the array, not counting the
N    *          terminating null character.
N    */
N#pragma __printf_args
Nextern _ARMABI int _sprintf(char * __restrict /*s*/, const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int _sprintf(char * __restrict  , const char * __restrict  , ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to sprintf, but does not support floating-point formats.
N    * You can use instead of sprintf to improve code size.
N    * Returns: as sprintf.
N    */
N
N#pragma __printf_args
Nextern _ARMABI int __ARM_snprintf(char * __restrict /*s*/, size_t /*n*/,
Xextern __declspec(__nothrow) int __ARM_snprintf(char * __restrict  , size_t  ,
N                     const char * __restrict /*format*/, ...) __attribute__((__nonnull__(3)));
N
N#if !defined(__STRICT_ANSI__) || (defined(__STDC_VERSION__) && 199901L <= __STDC_VERSION__) || (defined(__cplusplus) && 201103L <= __cplusplus)
X#if !0L || (1L && 199901L <= 199409L) || (0L && 201103L <= __cplusplus)
N#pragma __printf_args
Nextern _ARMABI int snprintf(char * __restrict /*s*/, size_t /*n*/,
Xextern __declspec(__nothrow) int snprintf(char * __restrict  , size_t  ,
N                     const char * __restrict /*format*/, ...) __attribute__((__nonnull__(3)));
N   /*
N    * is equivalent to fprintf, except that the argument s specifies an array
N    * into which the generated output is to be written, rather than to a
N    * stream. The argument n specifies the size of the output array, so as to
N    * avoid overflowing the buffer.
N    * A null character is written at the end of the characters written, even
N    * if the formatting was not completed; it is not counted as part of the
N    * returned sum. At most n characters of the output buffer are used,
N    * _including_ the null character.
N    * Returns: the number of characters that would have been written to the
N    *          array, not counting the terminating null character, if the
N    *          array had been big enough. So if the return is >=0 and <n, then
N    *          the entire string was successfully formatted; if the return is
N    *          >=n, the string was truncated (but there is still a null char
N    *          at the end of what was written); if the return is <0, there was
N    *          an error.
N    */
N#endif
N#pragma __printf_args
Nextern _ARMABI int _snprintf(char * __restrict /*s*/, size_t /*n*/,
Xextern __declspec(__nothrow) int _snprintf(char * __restrict  , size_t  ,
N                      const char * __restrict /*format*/, ...) __attribute__((__nonnull__(3)));
N   /*
N    * is equivalent to snprintf, but does not support floating-point formats.
N    * You can use instead of snprintf to improve code size.
N    * Returns: as snprintf.
N    */
N#pragma __scanf_args
Nextern _ARMABI int fscanf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int fscanf(FILE * __restrict  ,
N                    const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * reads input from the stream pointed to by stream, under control of the
N    * string pointed to by format that specifies the admissible input sequences
N    * and how thay are to be converted for assignment, using subsequent
N    * arguments as pointers to the objects to receive the converted input. If
N    * there are insufficient arguments for the format, the behaviour is
N    * undefined. If the format is exhausted while arguments remain, the excess
N    * arguments are evaluated but otherwise ignored.
N    * The format is composed of zero or more directives: one or more
N    * white-space characters; an ordinary character (not %); or a conversion
N    * specification. Each conversion specification is introduced by the
N    * character %. For a description of the available conversion specifiers
N    * refer to section 4.9.6.2 in the ANSI draft mentioned at the start of this
N    * file, or to any modern textbook on C.
N    * If end-of-file is encountered during input, conversion is terminated. If
N    * end-of-file occurs before any characters matching the current directive
N    * have been read (other than leading white space, where permitted),
N    * execution of the current directive terminates with an input failure;
N    * otherwise, unless execution of the current directive is terminated with a
N    * matching failure, execution of the following directive (if any) is
N    * terminated with an input failure.
N    * If conversions terminates on a conflicting input character, the offending
N    * input character is left unread in the input strem. Trailing white space
N    * (including new-line characters) is left unread unless matched by a
N    * directive. The success of literal matches and suppressed asignments is
N    * not directly determinable other than via the %n directive.
N    * Returns: the value of the macro EOF if an input failure occurs before any
N    *          conversion. Otherwise, the fscanf function returns the number of
N    *          input items assigned, which can be fewer than provided for, or
N    *          even zero, in the event of an early conflict between an input
N    *          character and the format.
N    */
N#pragma __scanf_args
Nextern _ARMABI int _fscanf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int _fscanf(FILE * __restrict  ,
N                     const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to fscanf, but does not support floating-point formats.
N    * You can use instead of fscanf to improve code size.
N    * Returns: as fscanf.
N    */
N#pragma __scanf_args
Nextern _ARMABI int scanf(const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int scanf(const char * __restrict  , ...) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to fscanf with the argument stdin interposed before the
N    * arguments to scanf.
N    * Returns: the value of the macro EOF if an input failure occurs before any
N    *          conversion. Otherwise, the scanf function returns the number of
N    *          input items assigned, which can be fewer than provided for, or
N    *          even zero, in the event of an early matching failure.
N    */
N#pragma __scanf_args
Nextern _ARMABI int _scanf(const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int _scanf(const char * __restrict  , ...) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to scanf, but does not support floating-point formats.
N    * You can use instead of scanf to improve code size.
N    * Returns: as scanf.
N    */
N#pragma __scanf_args
Nextern _ARMABI int sscanf(const char * __restrict /*s*/,
Xextern __declspec(__nothrow) int sscanf(const char * __restrict  ,
N                    const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to fscanf except that the argument s specifies a string
N    * from which the input is to be obtained, rather than from a stream.
N    * Reaching the end of the string is equivalent to encountering end-of-file
N    * for the fscanf function.
N    * Returns: the value of the macro EOF if an input failure occurs before any
N    *          conversion. Otherwise, the scanf function returns the number of
N    *          input items assigned, which can be fewer than provided for, or
N    *          even zero, in the event of an early matching failure.
N    */
N#pragma __scanf_args
Nextern _ARMABI int _sscanf(const char * __restrict /*s*/,
Xextern __declspec(__nothrow) int _sscanf(const char * __restrict  ,
N                     const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to sscanf, but does not support floating-point formats.
N    * You can use instead of sscanf to improve code size.
N    * Returns: as sscanf.
N    */
N#if !defined(__STRICT_ANSI__) || (defined(__STDC_VERSION__) && 199901L <= __STDC_VERSION__) || (defined(__cplusplus) && 201103L <= __cplusplus)
X#if !0L || (1L && 199901L <= 199409L) || (0L && 201103L <= __cplusplus)
N/* C99 additions */
Nextern _ARMABI int vfscanf(FILE * __restrict /*stream*/, const char * __restrict /*format*/, __va_list) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int vfscanf(FILE * __restrict  , const char * __restrict  , __va_list) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI int vscanf(const char * __restrict /*format*/, __va_list) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int vscanf(const char * __restrict  , __va_list) __attribute__((__nonnull__(1)));
Nextern _ARMABI int vsscanf(const char * __restrict /*s*/, const char * __restrict /*format*/, __va_list) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int vsscanf(const char * __restrict  , const char * __restrict  , __va_list) __attribute__((__nonnull__(1,2)));
N#endif
Nextern _ARMABI int _vfscanf(FILE * __restrict /*stream*/, const char * __restrict /*format*/, __va_list) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int _vfscanf(FILE * __restrict  , const char * __restrict  , __va_list) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI int _vscanf(const char * __restrict /*format*/, __va_list) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int _vscanf(const char * __restrict  , __va_list) __attribute__((__nonnull__(1)));
Nextern _ARMABI int _vsscanf(const char * __restrict /*s*/, const char * __restrict /*format*/, __va_list) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int _vsscanf(const char * __restrict  , const char * __restrict  , __va_list) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI int __ARM_vsscanf(const char * __restrict /*s*/, const char * __restrict /*format*/, __va_list) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int __ARM_vsscanf(const char * __restrict  , const char * __restrict  , __va_list) __attribute__((__nonnull__(1,2)));
N
Nextern _ARMABI int vprintf(const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int vprintf(const char * __restrict  , __va_list  ) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to printf, with the variable argument list replaced by arg,
N    * which has been initialised by the va_start macro (and possibly subsequent
N    * va_arg calls). The vprintf function does not invoke the va_end function.
N    * Returns: the number of characters transmitted, or a negative value if an
N    *          output error occurred.
N    */
Nextern _ARMABI int _vprintf(const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int _vprintf(const char * __restrict  , __va_list  ) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to vprintf, but does not support floating-point formats.
N    * You can use instead of vprintf to improve code size.
N    * Returns: as vprintf.
N    */
Nextern _ARMABI int vfprintf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int vfprintf(FILE * __restrict  ,
N                    const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to fprintf, with the variable argument list replaced by
N    * arg, which has been initialised by the va_start macro (and possibly
N    * subsequent va_arg calls). The vfprintf function does not invoke the
N    * va_end function.
N    * Returns: the number of characters transmitted, or a negative value if an
N    *          output error occurred.
N    */
Nextern _ARMABI int vsprintf(char * __restrict /*s*/,
Xextern __declspec(__nothrow) int vsprintf(char * __restrict  ,
N                     const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to sprintf, with the variable argument list replaced by
N    * arg, which has been initialised by the va_start macro (and possibly
N    * subsequent va_arg calls). The vsprintf function does not invoke the
N    * va_end function.
N    * Returns: the number of characters written in the array, not counting the
N    *          terminating null character.
N    */
Nextern _ARMABI int __ARM_vsnprintf(char * __restrict /*s*/, size_t /*n*/,
Xextern __declspec(__nothrow) int __ARM_vsnprintf(char * __restrict  , size_t  ,
N                     const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(3)));
N#if !defined(__STRICT_ANSI__) || (defined(__STDC_VERSION__) && 199901L <= __STDC_VERSION__) || (defined(__cplusplus) && 201103L <= __cplusplus)
X#if !0L || (1L && 199901L <= 199409L) || (0L && 201103L <= __cplusplus)
Nextern _ARMABI int vsnprintf(char * __restrict /*s*/, size_t /*n*/,
Xextern __declspec(__nothrow) int vsnprintf(char * __restrict  , size_t  ,
N                     const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(3)));
N   /*
N    * is equivalent to snprintf, with the variable argument list replaced by
N    * arg, which has been initialised by the va_start macro (and possibly
N    * subsequent va_arg calls). The vsprintf function does not invoke the
N    * va_end function.
N    * Returns: the number of characters that would have been written in the
N    *          array, not counting the terminating null character. As
N    *          snprintf.
N    */
N#endif
Nextern _ARMABI int _vsprintf(char * __restrict /*s*/,
Xextern __declspec(__nothrow) int _vsprintf(char * __restrict  ,
N                      const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to vsprintf, but does not support floating-point formats.
N    * You can use instead of vsprintf to improve code size.
N    * Returns: as vsprintf.
N    */
Nextern _ARMABI int _vfprintf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int _vfprintf(FILE * __restrict  ,
N                     const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to vfprintf, but does not support floating-point formats.
N    * You can use instead of vfprintf to improve code size.
N    * Returns: as vfprintf.
N    */
Nextern _ARMABI int _vsnprintf(char * __restrict /*s*/, size_t /*n*/,
Xextern __declspec(__nothrow) int _vsnprintf(char * __restrict  , size_t  ,
N                      const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(3)));
N   /*
N    * is equivalent to vsnprintf, but does not support floating-point formats.
N    * You can use instead of vsnprintf to improve code size.
N    * Returns: as vsnprintf.
N    */
N#if !defined(__STRICT_ANSI__)
X#if !0L
N#pragma __printf_args
Nextern _ARMABI int asprintf(char ** /*strp*/, const char * __restrict /*format*/, ...) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) int asprintf(char **  , const char * __restrict  , ...) __attribute__((__nonnull__(2)));
Nextern _ARMABI int vasprintf(char ** /*strp*/, const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) int vasprintf(char **  , const char * __restrict  , __va_list  ) __attribute__((__nonnull__(2)));
N#endif
N#pragma __printf_args
Nextern _ARMABI int __ARM_asprintf(char ** /*strp*/, const char * __restrict /*format*/, ...) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) int __ARM_asprintf(char **  , const char * __restrict  , ...) __attribute__((__nonnull__(2)));
Nextern _ARMABI int __ARM_vasprintf(char ** /*strp*/, const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) int __ARM_vasprintf(char **  , const char * __restrict  , __va_list  ) __attribute__((__nonnull__(2)));
N   /*
N    * dynamically allocates a buffer of the right size for the
N    * formatted string, and returns it in (*strp). Formal return value
N    * is the same as any other printf variant, except that it returns
N    * -1 if the buffer could not be allocated.
N    *
N    * (The functions with __ARM_ prefixed names are identical to the
N    * ones without, but are available in all compilation modes without
N    * violating user namespace.)
N    */
N
Nextern _ARMABI int fgetc(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int fgetc(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * obtains the next character (if present) as an unsigned char converted to
N    * an int, from the input stream pointed to by stream, and advances the
N    * associated file position indicator (if defined).
N    * Returns: the next character from the input stream pointed to by stream.
N    *          If the stream is at end-of-file, the end-of-file indicator is
N    *          set and fgetc returns EOF. If a read error occurs, the error
N    *          indicator is set and fgetc returns EOF.
N    */
Nextern _ARMABI char *fgets(char * __restrict /*s*/, int /*n*/,
Xextern __declspec(__nothrow) char *fgets(char * __restrict  , int  ,
N                    FILE * __restrict /*stream*/) __attribute__((__nonnull__(1,3)));
N   /*
N    * reads at most one less than the number of characters specified by n from
N    * the stream pointed to by stream into the array pointed to by s. No
N    * additional characters are read after a new-line character (which is
N    * retained) or after end-of-file. A null character is written immediately
N    * after the last character read into the array.
N    * Returns: s if successful. If end-of-file is encountered and no characters
N    *          have been read into the array, the contents of the array remain
N    *          unchanged and a null pointer is returned. If a read error occurs
N    *          during the operation, the array contents are indeterminate and a
N    *          null pointer is returned.
N    */
Nextern _ARMABI int fputc(int /*c*/, FILE * /*stream*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) int fputc(int  , FILE *  ) __attribute__((__nonnull__(2)));
N   /*
N    * writes the character specified by c (converted to an unsigned char) to
N    * the output stream pointed to by stream, at the position indicated by the
N    * asociated file position indicator (if defined), and advances the
N    * indicator appropriately. If the file position indicator is not defined,
N    * the character is appended to the output stream.
N    * Returns: the character written. If a write error occurs, the error
N    *          indicator is set and fputc returns EOF.
N    */
Nextern _ARMABI int fputs(const char * __restrict /*s*/, FILE * __restrict /*stream*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int fputs(const char * __restrict  , FILE * __restrict  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * writes the string pointed to by s to the stream pointed to by stream.
N    * The terminating null character is not written.
N    * Returns: EOF if a write error occurs; otherwise it returns a nonnegative
N    *          value.
N    */
Nextern _ARMABI int getc(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int getc(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to fgetc except that it may be implemented as an unsafe
N    * macro (stream may be evaluated more than once, so the argument should
N    * never be an expression with side-effects).
N    * Returns: the next character from the input stream pointed to by stream.
N    *          If the stream is at end-of-file, the end-of-file indicator is
N    *          set and getc returns EOF. If a read error occurs, the error
N    *          indicator is set and getc returns EOF.
N    */
N#ifdef __cplusplus
S    inline int getchar() { return getc(stdin); }
N#else
N    #define getchar() getc(stdin)
N    extern _ARMABI int (getchar)(void);
X    extern __declspec(__nothrow) int (getchar)(void);
N#endif
N   /*
N    * is equivalent to getc with the argument stdin.
N    * Returns: the next character from the input stream pointed to by stdin.
N    *          If the stream is at end-of-file, the end-of-file indicator is
N    *          set and getchar returns EOF. If a read error occurs, the error
N    *          indicator is set and getchar returns EOF.
N    */
Nextern _ARMABI char *gets(char * /*s*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) char *gets(char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * reads characters from the input stream pointed to by stdin into the array
N    * pointed to by s, until end-of-file is encountered or a new-line character
N    * is read. Any new-line character is discarded, and a null character is
N    * written immediately after the last character read into the array.
N    * Returns: s if successful. If end-of-file is encountered and no characters
N    *          have been read into the array, the contents of the array remain
N    *          unchanged and a null pointer is returned. If a read error occurs
N    *          during the operation, the array contents are indeterminate and a
N    *          null pointer is returned.
N    */
Nextern _ARMABI int putc(int /*c*/, FILE * /*stream*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) int putc(int  , FILE *  ) __attribute__((__nonnull__(2)));
N   /*
N    * is equivalent to fputc except that it may be implemented as aan unsafe
N    * macro (stream may be evaluated more than once, so the argument should
N    * never be an expression with side-effects).
N    * Returns: the character written. If a write error occurs, the error
N    *          indicator is set and putc returns EOF.
N    */
N#ifdef __cplusplus
S    inline int putchar(int __c) { return putc(__c, stdout); }
N#else
N    #define putchar(c) putc(c, stdout)
N    extern _ARMABI int (putchar)(int /*c*/);
X    extern __declspec(__nothrow) int (putchar)(int  );
N#endif
N   /*
N    * is equivalent to putc with the second argument stdout.
N    * Returns: the character written. If a write error occurs, the error
N    *          indicator is set and putc returns EOF.
N    */
Nextern _ARMABI int puts(const char * /*s*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int puts(const char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * writes the string pointed to by s to the stream pointed to by stdout, and
N    * appends a new-line character to the output. The terminating null
N    * character is not written.
N    * Returns: EOF if a write error occurs; otherwise it returns a nonnegative
N    *          value.
N    */
Nextern _ARMABI int ungetc(int /*c*/, FILE * /*stream*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) int ungetc(int  , FILE *  ) __attribute__((__nonnull__(2)));
N   /*
N    * pushes the character specified by c (converted to an unsigned char) back
N    * onto the input stream pointed to by stream. The character will be
N    * returned by the next read on that stream. An intervening call to the
N    * fflush function or to a file positioning function (fseek, fsetpos,
N    * rewind) discards any pushed-back characters. The extern _ARMABIal storage
N    * corresponding to the stream is unchanged.
N    * One character pushback is guaranteed. If the unget function is called too
N    * many times on the same stream without an intervening read or file
N    * positioning operation on that stream, the operation may fail.
N    * If the value of c equals that of the macro EOF, the operation fails and
N    * the input stream is unchanged.
N    * A successful call to the ungetc function clears the end-of-file
N    * indicator. The value of the file position indicator after reading or
N    * discarding all pushed-back characters shall be the same as it was before
N    * the characters were pushed back. For a text stream, the value of the file
N    * position indicator after a successful call to the ungetc function is
N    * unspecified until all pushed-back characters are read or discarded. For a
N    * binary stream, the file position indicator is decremented by each
N    * successful call to the ungetc function; if its value was zero before a
N    * call, it is indeterminate after the call.
N    * Returns: the character pushed back after conversion, or EOF if the
N    *          operation fails.
N    */
N
Nextern _ARMABI size_t fread(void * __restrict /*ptr*/,
Xextern __declspec(__nothrow) size_t fread(void * __restrict  ,
N                    size_t /*size*/, size_t /*nmemb*/, FILE * __restrict /*stream*/) __attribute__((__nonnull__(1,4)));
N   /*
N    * reads into the array pointed to by ptr, up to nmemb members whose size is
N    * specified by size, from the stream pointed to by stream. The file
N    * position indicator (if defined) is advanced by the number of characters
N    * successfully read. If an error occurs, the resulting value of the file
N    * position indicator is indeterminate. If a partial member is read, its
N    * value is indeterminate. The ferror or feof function shall be used to
N    * distinguish between a read error and end-of-file.
N    * Returns: the number of members successfully read, which may be less than
N    *          nmemb if a read error or end-of-file is encountered. If size or
N    *          nmemb is zero, fread returns zero and the contents of the array
N    *          and the state of the stream remain unchanged.
N    */
N
Nextern _ARMABI size_t __fread_bytes_avail(void * __restrict /*ptr*/,
Xextern __declspec(__nothrow) size_t __fread_bytes_avail(void * __restrict  ,
N                    size_t /*count*/, FILE * __restrict /*stream*/) __attribute__((__nonnull__(1,3)));
N   /*
N    * reads into the array pointed to by ptr, up to count characters from the
N    * stream pointed to by stream. The file position indicator (if defined)
N    * is advanced by the number of characters successfully read. If an error
N    * occurs, the resulting value of the file position indicator is
N    * indeterminate. The ferror or feof function shall be used to
N    * distinguish between a read error and end-of-file.  The call will block
N    * only if no characters are available.
N    * Returns: the number of characters successfully read, which may be less than
N    *          count. If count is zero, __fread_bytes_avail returns zero and
N    *          the contents of the array and the state of the stream remain
N    *          unchanged.
N    */
N
Nextern _ARMABI size_t fwrite(const void * __restrict /*ptr*/,
Xextern __declspec(__nothrow) size_t fwrite(const void * __restrict  ,
N                    size_t /*size*/, size_t /*nmemb*/, FILE * __restrict /*stream*/) __attribute__((__nonnull__(1,4)));
N   /*
N    * writes, from the array pointed to by ptr up to nmemb members whose size
N    * is specified by size, to the stream pointed to by stream. The file
N    * position indicator (if defined) is advanced by the number of characters
N    * successfully written. If an error occurs, the resulting value of the file
N    * position indicator is indeterminate.
N    * Returns: the number of members successfully written, which will be less
N    *          than nmemb only if a write error is encountered.
N    */
N
Nextern _ARMABI int fgetpos(FILE * __restrict /*stream*/, fpos_t * __restrict /*pos*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int fgetpos(FILE * __restrict  , fpos_t * __restrict  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * stores the current value of the file position indicator for the stream
N    * pointed to by stream in the object pointed to by pos. The value stored
N    * contains unspecified information usable by the fsetpos function for
N    * repositioning the stream to its position at the time  of the call to the
N    * fgetpos function.
N    * Returns: zero, if successful. Otherwise nonzero is returned and the
N    *          integer expression errno is set to an implementation-defined
N    *          nonzero value.
N    */
Nextern _ARMABI int fseek(FILE * /*stream*/, long int /*offset*/, int /*whence*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int fseek(FILE *  , long int  , int  ) __attribute__((__nonnull__(1)));
N   /*
N    * sets the file position indicator for the stream pointed to by stream.
N    * For a binary stream, the new position is at the signed number of
N    * characters specified by offset away from the point specified by whence.
N    * The specified point is the beginning of the file for SEEK_SET, the
N    * current position in the file for SEEK_CUR, or end-of-file for SEEK_END.
N    * A binary stream need not meaningfully support fseek calls with a whence
N    * value of SEEK_END.
N    * For a text stream, either offset shall be zero, or offset shall be a
N    * value returned by an earlier call to the ftell function on the same
N    * stream and whence shall be SEEK_SET.
N    * The fseek function clears the end-of-file indicator and undoes any
N    * effects of the ungetc function on the same stream. After an fseek call,
N    * the next operation on an update stream may be either input or output.
N    * Returns: nonzero only for a request that cannot be satisfied.
N    */
Nextern _ARMABI int fsetpos(FILE * __restrict /*stream*/, const fpos_t * __restrict /*pos*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int fsetpos(FILE * __restrict  , const fpos_t * __restrict  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * sets  the file position indicator for the stream pointed to by stream
N    * according to the value of the object pointed to by pos, which shall be a
N    * value returned by an earlier call to the fgetpos function on the same
N    * stream.
N    * The fsetpos function clears the end-of-file indicator and undoes any
N    * effects of the ungetc function on the same stream. After an fsetpos call,
N    * the next operation on an update stream may be either input or output.
N    * Returns: zero, if successful. Otherwise nonzero is returned and the
N    *          integer expression errno is set to an implementation-defined
N    *          nonzero value.
N    */
Nextern _ARMABI long int ftell(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) long int ftell(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * obtains the current value of the file position indicator for the stream
N    * pointed to by stream. For a binary stream, the value is the number of
N    * characters from the beginning of the file. For a text stream, the file
N    * position indicator contains unspecified information, usable by the fseek
N    * function for returning the file position indicator to its position at the
N    * time of the ftell call; the difference between two such return values is
N    * not necessarily a meaningful measure of the number of characters written
N    * or read.
N    * Returns: if successful, the current value of the file position indicator.
N    *          On failure, the ftell function returns -1L and sets the integer
N    *          expression errno to an implementation-defined nonzero value.
N    */
Nextern _ARMABI void rewind(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) void rewind(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * sets the file position indicator for the stream pointed to by stream to
N    * the beginning of the file. It is equivalent to
N    *          (void)fseek(stream, 0L, SEEK_SET)
N    * except that the error indicator for the stream is also cleared.
N    * Returns: no value.
N    */
N
Nextern _ARMABI void clearerr(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) void clearerr(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * clears the end-of-file and error indicators for the stream pointed to by
N    * stream. These indicators are cleared only when the file is opened or by
N    * an explicit call to the clearerr function or to the rewind function.
N    * Returns: no value.
N    */
N
Nextern _ARMABI int feof(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int feof(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * tests the end-of-file indicator for the stream pointed to by stream.
N    * Returns: nonzero iff the end-of-file indicator is set for stream.
N    */
Nextern _ARMABI int ferror(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int ferror(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * tests the error indicator for the stream pointed to by stream.
N    * Returns: nonzero iff the error indicator is set for stream.
N    */
Nextern _ARMABI void perror(const char * /*s*/);
Xextern __declspec(__nothrow) void perror(const char *  );
N   /*
N    * maps the error number  in the integer expression errno to an error
N    * message. It writes a sequence of characters to the standard error stream
N    * thus: first (if s is not a null pointer and the character pointed to by
N    * s is not the null character), the string pointed to by s followed by a
N    * colon and a space; then an appropriate error message string followed by
N    * a new-line character. The contents of the error message strings are the
N    * same as those returned by the strerror function with argument errno,
N    * which are implementation-defined.
N    * Returns: no value.
N    */
N
Nextern _ARMABI int _fisatty(FILE * /*stream*/ ) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int _fisatty(FILE *   ) __attribute__((__nonnull__(1)));
N    /* Returns 1 if the stream is tty (stdin), 0 otherwise. Not ANSI compliant.
N     */
N
Nextern _ARMABI void __use_no_semihosting_swi(void);
Xextern __declspec(__nothrow) void __use_no_semihosting_swi(void);
Nextern _ARMABI void __use_no_semihosting(void);
Xextern __declspec(__nothrow) void __use_no_semihosting(void);
N    /*
N     * Referencing either of these symbols will cause a link-time
N     * error if any library functions that use semihosting SWI
N     * calls are also present in the link, i.e. you define it if
N     * you want to make sure you haven't accidentally used any such
N     * SWIs.
N     */
N
N    #ifdef __cplusplus
S        }  /* extern "C" */
S      }  /* namespace std */
N    #endif
N  #endif /* __STDIO_DECLS */
N
N  #if _AEABI_PORTABILITY_LEVEL != 0 && !defined _AEABI_PORTABLE
X  #if _AEABI_PORTABILITY_LEVEL != 0 && !0L
S    #define _AEABI_PORTABLE
N  #endif
N
N  #if defined(__cplusplus) && !defined(__STDIO_NO_EXPORTS)
X  #if 0L && !0L
S    using ::std::size_t;
S    using ::std::fpos_t;
S    using ::std::FILE;
S    using ::std::remove;
S    using ::std::rename;
S    using ::std::tmpfile;
S    using ::std::tmpnam;
S    using ::std::fclose;
S    using ::std::fflush;
S    using ::std::fopen;
S    using ::std::freopen;
S    using ::std::setbuf;
S    using ::std::setvbuf;
S    using ::std::fprintf;
S    using ::std::_fprintf;
S    using ::std::printf;
S    using ::std::_printf;
S    using ::std::sprintf;
S    using ::std::_sprintf;
S    #if !defined(__STRICT_ANSI__) || (defined(__STDC_VERSION__) && 199901L <= __STDC_VERSION__) || (defined(__cplusplus) && 201103L <= __cplusplus)
S      using ::std::snprintf;
S      using ::std::vsnprintf;
S      using ::std::vfscanf;
S      using ::std::vscanf;
S      using ::std::vsscanf;
S    #endif
S    using ::std::_snprintf;
S    using ::std::_vsnprintf;
S#if !defined(__STRICT_ANSI__)
S    using ::std::asprintf;
S    using ::std::vasprintf;
S#endif
S    using ::std::__ARM_asprintf;
S    using ::std::__ARM_vasprintf;
S    using ::std::__ARM_vsnprintf;
S    using ::std::__ARM_snprintf;
S    using ::std::__ARM_vsscanf;
S    using ::std::fscanf;
S    using ::std::_fscanf;
S    using ::std::scanf;
S    using ::std::_scanf;
S    using ::std::sscanf;
S    using ::std::_sscanf;
S    using ::std::_vfscanf;
S    using ::std::_vscanf;
S    using ::std::_vsscanf;
S    using ::std::vprintf;
S    using ::std::_vprintf;
S    using ::std::vfprintf;
S    using ::std::_vfprintf;
S    using ::std::vsprintf;
S    using ::std::_vsprintf;
S    using ::std::fgetc;
S    using ::std::fgets;
S    using ::std::fputc;
S    using ::std::fputs;
S    using ::std::getc;
S    using ::std::getchar;
S    using ::std::gets;
S    using ::std::putc;
S    using ::std::putchar;
S    using ::std::puts;
S    using ::std::ungetc;
S    using ::std::fread;
S    using ::std::__fread_bytes_avail;
S    using ::std::fwrite;
S    using ::std::fgetpos;
S    using ::std::fseek;
S    using ::std::fsetpos;
S    using ::std::ftell;
S    using ::std::rewind;
S    using ::std::clearerr;
S    using ::std::feof;
S    using ::std::ferror;
S    using ::std::perror;
S    using ::std::_fisatty;
S    using ::std::__use_no_semihosting_swi;
S    using ::std::__use_no_semihosting;
N  #endif
N
N#endif /* ndef __stdio_h */
N
N/* end of stdio.h */
N
L 17 "RTE\Device\BF7006AM64\BF7006AMxx_adc.c" 2
N
Nstatic void adc_reg_config(void);
Nstatic void adc_clk_init(uint8_t adc_clk,uint32_t sys_clk);
N
N
N/*!
N    \brief      adc initialize
N    \param[in]  adc_init: adc initialize parameter
N    \arg        adc_clk: adc clock select:system clock divide(1/2/3/4/6/8/10/12) 
N    \arg        sample_clk_num: adc sample clock number set 
N    \arg        adco_en: adc continuous convert enable
N    \arg        data_width:adc convert data width select:8bits or 12bits
N    \arg        channel_en: adc channel enale 
N    \arg        int_en: adc interrupt enable
N    \arg        trigger: adc trigger config 
N    \arg        trigger_mode: adc trigger mode select:hardware or software
N    \arg        trigger_source: adc trigger source select:PWM or RTC or NMI
N    \param[in]  adc_compare:adc compare struct
N        \arg      compare_en: compare enable or disable
N        \arg      compare_condition: compare condition,ADC_COMP_LESS or ADC_COMP_LARGER or ADC_COMP_BETWEEN
N        \arg      lower_limit_val: lower limit value
N        \arg      higher_limit_val: higher limit value
N    \param[out] none
N    \retval     none
N*/
N/* Note: if compare_condition=ADC_COMP_LESS,then compare value set higher_limit_val 
N         if compare_condition=ADC_COMP_LARGER,then compare value set lower_limit_val 
N         if compare_condition=ADC_COMP_BETWEEN,then lower_limit_val must less than higher_limit_val
N*/
Nvoid adc_init(adc_parameter_struct adc_init_para)
N{
N    /* adc control register config */
N    ADC_SC1 = 0x1fUL;
X    (*((volatile uint32_t *)((uint32_t)((((uint32_t)0x50000000) + (uint32_t)0x90000) + 0x00U)))) = 0x1fUL;
N    if(adc_init_para.adco_en == ENABLE){    //adc continuous convert mode enable
N        ADC_SC1 |= ADC_SC1_ADCO;
X        (*((volatile uint32_t *)((uint32_t)((((uint32_t)0x50000000) + (uint32_t)0x90000) + 0x00U)))) |= ((uint32_t)(0x01UL<<((uint8_t)(5))));
N    }else{                                  //adc continuous convert mode disable
N        ADC_SC1 &= ~ADC_SC1_ADCO;
X        (*((volatile uint32_t *)((uint32_t)((((uint32_t)0x50000000) + (uint32_t)0x90000) + 0x00U)))) &= ~((uint32_t)(0x01UL<<((uint8_t)(5))));
N    }
N
N    ADC_SC2 = 0X00UL;
X    (*((volatile uint32_t *)((uint32_t)((((uint32_t)0x50000000) + (uint32_t)0x90000) + 0x04U)))) = 0X00UL;
N
N    ADC_CFG = 0x00UL;
X    (*((volatile uint32_t *)((uint32_t)((((uint32_t)0x50000000) + (uint32_t)0x90000) + 0x14U)))) = 0x00UL;
N    if(adc_init_para.data_width == ADC_DATA_12BITS){        //adc data width 12bits
X    if(adc_init_para.data_width == 0x01U){        
N        ADC_CFG |= ADC_CFG_MODE;
X        (*((volatile uint32_t *)((uint32_t)((((uint32_t)0x50000000) + (uint32_t)0x90000) + 0x14U)))) |= ((uint32_t)(0x01UL<<((uint8_t)(2))));
N    }else if(adc_init_para.data_width == ADC_DATA_8BITS){   //adc data width 8bits
X    }else if(adc_init_para.data_width == 0x00U){   
N        ADC_CFG &= ~ADC_CFG_MODE;
X        (*((volatile uint32_t *)((uint32_t)((((uint32_t)0x50000000) + (uint32_t)0x90000) + 0x14U)))) &= ~((uint32_t)(0x01UL<<((uint8_t)(2))));
N    }else{
N        ADC_CFG |= ADC_CFG_MODE;
X        (*((volatile uint32_t *)((uint32_t)((((uint32_t)0x50000000) + (uint32_t)0x90000) + 0x14U)))) |= ((uint32_t)(0x01UL<<((uint8_t)(2))));
N    }
N
N    /* adc clock config,adc_clk must less than 16M */
N    adc_clk_init(adc_init_para.adc_clk,SystemCoreClock);
N
N    ADC_SPT = adc_init_para.sample_clk_num;                 //adc sample clock number set
X    (*((volatile uint32_t *)((uint32_t)((((uint32_t)0x50000000) + (uint32_t)0x90000) + 0x1cU)))) = adc_init_para.sample_clk_num;                 
N    
N    /* adc register config,note: do not change */
N    adc_reg_config();
N    
N    /* adc trigger config */
N    adc_trigger_config(adc_init_para.trigger);
N    
N    /* adc compare config */
N    adc_compare_config(adc_init_para.compare);
N
N    /* adc channel enable */
N    adc_channel_enable(adc_init_para.channel_en);
N    
N    /* adc power down disable */
N    adc_powerdown(DISABLE);
N    
N    /* adc interrupt config */
N    adc_interrupt_set(adc_init_para.int_en);
N    
N//    adc_cgroup();
N//    adc_calibrate();
N}
N
N/*!
N    \brief      adc interrupt set
N    \param[in]  en:ENABLE or DISABLE
N    \param[out] none
N    \retval     none
N*/
Nvoid adc_interrupt_set(FunctionalState en)
N{
N    if(en == ENABLE){
N        ADC_SC1 |= ADC_SC1_AIEN;
X        (*((volatile uint32_t *)((uint32_t)((((uint32_t)0x50000000) + (uint32_t)0x90000) + 0x00U)))) |= ((uint32_t)(0x01UL<<((uint8_t)(6))));
N        NVIC_EnableIRQ(ADC_IRQn);
X        __NVIC_EnableIRQ(ADC_IRQn);
N    }else{
N        ADC_SC1 &= ~ADC_SC1_AIEN;
X        (*((volatile uint32_t *)((uint32_t)((((uint32_t)0x50000000) + (uint32_t)0x90000) + 0x00U)))) &= ~((uint32_t)(0x01UL<<((uint8_t)(6))));
N        NVIC_DisableIRQ(ADC_IRQn);
X        __NVIC_DisableIRQ(ADC_IRQn);
N    }
N}
N
N/*!
N    \brief      wait for adc convert 
N    \param[in]  none
N    \param[out] none
N    \retval     ERROR or SUCCESS
N*/
NErrorStatus wait_adc_convert(void)
N{
N    uint32_t timeout = 30000U;
N    while(timeout != 0x00U){
N        timeout --;
N        if((ADC_SC1 & ADC_SC1_COCO) != 0x00U){
X        if(((*((volatile uint32_t *)((uint32_t)((((uint32_t)0x50000000) + (uint32_t)0x90000) + 0x00U)))) & ((uint32_t)(0x01UL<<((uint8_t)(7))))) != 0x00U){
N            return SUCCESS;
N        }
N    }
N    return SUCCESS;
N}
N
N/*!
N    \brief      adc convert data get
N    \param[in]  none
N    \param[out] none
N    \retval     adc convert data
N*/
Nuint16_t adc_data_get(void)
N{
N    return (uint16_t)ADC_DATA;
X    return (uint16_t)(*((volatile uint32_t *)((uint32_t)((((uint32_t)0x50000000) + (uint32_t)0x90000) + 0x08U))));
N}
N
N/*!
N    \brief      adc start convert
N    \param[in]  ch: adc channel to convert
N    \param[out] none
N    \retval     none
N*/
Nvoid adc_start_convert(uint8_t ch)
N{
N    ch |= 0xe0U;
N    ADC_SC1 |= 0x1fU;
X    (*((volatile uint32_t *)((uint32_t)((((uint32_t)0x50000000) + (uint32_t)0x90000) + 0x00U)))) |= 0x1fU;
N    ADC_SC1 &= ch;
X    (*((volatile uint32_t *)((uint32_t)((((uint32_t)0x50000000) + (uint32_t)0x90000) + 0x00U)))) &= ch;
N}
N
N/*!
N    \brief      adc clock init
N    \param[in]  adc_clk: adc sample clock divide
N    \param[in]  sys_clk: sysytem clock
N    \param[out] none
N    \retval     none
N*/
Nstatic void adc_clk_init(uint8_t adc_clk,uint32_t sys_clk)
N{    
N    #define    ADC_CKC_CKV_1            ((uint8_t)0x00)
N    #define    ADC_CKC_CKV_2            ((uint8_t)0x01)
N    #define    ADC_CKC_CKV_4            ((uint8_t)0x02)
N    #define    ADC_CKC_CKV_8            ((uint8_t)0x03)
N
N    #define    ADC_CKC_WNUM_3            ((uint8_t)0x00 << 2)
N    #define    ADC_CKC_WNUM_4            ((uint8_t)0x01 << 2)
N    #define    ADC_CKC_WNUM_5            ((uint8_t)0x02 << 2)
N    #define    ADC_CKC_WNUM_6            ((uint8_t)0x03 << 2)
N
N    #define    ADC_CKC_SAMDEL_0        ((uint8_t)0x00 << 4)
N    #define    ADC_CKC_SAMDEL_2        ((uint8_t)0x01 << 4)
N    #define    ADC_CKC_SAMDEL_4        ((uint8_t)0x02 << 4)
N    #define    ADC_CKC_SAMDEL_8        ((uint8_t)0x03 << 4)
N    #define    ADC_CKC_SAMDEL_10        ((uint8_t)0x04 << 4)
N    #define    ADC_CKC_SAMDEL_12        ((uint8_t)0x05 << 4)
N    #define    ADC_CKC_SAMDEL_14        ((uint8_t)0x06 << 4)
N    #define    ADC_CKC_SAMDEL_16        ((uint8_t)0x07 << 4)
N
N    uint8_t adc_ckc_ckv;
N    uint8_t adc_ckc_wnum;
N    uint8_t adc_ckc_sambg = 0x80U;
N    uint8_t adc_ckc_samdel;
N    if(sys_clk == 32000000UL){
N        if(adc_clk == ADC_CLK_DIV_1){        //adc_clk must less than 16M
X        if(adc_clk == 0x00U){        
N            adc_clk = ADC_CLK_DIV_2;
X            adc_clk = 0x10U;
N        }
N        switch(adc_clk){
N            case ADC_CLK_DIV_2:
X            case 0x10U:
N                adc_ckc_ckv = ADC_CKC_CKV_2;
X                adc_ckc_ckv = ((uint8_t)0x01);
N                adc_ckc_wnum = ADC_CKC_WNUM_6;
X                adc_ckc_wnum = ((uint8_t)0x03 << 2);
N                adc_ckc_samdel = ADC_CKC_SAMDEL_8;
X                adc_ckc_samdel = ((uint8_t)0x03 << 4);
N                break;
N            case ADC_CLK_DIV_3:
X            case 0x70U:
N                adc_ckc_ckv = ADC_CKC_CKV_2;
X                adc_ckc_ckv = ((uint8_t)0x01);
N                adc_ckc_wnum = ADC_CKC_WNUM_4;
X                adc_ckc_wnum = ((uint8_t)0x01 << 2);
N                adc_ckc_samdel = ADC_CKC_SAMDEL_8;
X                adc_ckc_samdel = ((uint8_t)0x03 << 4);
N                break;
N            case ADC_CLK_DIV_4:
X            case 0x20U:
N                adc_ckc_ckv = ADC_CKC_CKV_4;
X                adc_ckc_ckv = ((uint8_t)0x02);
N                adc_ckc_wnum = ADC_CKC_WNUM_6;
X                adc_ckc_wnum = ((uint8_t)0x03 << 2);
N                adc_ckc_samdel = ADC_CKC_SAMDEL_4;
X                adc_ckc_samdel = ((uint8_t)0x02 << 4);
N                break;
N            case ADC_CLK_DIV_6:
X            case 0x30U:
N            case ADC_CLK_DIV_8:    
X            case 0x40U:    
N            case ADC_CLK_DIV_10:
X            case 0x50U:
N            case ADC_CLK_DIV_12:
X            case 0x60U:
N                adc_ckc_ckv = ADC_CKC_CKV_4;
X                adc_ckc_ckv = ((uint8_t)0x02);
N                adc_ckc_wnum = ADC_CKC_WNUM_3;
X                adc_ckc_wnum = ((uint8_t)0x00 << 2);
N                adc_ckc_samdel = ADC_CKC_SAMDEL_2;
X                adc_ckc_samdel = ((uint8_t)0x01 << 4);
N                break;
N            default:
N                adc_ckc_ckv = 0x00U;
N                adc_ckc_wnum = 0x00U;
N                adc_ckc_samdel = 0x00U;
N                break;
N        }
N    }else if(sys_clk == 16000000UL){
N        switch(adc_clk){
N            case ADC_CLK_DIV_1:
X            case 0x00U:
N                adc_ckc_ckv = ADC_CKC_CKV_1;
X                adc_ckc_ckv = ((uint8_t)0x00);
N                adc_ckc_wnum = ADC_CKC_WNUM_6;
X                adc_ckc_wnum = ((uint8_t)0x03 << 2);
N                adc_ckc_samdel = ADC_CKC_SAMDEL_8;
X                adc_ckc_samdel = ((uint8_t)0x03 << 4);
N                break;
N            case ADC_CLK_DIV_2:
X            case 0x10U:
N                adc_ckc_ckv = ADC_CKC_CKV_2;
X                adc_ckc_ckv = ((uint8_t)0x01);
N                adc_ckc_wnum = ADC_CKC_WNUM_6;
X                adc_ckc_wnum = ((uint8_t)0x03 << 2);
N                adc_ckc_samdel = ADC_CKC_SAMDEL_4;
X                adc_ckc_samdel = ((uint8_t)0x02 << 4);
N                break;
N            case ADC_CLK_DIV_3:
X            case 0x70U:
N                adc_ckc_ckv = ADC_CKC_CKV_2;
X                adc_ckc_ckv = ((uint8_t)0x01);
N                adc_ckc_wnum = ADC_CKC_WNUM_4;
X                adc_ckc_wnum = ((uint8_t)0x01 << 2);
N                adc_ckc_samdel = ADC_CKC_SAMDEL_4;
X                adc_ckc_samdel = ((uint8_t)0x02 << 4);
N                break;
N            case ADC_CLK_DIV_4:
X            case 0x20U:
N            case ADC_CLK_DIV_6:
X            case 0x30U:
N            case ADC_CLK_DIV_8:    
X            case 0x40U:    
N            case ADC_CLK_DIV_10:
X            case 0x50U:
N            case ADC_CLK_DIV_12:
X            case 0x60U:
N                adc_ckc_ckv = ADC_CKC_CKV_2;
X                adc_ckc_ckv = ((uint8_t)0x01);
N                adc_ckc_wnum = ADC_CKC_WNUM_3;
X                adc_ckc_wnum = ((uint8_t)0x00 << 2);
N                adc_ckc_samdel = ADC_CKC_SAMDEL_2;
X                adc_ckc_samdel = ((uint8_t)0x01 << 4);
N                break;
N            default:
N                adc_ckc_ckv = 0x00U;
N                adc_ckc_wnum = 0x00U;
N                adc_ckc_samdel = 0x00U;
N                break;
N        }
N    }else{
N        if(adc_clk == ADC_CLK_DIV_1){
X        if(adc_clk == 0x00U){
N            adc_ckc_ckv = ADC_CKC_CKV_1;
X            adc_ckc_ckv = ((uint8_t)0x00);
N            adc_ckc_wnum = ADC_CKC_WNUM_6;
X            adc_ckc_wnum = ((uint8_t)0x03 << 2);
N            adc_ckc_samdel = ADC_CKC_SAMDEL_4;
X            adc_ckc_samdel = ((uint8_t)0x02 << 4);
N        }else{
N            adc_ckc_ckv = ADC_CKC_CKV_1;
X            adc_ckc_ckv = ((uint8_t)0x00);
N            adc_ckc_wnum = ADC_CKC_WNUM_3;
X            adc_ckc_wnum = ((uint8_t)0x00 << 2);
N            adc_ckc_samdel = ADC_CKC_SAMDEL_2;
X            adc_ckc_samdel = ((uint8_t)0x01 << 4);
N        }
N    }
N    ADC_CFG &= ~ADC_CFG_ADIV;
X    (*((volatile uint32_t *)((uint32_t)((((uint32_t)0x50000000) + (uint32_t)0x90000) + 0x14U)))) &= ~((uint32_t)((0xFFFFFFFFUL << ((uint8_t)(4))) & (0xFFFFFFFFUL >> (31U - ((uint8_t)(6))))));
N    ADC_CFG |= adc_clk;
X    (*((volatile uint32_t *)((uint32_t)((((uint32_t)0x50000000) + (uint32_t)0x90000) + 0x14U)))) |= adc_clk;
N    ADC_CKC = (adc_ckc_sambg | adc_ckc_samdel | adc_ckc_wnum | adc_ckc_ckv);
X    (*((volatile uint32_t *)((uint32_t)((((uint32_t)0x50000000) + (uint32_t)0x90000) + 0x78U)))) = (adc_ckc_sambg | adc_ckc_samdel | adc_ckc_wnum | adc_ckc_ckv);
N}
N/*!
N    \brief      adc register config
N    \param[in]  none
N    \param[out] none
N    \retval     none
N*/
Nstatic void adc_reg_config(void)
N{
N    ADC_ISEL = 0X19U;
X    (*((volatile uint32_t *)((uint32_t)((((uint32_t)0x50000000) + (uint32_t)0x90000) + 0x7cU)))) = 0X19U;
N    ADC_FRSEL = 0X00U;
X    (*((volatile uint32_t *)((uint32_t)((((uint32_t)0x50000000) + (uint32_t)0x90000) + 0x90U)))) = 0X00U;
N    ADC_CTRLSEL = 0x00U;
X    (*((volatile uint32_t *)((uint32_t)((((uint32_t)0x50000000) + (uint32_t)0x90000) + 0x94U)))) = 0x00U;
N//    ADC_CTRLSEL = 0x02U;
N}
N
N/*!
N    \brief      adc power down enable
N    \param[in]  en:ENABLE or DISABLE
N    \param[out] none
N    \retval     none
N*/
Nvoid adc_powerdown(FunctionalState en)
N{
N    if(en == ENABLE){
N        ADC_PD = 0x01U;
X        (*((volatile uint32_t *)((uint32_t)((((uint32_t)0x50000000) + (uint32_t)0x90000) + 0x80U)))) = 0x01U;
N    }else{
N        ADC_PD = 0x00U;
X        (*((volatile uint32_t *)((uint32_t)((((uint32_t)0x50000000) + (uint32_t)0x90000) + 0x80U)))) = 0x00U;
N    }
N}
N
N/*!
N    \brief      adc channel enable
N    \param[in]  ch:adc channel enable
N    \param[out] none
N    \retval     none
N*/
Nvoid adc_channel_enable(uint32_t ch)
N{
N    ADC_APCTL = 0x00U;
X    (*((volatile uint32_t *)((uint32_t)((((uint32_t)0x50000000) + (uint32_t)0x90000) + 0x18U)))) = 0x00U;
N    ADC_APCTL |= ch;
X    (*((volatile uint32_t *)((uint32_t)((((uint32_t)0x50000000) + (uint32_t)0x90000) + 0x18U)))) |= ch;
N}
N
N/*!
N    \brief      adc channel disable
N    \param[in]  adc_ch:adc channel disable
N    \param[out] none
N    \retval     none
N*/
Nvoid adc_channel_disable(uint32_t ch)
N{
N    ADC_APCTL &= ~ch;
X    (*((volatile uint32_t *)((uint32_t)((((uint32_t)0x50000000) + (uint32_t)0x90000) + 0x18U)))) &= ~ch;
N}
N
N
N/*!
N    \brief      adc compare config
N    \param[in]  adc_compare:adc compare struct
N      \arg        compare_en: compare enable or disable
N      \arg        compare_condition: compare condition,ADC_COMP_LESS or ADC_COMP_LARGER or ADC_COMP_BETWEEN
N      \arg        lower_limit_val: lower limit value
N      \arg        higher_limit_val: higher limit value
N    \param[out] none
N    \retval     none
N*/
Nvoid adc_compare_config(adc_compare_struct adc_compare)
N{
N    if(adc_compare.compare_en == ENABLE){
N        if(adc_compare.compare_condition == ADC_COMP_LESS){
X        if(adc_compare.compare_condition == 0x00U){
N            ADC_SC2 |= ADC_SC2_ACFE0;
X            (*((volatile uint32_t *)((uint32_t)((((uint32_t)0x50000000) + (uint32_t)0x90000) + 0x04U)))) |= ((uint32_t)(0x01UL<<((uint8_t)(5))));
N            ADC_SC2 &= ~ADC_SC2_ACFE1;
X            (*((volatile uint32_t *)((uint32_t)((((uint32_t)0x50000000) + (uint32_t)0x90000) + 0x04U)))) &= ~((uint32_t)(0x01UL<<((uint8_t)(3))));
N            ADC_SC2 &= ~ADC_SC2_ACFGT0;
X            (*((volatile uint32_t *)((uint32_t)((((uint32_t)0x50000000) + (uint32_t)0x90000) + 0x04U)))) &= ~((uint32_t)(0x01UL<<((uint8_t)(4))));
N            ADC_CV0 = adc_compare.higher_limit_val;
X            (*((volatile uint32_t *)((uint32_t)((((uint32_t)0x50000000) + (uint32_t)0x90000) + 0x0cU)))) = adc_compare.higher_limit_val;
N        }else if(adc_compare.compare_condition == ADC_COMP_LARGER){
X        }else if(adc_compare.compare_condition == 0x01U){
N            ADC_SC2 |= ADC_SC2_ACFE0;
X            (*((volatile uint32_t *)((uint32_t)((((uint32_t)0x50000000) + (uint32_t)0x90000) + 0x04U)))) |= ((uint32_t)(0x01UL<<((uint8_t)(5))));
N            ADC_SC2 &= ~ADC_SC2_ACFE1;
X            (*((volatile uint32_t *)((uint32_t)((((uint32_t)0x50000000) + (uint32_t)0x90000) + 0x04U)))) &= ~((uint32_t)(0x01UL<<((uint8_t)(3))));
N            ADC_SC2 |= ADC_SC2_ACFGT0;
X            (*((volatile uint32_t *)((uint32_t)((((uint32_t)0x50000000) + (uint32_t)0x90000) + 0x04U)))) |= ((uint32_t)(0x01UL<<((uint8_t)(4))));
N            ADC_CV0 = adc_compare.lower_limit_val;
X            (*((volatile uint32_t *)((uint32_t)((((uint32_t)0x50000000) + (uint32_t)0x90000) + 0x0cU)))) = adc_compare.lower_limit_val;
N        }else if(adc_compare.compare_condition == ADC_COMP_BETWEEN){
X        }else if(adc_compare.compare_condition == 0x02U){
N            ADC_SC2 |= ADC_SC2_ACFE0;
X            (*((volatile uint32_t *)((uint32_t)((((uint32_t)0x50000000) + (uint32_t)0x90000) + 0x04U)))) |= ((uint32_t)(0x01UL<<((uint8_t)(5))));
N            ADC_SC2 |= ADC_SC2_ACFE1;
X            (*((volatile uint32_t *)((uint32_t)((((uint32_t)0x50000000) + (uint32_t)0x90000) + 0x04U)))) |= ((uint32_t)(0x01UL<<((uint8_t)(3))));
N            ADC_SC2 |= ADC_SC2_ACFGT0;
X            (*((volatile uint32_t *)((uint32_t)((((uint32_t)0x50000000) + (uint32_t)0x90000) + 0x04U)))) |= ((uint32_t)(0x01UL<<((uint8_t)(4))));
N            ADC_SC2 &= ~ADC_SC2_ACFGT1;
X            (*((volatile uint32_t *)((uint32_t)((((uint32_t)0x50000000) + (uint32_t)0x90000) + 0x04U)))) &= ~((uint32_t)(0x01UL<<((uint8_t)(2))));
N            ADC_CV0 = adc_compare.lower_limit_val;
X            (*((volatile uint32_t *)((uint32_t)((((uint32_t)0x50000000) + (uint32_t)0x90000) + 0x0cU)))) = adc_compare.lower_limit_val;
N            ADC_CV1 = adc_compare.higher_limit_val;
X            (*((volatile uint32_t *)((uint32_t)((((uint32_t)0x50000000) + (uint32_t)0x90000) + 0x10U)))) = adc_compare.higher_limit_val;
N        }else{
N            ADC_SC2 &= ~ADC_SC2_ACFE0;
X            (*((volatile uint32_t *)((uint32_t)((((uint32_t)0x50000000) + (uint32_t)0x90000) + 0x04U)))) &= ~((uint32_t)(0x01UL<<((uint8_t)(5))));
N            ADC_SC2 &= ~ADC_SC2_ACFE1;
X            (*((volatile uint32_t *)((uint32_t)((((uint32_t)0x50000000) + (uint32_t)0x90000) + 0x04U)))) &= ~((uint32_t)(0x01UL<<((uint8_t)(3))));
N        }
N    }
N}
N
N/*!
N    \brief      adc trigger config
N    \param[in]  adc_trigger:adc trigger struct
N      \arg        trigger_mode: trigger mode(ADC_TRIGG_SOFT,ADC_TRIGG_HARD)
N      \arg        trigger_source: trigger source(ADC_TRIGG_HARD_NMI,ADC_TRIGG_HARD_PWM,ADC_TRIGG_HARD_RTC)
N    \param[out] none
N    \retval     none
N*/
Nvoid adc_trigger_config(adc_trigger_struct adc_trigger)
N{
N    /* trigger mode select */
N    if(adc_trigger.trigger_mode == ADC_TRIGG_SOFT){             //select software trigger adc scan
X    if(adc_trigger.trigger_mode == 0x00U){             
N        ADC_SC2 &= ~ADC_SC2_ADTRG;
X        (*((volatile uint32_t *)((uint32_t)((((uint32_t)0x50000000) + (uint32_t)0x90000) + 0x04U)))) &= ~((uint32_t)(0x01UL<<((uint8_t)(6))));
N    }else if(adc_trigger.trigger_mode == ADC_TRIGG_HARD){       //select hardware trigger adc scan
X    }else if(adc_trigger.trigger_mode == 0x01U){       
N        ADC_SC2 |= ADC_SC2_ADTRG;
X        (*((volatile uint32_t *)((uint32_t)((((uint32_t)0x50000000) + (uint32_t)0x90000) + 0x04U)))) |= ((uint32_t)(0x01UL<<((uint8_t)(6))));
N    }else{
N        ADC_SC2 &= ~ADC_SC2_ADTRG;
X        (*((volatile uint32_t *)((uint32_t)((((uint32_t)0x50000000) + (uint32_t)0x90000) + 0x04U)))) &= ~((uint32_t)(0x01UL<<((uint8_t)(6))));
N    }
N    
N    /* hardware trigger source select */
N    if(adc_trigger.trigger_source == ADC_TRIGG_HARD_NMI){       //hardware source select NMI
X    if(adc_trigger.trigger_source == 0x01U){       
N        ADC_SC2 |= ADC_SC2_ADHTS;
X        (*((volatile uint32_t *)((uint32_t)((((uint32_t)0x50000000) + (uint32_t)0x90000) + 0x04U)))) |= ((uint32_t)(0x01UL<<((uint8_t)(1))));
N        ADC_IKW = 0x00U;
X        (*((volatile uint32_t *)((uint32_t)((((uint32_t)0x50000000) + (uint32_t)0x90000) + 0x8cU)))) = 0x00U;
N    }else if(adc_trigger.trigger_source == ADC_TRIGG_HARD_PWM){ //hardware source select PWM
X    }else if(adc_trigger.trigger_source == 0x02U){ 
N        ADC_SC2 &= ~ADC_SC2_ADHTS;
X        (*((volatile uint32_t *)((uint32_t)((((uint32_t)0x50000000) + (uint32_t)0x90000) + 0x04U)))) &= ~((uint32_t)(0x01UL<<((uint8_t)(1))));
N        ADC_IKW = 0x01U;
X        (*((volatile uint32_t *)((uint32_t)((((uint32_t)0x50000000) + (uint32_t)0x90000) + 0x8cU)))) = 0x01U;
N        PWM_ADC_CV = adc_trigger.pwm_trigger_delay;
X        ((*((volatile uint32_t *)((uint32_t)((((uint32_t)0x50000000) + (uint32_t)0x60000) + 0x3CU))))) = adc_trigger.pwm_trigger_delay;
N    }else if(adc_trigger.trigger_source == ADC_TRIGG_HARD_RTC){ //hardware source select RTC
X    }else if(adc_trigger.trigger_source == 0x03U){ 
N        ADC_SC2 &= ~ADC_SC2_ADHTS;
X        (*((volatile uint32_t *)((uint32_t)((((uint32_t)0x50000000) + (uint32_t)0x90000) + 0x04U)))) &= ~((uint32_t)(0x01UL<<((uint8_t)(1))));
N        ADC_IKW = 0x00U;
X        (*((volatile uint32_t *)((uint32_t)((((uint32_t)0x50000000) + (uint32_t)0x90000) + 0x8cU)))) = 0x00U;
N    }else{
N        ADC_SC2 &= ~ADC_SC2_ADTRG;
X        (*((volatile uint32_t *)((uint32_t)((((uint32_t)0x50000000) + (uint32_t)0x90000) + 0x04U)))) &= ~((uint32_t)(0x01UL<<((uint8_t)(6))));
N    }
N}

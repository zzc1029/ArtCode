<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\obj\b40.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\obj\b40.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Mon Dec 12 08:54:26 2022
<BR><P>
<H3>Maximum Stack Usage =        160 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
CAN_ERR_IRQHandler &rArr; can_config &rArr; can_init &rArr; can_filter_init
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[b8]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[7]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">HardFault_Handler</a><BR>
 <LI><a href="#[14]">SCI0_ERR_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[14]">SCI0_ERR_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1b]">ADC_IRQHandler</a> from bf7006amxx_it.o(.text) referenced from startup_bf7006amxx.o(RESET)
 <LI><a href="#[1e]">CAN_ERR_IRQHandler</a> from bf7006amxx_it.o(.text) referenced from startup_bf7006amxx.o(RESET)
 <LI><a href="#[1f]">CAN_RX_IRQHandler</a> from bf7006amxx_it.o(.text) referenced from startup_bf7006amxx.o(RESET)
 <LI><a href="#[20]">CAN_TX_IRQHandler</a> from bf7006amxx_it.o(.text) referenced from startup_bf7006amxx.o(RESET)
 <LI><a href="#[1d]">CAN_WAKE_IRQHandler</a> from bf7006amxx_it.o(.text) referenced from startup_bf7006amxx.o(RESET)
 <LI><a href="#[1a]">GPIO_IRQHandler</a> from bf7006amxx_it.o(.text) referenced from startup_bf7006amxx.o(RESET)
 <LI><a href="#[7]">HardFault_Handler</a> from bf7006amxx_it.o(.text) referenced from startup_bf7006amxx.o(RESET)
 <LI><a href="#[31]">InitSoftVer</a> from can_protol.o(.text) referenced from can_protol.o(.init_fn.6)
 <LI><a href="#[c]">LVDT_IRQHandler</a> from bf7006amxx_it.o(.text) referenced from startup_bf7006amxx.o(RESET)
 <LI><a href="#[6]">NMI_Handler</a> from bf7006amxx_it.o(.text) referenced from startup_bf7006amxx.o(RESET)
 <LI><a href="#[d]">PWM_CH0_IRQHandler</a> from bf7006amxx_it.o(.text) referenced from startup_bf7006amxx.o(RESET)
 <LI><a href="#[e]">PWM_CH1_IRQHandler</a> from bf7006amxx_it.o(.text) referenced from startup_bf7006amxx.o(RESET)
 <LI><a href="#[f]">PWM_CH2_IRQHandler</a> from bf7006amxx_it.o(.text) referenced from startup_bf7006amxx.o(RESET)
 <LI><a href="#[10]">PWM_CH3_IRQHandler</a> from bf7006amxx_it.o(.text) referenced from startup_bf7006amxx.o(RESET)
 <LI><a href="#[11]">PWM_CH4_IRQHandler</a> from bf7006amxx_it.o(.text) referenced from startup_bf7006amxx.o(RESET)
 <LI><a href="#[12]">PWM_CH5_IRQHandler</a> from bf7006amxx_it.o(.text) referenced from startup_bf7006amxx.o(RESET)
 <LI><a href="#[13]">PWM_TOF_IRQHandler</a> from bf7006amxx_it.o(.text) referenced from startup_bf7006amxx.o(RESET)
 <LI><a href="#[9]">PendSV_Handler</a> from bf7006amxx_it.o(.text) referenced from startup_bf7006amxx.o(RESET)
 <LI><a href="#[1c]">RTC_IRQHandler</a> from bf7006amxx_it.o(.text) referenced from startup_bf7006amxx.o(RESET)
 <LI><a href="#[5]">Reset_Handler</a> from startup_bf7006amxx.o(.text) referenced from startup_bf7006amxx.o(RESET)
 <LI><a href="#[5]">Reset_Handler</a> from startup_bf7006amxx.o(.text) referenced from startup_bf7006amxx.o(RESETORGIN)
 <LI><a href="#[14]">SCI0_ERR_IRQHandler</a> from startup_bf7006amxx.o(.text) referenced from startup_bf7006amxx.o(RESET)
 <LI><a href="#[15]">SCI0_RX_IRQHandler</a> from startup_bf7006amxx.o(.text) referenced from startup_bf7006amxx.o(RESET)
 <LI><a href="#[16]">SCI0_TX_IRQHandler</a> from startup_bf7006amxx.o(.text) referenced from startup_bf7006amxx.o(RESET)
 <LI><a href="#[17]">SCI1_ERR_IRQHandler</a> from startup_bf7006amxx.o(.text) referenced from startup_bf7006amxx.o(RESET)
 <LI><a href="#[18]">SCI1_RX_IRQHandler</a> from startup_bf7006amxx.o(.text) referenced from startup_bf7006amxx.o(RESET)
 <LI><a href="#[19]">SCI1_TX_IRQHandler</a> from startup_bf7006amxx.o(.text) referenced from startup_bf7006amxx.o(RESET)
 <LI><a href="#[8]">SVC_Handler</a> from bf7006amxx_it.o(.text) referenced from startup_bf7006amxx.o(RESET)
 <LI><a href="#[b]">SYS_IRQHandler</a> from bf7006amxx_it.o(.text) referenced from startup_bf7006amxx.o(RESET)
 <LI><a href="#[a]">SysTick_Handler</a> from bf7006amxx_it.o(.text) referenced from startup_bf7006amxx.o(RESET)
 <LI><a href="#[23]">SystemInit</a> from system_bf7006amxx.o(.text) referenced from startup_bf7006amxx.o(.text)
 <LI><a href="#[21]">TIMER0_IRQHandler</a> from bf7006amxx_it.o(.text) referenced from startup_bf7006amxx.o(RESET)
 <LI><a href="#[22]">TIMER1_IRQHandler</a> from bf7006amxx_it.o(.text) referenced from startup_bf7006amxx.o(RESET)
 <LI><a href="#[36]">__main</a> from __main.o(!!!main) referenced from startup_bf7006amxx.o(.text)
 <LI><a href="#[2c]">ain_init</a> from adc.o(.text) referenced from adc.o(.init_fn.4)
 <LI><a href="#[35]">app_end</a> from init_section.o(.text) referenced from init_section.o(.init_fn.7.end)
 <LI><a href="#[2d]">can_app_init</a> from can_protol.o(.text) referenced from can_protol.o(.init_fn.4)
 <LI><a href="#[2f]">din_init</a> from switch.o(.text) referenced from switch.o(.init_fn.4)
 <LI><a href="#[34]">init_app_end</a> from init_section.o(.text) referenced from init_section.o(.init_fn.6.end)
 <LI><a href="#[2b]">init_board_end</a> from init_section.o(.text) referenced from init_section.o(.init_fn.3.end)
 <LI><a href="#[26]">init_board_start</a> from init_section.o(.text) referenced from init_section.o(.init_fn.0.end)
 <LI><a href="#[29]">init_odo</a> from tsi.o(.text) referenced from tsi.o(.init_fn.3)
 <LI><a href="#[2a]">init_param</a> from param.o(.text) referenced from param.o(.init_fn.3)
 <LI><a href="#[25]">init_start</a> from init_section.o(.text) referenced from init_section.o(.init_fn.0)
 <LI><a href="#[30]">mod_addr_init</a> from switch.o(.text) referenced from switch.o(.init_fn.5)
 <LI><a href="#[2e]">pluse_init</a> from pluse.o(.text) referenced from pluse.o(.init_fn.4)
 <LI><a href="#[27]">power_init</a> from power.o(.text) referenced from power.o(.init_fn.1)
 <LI><a href="#[33]">power_out_init</a> from power_out.o(.text) referenced from power_out.o(.init_fn.6)
 <LI><a href="#[28]">rain_init</a> from rain.o(.text) referenced from rain.o(.init_fn.2)
 <LI><a href="#[32]">testmod_can_app</a> from can_protol.o(.text) referenced from can_protol.o(.init_fn.6)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[36]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[37]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[39]"></a>__scatterload_rt2</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[bb]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[bc]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[bd]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[3d]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[be]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[bf]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[c0]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[c1]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[c2]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[c3]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[c4]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[c5]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[c6]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[c7]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[c8]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[c9]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[ca]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[cb]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[cc]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[cd]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[ce]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[cf]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[d0]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[d1]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[d2]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[42]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[d3]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[d4]"></a>__rt_lib_shutdown_fini_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[d5]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[d6]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000011))

<P><STRONG><a name="[d7]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000012))

<P><STRONG><a name="[d8]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[d9]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[da]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[38]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[db]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[3a]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[3c]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[dc]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[3e]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; canhl_loop &rArr; can_config &rArr; can_init &rArr; can_filter_init
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[dd]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[ba]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[41]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[de]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[43]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[88]"></a>__aeabi_memcpy4</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protothread_add_smooth
</UL>

<P><STRONG><a name="[df]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text), UNUSED)

<P><STRONG><a name="[45]"></a>avargeF</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[47]"></a>avargeG</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[48]"></a>protothread_adc</STRONG> (Thumb, 382 bytes, Stack size 24 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = protothread_adc &rArr; GetCurAndErr
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_start_convert
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_data_get
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurAndErr
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ain_app
</UL>

<P><STRONG><a name="[4d]"></a>ain_app</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ain_app &rArr; protothread_adc &rArr; GetCurAndErr
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protothread_adc
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6]"></a>NMI_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bf7006amxx_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NMI_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clr_nmi_interrupt_flag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bf7006amxx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bf7006amxx_it.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bf7006amxx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bf7006amxx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_bf7006amxx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bf7006amxx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_bf7006amxx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bf7006amxx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_bf7006amxx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>SYS_IRQHandler</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, bf7006amxx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_bf7006amxx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>LVDT_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bf7006amxx_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LVDT_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lvdt_int_flag_get
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lvdt_int_flag_clr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bf7006amxx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, bf7006amxx_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIMER0_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_intflag_clr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bf7006amxx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, bf7006amxx_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIMER1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_intflag_clr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bf7006amxx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>PWM_TOF_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bf7006amxx_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PWM_TOF_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_tof_clr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bf7006amxx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>PWM_CH0_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bf7006amxx_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PWM_CH0_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_ch0_if_clr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bf7006amxx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>PWM_CH1_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bf7006amxx_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PWM_CH1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_ch1_if_clr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bf7006amxx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>PWM_CH2_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bf7006amxx_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PWM_CH2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_ch2_if_clr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bf7006amxx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>PWM_CH3_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bf7006amxx_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PWM_CH3_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_ch3_if_clr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bf7006amxx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>PWM_CH4_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bf7006amxx_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PWM_CH4_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_ch4_if_clr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bf7006amxx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>PWM_CH5_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bf7006amxx_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PWM_CH5_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_ch5_if_clr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bf7006amxx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>RTC_IRQHandler</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, bf7006amxx_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTC_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_int_flag_clr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bf7006amxx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>CAN_WAKE_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, bf7006amxx_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_WAKE_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_interrupt_flag_get
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_int_flag_clr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bf7006amxx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>Can_ReInit</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bf7006amxx_it.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_config
</UL>

<P><STRONG><a name="[1e]"></a>CAN_ERR_IRQHandler</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, bf7006amxx_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = CAN_ERR_IRQHandler &rArr; can_config &rArr; can_init &rArr; can_filter_init
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit_abort
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_status_get
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_read_frame_error_code
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_read_arbitration_lost_code
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_interrupt_flag_get
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_int_flag_clr
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bf7006amxx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN_RX_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, bf7006amxx_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CAN_RX_IRQHandler &rArr; can_isr &rArr; can_receive_message
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_isr
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_interrupt_flag_get
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_int_flag_clr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bf7006amxx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN_TX_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, bf7006amxx_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_TX_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_interrupt_flag_get
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_int_flag_clr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bf7006amxx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>GPIO_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, bf7006amxx_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_IRQHandler &rArr; clr_gpio_interrupt_state
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gpio_port_interrupt_state
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clr_gpio_interrupt_state
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bf7006amxx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>ADC_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bf7006amxx_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_data_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bf7006amxx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>protothread_can</STRONG> (Thumb, 524 bytes, Stack size 32 bytes, can_protol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = protothread_can &rArr; can_send_bytes
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_clear
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_send_bytes
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_app
</UL>

<P><STRONG><a name="[31]"></a>InitSoftVer</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, can_protol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = InitSoftVer &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can_protol.o(.init_fn.6)
</UL>
<P><STRONG><a name="[69]"></a>protothread_can_test</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, can_protol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = protothread_can_test &rArr; can_send_bytes
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_send_bytes
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testmod_can_app
</UL>

<P><STRONG><a name="[6a]"></a>dash_cmd_parse</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, can_protol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = dash_cmd_parse &rArr; rain_cmd_parse
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rain_cmd_parse
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_write
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protothread_can_recv
</UL>

<P><STRONG><a name="[6e]"></a>protothread_can_recv</STRONG> (Thumb, 1638 bytes, Stack size 72 bytes, can_protol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = protothread_can_recv &rArr; save_param &rArr; eeprom_prog_Nwords
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_param
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_odo_pt
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_sector_erase
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_send_enable
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_send_bytes
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_recv_frame
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_frame_received
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dash_cmd_parse
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_app
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testmod_can_app
</UL>

<P><STRONG><a name="[75]"></a>can_app</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, can_protol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = can_app &rArr; protothread_can_recv &rArr; save_param &rArr; eeprom_prog_Nwords
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protothread_can_recv
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protothread_can
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[76]"></a>eeprom_prog_word_nowait</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, eeprom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = eeprom_prog_word_nowait
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_eeprom_idle
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_param_pt
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_odo_pt
</UL>

<P><STRONG><a name="[8e]"></a>check</STRONG> (Thumb, 50 bytes, Stack size 4 bytes, eeprom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = check
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_param
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_odo
</UL>

<P><STRONG><a name="[8b]"></a>sumx</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, eeprom.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_param_pt
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_param
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_odo
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_param
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_odo_pt
</UL>

<P><STRONG><a name="[80]"></a>logic3_app</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3f]"></a>main</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = main &rArr; canhl_loop &rArr; can_config &rArr; can_init &rArr; can_filter_init
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_app
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;din_app
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rain
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_out
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pluse_app
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logic3_app
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_init
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_app
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ain_app
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logic_app
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canhl_loop
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[7d]"></a>pluse_app</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pluse.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pluse_app &rArr; protothread_pluse &rArr; save_odo_pt &rArr; eeprom_prog_word_nowait
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protothread_pluse
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4b]"></a>GetCurAndErr</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, power_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetCurAndErr
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protothread_adc
</UL>

<P><STRONG><a name="[7b]"></a>power_out</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, power_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = power_out &rArr; protothread_out
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protothread_out
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6c]"></a>rain_cmd_parse</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, rain.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rain_cmd_parse
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dash_cmd_parse
</UL>

<P><STRONG><a name="[e0]"></a>IsResetPostion</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rain.o(.text), UNUSED)

<P><STRONG><a name="[84]"></a>protothread_rain</STRONG> (Thumb, 564 bytes, Stack size 24 bytes, rain.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = protothread_rain
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rain
</UL>

<P><STRONG><a name="[7a]"></a>rain</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rain.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rain &rArr; protothread_rain
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protothread_rain
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[87]"></a>protothread_add_smooth</STRONG> (Thumb, 164 bytes, Stack size 280 bytes, switch.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[89]"></a>protothread_in</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, switch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = protothread_in &rArr; GetKeyIn
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKeyIn
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;din_app
</UL>

<P><STRONG><a name="[8a]"></a>protothread_mod_addr_init</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, switch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = protothread_mod_addr_init &rArr; GetKeyIn
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKeyIn
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_addr_init
</UL>

<P><STRONG><a name="[79]"></a>din_app</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, switch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = din_app &rArr; protothread_in &rArr; GetKeyIn
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protothread_in
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[74]"></a>save_odo_pt</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, tsi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = save_odo_pt &rArr; eeprom_prog_word_nowait
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_sector_erase
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sumx
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_prog_word_nowait
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protothread_power
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protothread_pluse
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protothread_can_recv
</UL>

<P><STRONG><a name="[90]"></a>save_param_pt</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, param.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_sector_erase
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_eeprom_idle
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sumx
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_prog_word_nowait
</UL>

<P><STRONG><a name="[73]"></a>save_param</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, param.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = save_param &rArr; eeprom_prog_Nwords
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_sector_erase
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_prog_Nwords
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sumx
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protothread_can_recv
</UL>

<P><STRONG><a name="[91]"></a>protothread_power</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, power.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = protothread_power &rArr; save_odo_pt &rArr; eeprom_prog_word_nowait
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_odo_pt
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_app
</UL>

<P><STRONG><a name="[7c]"></a>power_app</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, power.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = power_app &rArr; protothread_power &rArr; save_odo_pt &rArr; eeprom_prog_word_nowait
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protothread_power
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[78]"></a>auto_init</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, init_section.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = auto_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e1]"></a>auto_loop</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, init_section.o(.text), UNUSED)

<P><STRONG><a name="[62]"></a>can_isr</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, canhl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = can_isr &rArr; can_receive_message
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_receive_message
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_RX_IRQHandler
</UL>

<P><STRONG><a name="[6f]"></a>can_frame_received</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, canhl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protothread_can_recv
</UL>

<P><STRONG><a name="[70]"></a>can_recv_frame</STRONG> (Thumb, 104 bytes, Stack size 12 bytes, canhl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = can_recv_frame
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protothread_can_recv
</UL>

<P><STRONG><a name="[66]"></a>can_send_bytes</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, canhl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = can_send_bytes
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protothread_can_recv
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protothread_can_test
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protothread_can
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_send_frame
</UL>

<P><STRONG><a name="[94]"></a>can_send_frame</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, canhl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_send_bytes
</UL>

<P><STRONG><a name="[72]"></a>can_send_enable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, canhl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protothread_can_recv
</UL>

<P><STRONG><a name="[95]"></a>protothread_canhl_loop</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, canhl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = protothread_canhl_loop &rArr; can_transmit_message
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_interrupt_flag_get
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_int_flag_clr
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit_request
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit_message
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canhl_loop
</UL>

<P><STRONG><a name="[7e]"></a>canhl_loop</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, canhl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = canhl_loop &rArr; can_config &rArr; can_init &rArr; can_filter_init
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_status_get
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_config
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protothread_canhl_loop
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[98]"></a>int_logic_app</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, logic5.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = int_logic_app
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logic_app
</UL>

<P><STRONG><a name="[7f]"></a>logic_app</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, logic5.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = logic_app &rArr; int_logic_app
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_logic_app
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9c]"></a>adc_interrupt_set</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, bf7006amxx_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
</UL>

<P><STRONG><a name="[e2]"></a>adc_powerdown</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bf7006amxx_adc.o(.text), UNUSED)

<P><STRONG><a name="[e3]"></a>adc_channel_enable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, bf7006amxx_adc.o(.text), UNUSED)

<P><STRONG><a name="[9b]"></a>adc_compare_config</STRONG> (Thumb, 136 bytes, Stack size 12 bytes, bf7006amxx_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = adc_compare_config
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
</UL>

<P><STRONG><a name="[9a]"></a>adc_trigger_config</STRONG> (Thumb, 108 bytes, Stack size 12 bytes, bf7006amxx_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = adc_trigger_config
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
</UL>

<P><STRONG><a name="[99]"></a>adc_init</STRONG> (Thumb, 368 bytes, Stack size 36 bytes, bf7006amxx_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = adc_init &rArr; adc_trigger_config
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_trigger_config
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_compare_config
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_interrupt_set
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peripherals_config
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_config
</UL>

<P><STRONG><a name="[e4]"></a>wait_adc_convert</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, bf7006amxx_adc.o(.text), UNUSED)

<P><STRONG><a name="[4a]"></a>adc_data_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bf7006amxx_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protothread_adc
</UL>

<P><STRONG><a name="[49]"></a>adc_start_convert</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, bf7006amxx_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protothread_adc
</UL>

<P><STRONG><a name="[e5]"></a>adc_channel_disable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bf7006amxx_adc.o(.text), UNUSED)

<P><STRONG><a name="[e6]"></a>can_int_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bf7006amxx_can.o(.text), UNUSED)

<P><STRONG><a name="[e7]"></a>can_module_rst</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bf7006amxx_can.o(.text), UNUSED)

<P><STRONG><a name="[9d]"></a>can_init</STRONG> (Thumb, 510 bytes, Stack size 48 bytes, bf7006amxx_can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = can_init &rArr; can_filter_init
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_filter_init
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peripherals_config
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_config
</UL>

<P><STRONG><a name="[93]"></a>can_receive_message</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, bf7006amxx_can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = can_receive_message
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_isr
</UL>

<P><STRONG><a name="[96]"></a>can_transmit_message</STRONG> (Thumb, 178 bytes, Stack size 8 bytes, bf7006amxx_can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = can_transmit_message
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_wait_transmit_frame
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protothread_canhl_loop
</UL>

<P><STRONG><a name="[5b]"></a>can_int_flag_clr</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bf7006amxx_can.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TX_IRQHandler
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_RX_IRQHandler
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ERR_IRQHandler
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_WAKE_IRQHandler
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protothread_canhl_loop
</UL>

<P><STRONG><a name="[97]"></a>can_transmit_request</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, bf7006amxx_can.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protothread_canhl_loop
</UL>

<P><STRONG><a name="[5a]"></a>can_interrupt_flag_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bf7006amxx_can.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TX_IRQHandler
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_RX_IRQHandler
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ERR_IRQHandler
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_WAKE_IRQHandler
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protothread_canhl_loop
</UL>

<P><STRONG><a name="[e8]"></a>can_wait_trans</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, bf7006amxx_can.o(.text), UNUSED)

<P><STRONG><a name="[5e]"></a>can_read_frame_error_code</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, bf7006amxx_can.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ERR_IRQHandler
</UL>

<P><STRONG><a name="[5f]"></a>can_read_arbitration_lost_code</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bf7006amxx_can.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ERR_IRQHandler
</UL>

<P><STRONG><a name="[60]"></a>can_transmit_abort</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bf7006amxx_can.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ERR_IRQHandler
</UL>

<P><STRONG><a name="[e9]"></a>can_sleep_config</STRONG> (Thumb, 104 bytes, Stack size 4 bytes, bf7006amxx_can.o(.text), UNUSED)

<P><STRONG><a name="[ea]"></a>can_sleep_request</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, bf7006amxx_can.o(.text), UNUSED)

<P><STRONG><a name="[eb]"></a>can_get_fifo_num</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bf7006amxx_can.o(.text), UNUSED)

<P><STRONG><a name="[ec]"></a>can_int_disable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bf7006amxx_can.o(.text), UNUSED)

<P><STRONG><a name="[61]"></a>can_status_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bf7006amxx_can.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ERR_IRQHandler
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canhl_loop
</UL>

<P><STRONG><a name="[9f]"></a>can_wait_transmit_frame</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, bf7006amxx_can.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit_message
</UL>

<P><STRONG><a name="[ed]"></a>can_get_txerrcnt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bf7006amxx_can.o(.text), UNUSED)

<P><STRONG><a name="[ee]"></a>can_get_rxerrcnt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bf7006amxx_can.o(.text), UNUSED)

<P><STRONG><a name="[a0]"></a>can_clock_sel</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, bf7006amxx_can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = can_clock_sel &rArr; xtal_init
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xtal_init
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peripherals_config
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_config
</UL>

<P><STRONG><a name="[ef]"></a>is_can_txbuf_empty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, bf7006amxx_can.o(.text), UNUSED)

<P><STRONG><a name="[f0]"></a>ecc_enable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, bf7006amxx_eflash.o(.text), UNUSED)

<P><STRONG><a name="[f1]"></a>ecc_disable</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, bf7006amxx_eflash.o(.text), UNUSED)

<P><STRONG><a name="[f2]"></a>is_flash_idle</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, bf7006amxx_eflash.o(.text), UNUSED)

<P><STRONG><a name="[f3]"></a>wait_flash_prog_erae_done</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, bf7006amxx_eflash.o(.text), UNUSED)

<P><STRONG><a name="[71]"></a>flash_sector_erase</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, bf7006amxx_eflash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protothread_can_recv
</UL>

<P><STRONG><a name="[a2]"></a>flash_Nsectors_erase</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, bf7006amxx_eflash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_clear
</UL>

<P><STRONG><a name="[f4]"></a>flash_mass_erase</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, bf7006amxx_eflash.o(.text), UNUSED)

<P><STRONG><a name="[f5]"></a>flash_prog_word</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, bf7006amxx_eflash.o(.text), UNUSED)

<P><STRONG><a name="[a3]"></a>flash_prog_Nwords</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, bf7006amxx_eflash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_clear
</UL>

<P><STRONG><a name="[f6]"></a>flash_word_get</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, bf7006amxx_eflash.o(.text), UNUSED)

<P><STRONG><a name="[f7]"></a>flash_Nwords_get</STRONG> (Thumb, 54 bytes, Stack size 4 bytes, bf7006amxx_eflash.o(.text), UNUSED)

<P><STRONG><a name="[f8]"></a>flash_protect</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, bf7006amxx_eflash.o(.text), UNUSED)

<P><STRONG><a name="[77]"></a>is_eeprom_idle</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, bf7006amxx_eflash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_param_pt
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_prog_word_nowait
</UL>

<P><STRONG><a name="[f9]"></a>wait_eeprom_prog_erae_done</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, bf7006amxx_eflash.o(.text), UNUSED)

<P><STRONG><a name="[8c]"></a>eeprom_sector_erase</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, bf7006amxx_eflash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_param_pt
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_param
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_odo
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_param
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_odo_pt
</UL>

<P><STRONG><a name="[a4]"></a>eeprom_Nsectors_erase</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, bf7006amxx_eflash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_clear
</UL>

<P><STRONG><a name="[fa]"></a>eeprom_mass_erase</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, bf7006amxx_eflash.o(.text), UNUSED)

<P><STRONG><a name="[fb]"></a>eeprom_prog_word</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, bf7006amxx_eflash.o(.text), UNUSED)

<P><STRONG><a name="[8f]"></a>eeprom_prog_Nwords</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, bf7006amxx_eflash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = eeprom_prog_Nwords
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_param
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_odo
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_param
</UL>

<P><STRONG><a name="[fc]"></a>eeprom_word_get</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, bf7006amxx_eflash.o(.text), UNUSED)

<P><STRONG><a name="[8d]"></a>eeprom_Nwords_get</STRONG> (Thumb, 58 bytes, Stack size 4 bytes, bf7006amxx_eflash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = eeprom_Nwords_get
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_param
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_odo
</UL>

<P><STRONG><a name="[fd]"></a>eeprom_protect</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, bf7006amxx_eflash.o(.text), UNUSED)

<P><STRONG><a name="[b0]"></a>gpio_init</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, bf7006amxx_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_config
</UL>

<P><STRONG><a name="[4c]"></a>gpio_bit_set</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bf7006amxx_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protothread_power
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_init
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;din_init
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKeyIn
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protothread_rain
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_out_init
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protothread_out
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ain_init
</UL>

<P><STRONG><a name="[83]"></a>gpio_bit_reset</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bf7006amxx_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protothread_power
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKeyIn
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protothread_rain
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rain_init
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protothread_out
</UL>

<P><STRONG><a name="[6d]"></a>gpio_bit_write</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, bf7006amxx_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dash_cmd_parse
</UL>

<P><STRONG><a name="[fe]"></a>gpio_port_write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bf7006amxx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[86]"></a>gpio_bit_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bf7006amxx_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKeyIn
</UL>

<P><STRONG><a name="[ff]"></a>gpio_port_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bf7006amxx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[100]"></a>gpio_toggle</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, bf7006amxx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[b1]"></a>gpio_trigge_mode</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, bf7006amxx_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_config
</UL>

<P><STRONG><a name="[b2]"></a>gpio_interrupt_set</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, bf7006amxx_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_config
</UL>

<P><STRONG><a name="[63]"></a>get_gpio_port_interrupt_state</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, bf7006amxx_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_IRQHandler
</UL>

<P><STRONG><a name="[101]"></a>get_gpio_interrupt_state</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, bf7006amxx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[64]"></a>clr_gpio_interrupt_state</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, bf7006amxx_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = clr_gpio_interrupt_state
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_IRQHandler
</UL>

<P><STRONG><a name="[4e]"></a>clr_nmi_interrupt_flag</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bf7006amxx_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>

<P><STRONG><a name="[102]"></a>nmi_init</STRONG> (Thumb, 34 bytes, Stack size 4 bytes, bf7006amxx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[103]"></a>pwm_init</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, bf7006amxx_pwm.o(.text), UNUSED)

<P><STRONG><a name="[104]"></a>pwm_mod_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bf7006amxx_pwm.o(.text), UNUSED)

<P><STRONG><a name="[105]"></a>pwm_get_count</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bf7006amxx_pwm.o(.text), UNUSED)

<P><STRONG><a name="[52]"></a>pwm_tof_clr</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bf7006amxx_pwm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_TOF_IRQHandler
</UL>

<P><STRONG><a name="[106]"></a>pwm_ch0_init</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, bf7006amxx_pwm.o(.text), UNUSED)

<P><STRONG><a name="[107]"></a>pwm_ch0_cnt_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bf7006amxx_pwm.o(.text), UNUSED)

<P><STRONG><a name="[108]"></a>pwm_ch0_get_count</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bf7006amxx_pwm.o(.text), UNUSED)

<P><STRONG><a name="[53]"></a>pwm_ch0_if_clr</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bf7006amxx_pwm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_CH0_IRQHandler
</UL>

<P><STRONG><a name="[109]"></a>pwm_ch1_init</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, bf7006amxx_pwm.o(.text), UNUSED)

<P><STRONG><a name="[10a]"></a>pwm_ch1_cnt_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bf7006amxx_pwm.o(.text), UNUSED)

<P><STRONG><a name="[10b]"></a>pwm_ch1_get_count</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bf7006amxx_pwm.o(.text), UNUSED)

<P><STRONG><a name="[54]"></a>pwm_ch1_if_clr</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bf7006amxx_pwm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_CH1_IRQHandler
</UL>

<P><STRONG><a name="[10c]"></a>pwm_ch2_init</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, bf7006amxx_pwm.o(.text), UNUSED)

<P><STRONG><a name="[10d]"></a>pwm_ch2_cnt_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bf7006amxx_pwm.o(.text), UNUSED)

<P><STRONG><a name="[10e]"></a>pwm_ch2_get_count</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bf7006amxx_pwm.o(.text), UNUSED)

<P><STRONG><a name="[55]"></a>pwm_ch2_if_clr</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bf7006amxx_pwm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_CH2_IRQHandler
</UL>

<P><STRONG><a name="[10f]"></a>pwm_ch3_init</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, bf7006amxx_pwm.o(.text), UNUSED)

<P><STRONG><a name="[110]"></a>pwm_ch3_cnt_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bf7006amxx_pwm.o(.text), UNUSED)

<P><STRONG><a name="[111]"></a>pwm_ch3_get_count</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bf7006amxx_pwm.o(.text), UNUSED)

<P><STRONG><a name="[56]"></a>pwm_ch3_if_clr</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bf7006amxx_pwm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_CH3_IRQHandler
</UL>

<P><STRONG><a name="[112]"></a>pwm_ch4_init</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, bf7006amxx_pwm.o(.text), UNUSED)

<P><STRONG><a name="[113]"></a>pwm_ch4_cnt_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bf7006amxx_pwm.o(.text), UNUSED)

<P><STRONG><a name="[114]"></a>pwm_ch4_get_count</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bf7006amxx_pwm.o(.text), UNUSED)

<P><STRONG><a name="[57]"></a>pwm_ch4_if_clr</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bf7006amxx_pwm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_CH4_IRQHandler
</UL>

<P><STRONG><a name="[115]"></a>pwm_ch5_init</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, bf7006amxx_pwm.o(.text), UNUSED)

<P><STRONG><a name="[116]"></a>pwm_ch5_cnt_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bf7006amxx_pwm.o(.text), UNUSED)

<P><STRONG><a name="[117]"></a>pwm_ch5_get_count</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bf7006amxx_pwm.o(.text), UNUSED)

<P><STRONG><a name="[58]"></a>pwm_ch5_if_clr</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bf7006amxx_pwm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_CH5_IRQHandler
</UL>

<P><STRONG><a name="[a5]"></a>rtc_init</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, bf7006amxx_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rtc_init &rArr; xtal_init
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xtal_init
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peripherals_config
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_config
</UL>

<P><STRONG><a name="[118]"></a>rtc_mod_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bf7006amxx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[119]"></a>rtc_cnt_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bf7006amxx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[11a]"></a>rtc_enable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, bf7006amxx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[11b]"></a>rtc_disable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, bf7006amxx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[11c]"></a>rtc_int_enable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, bf7006amxx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[11d]"></a>rtc_int_disable</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, bf7006amxx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[11e]"></a>rtc_int_flag_get</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, bf7006amxx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[59]"></a>rtc_int_flag_clr</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bf7006amxx_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[11f]"></a>rtc_clk_sel</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, bf7006amxx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[120]"></a>sci1_port_sel</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bf7006amxx_sysctrl.o(.text), UNUSED)

<P><STRONG><a name="[a1]"></a>xtal_init</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, bf7006amxx_sysctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xtal_init
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clk_sel
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_init
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_clock_sel
</UL>

<P><STRONG><a name="[a6]"></a>system_clk_sel</STRONG> (Thumb, 146 bytes, Stack size 20 bytes, bf7006amxx_sysctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = system_clk_sel &rArr; xtal_init
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xtal_init
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[121]"></a>xtal_sleepdeep_pd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, bf7006amxx_sysctrl.o(.text), UNUSED)

<P><STRONG><a name="[122]"></a>rc128k_pd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, bf7006amxx_sysctrl.o(.text), UNUSED)

<P><STRONG><a name="[123]"></a>clock_out</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, bf7006amxx_sysctrl.o(.text), UNUSED)

<P><STRONG><a name="[124]"></a>clock2_out</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, bf7006amxx_sysctrl.o(.text), UNUSED)

<P><STRONG><a name="[b3]"></a>system_intvector_offset</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bf7006amxx_sysctrl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[125]"></a>system_int_cfg</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, bf7006amxx_sysctrl.o(.text), UNUSED)

<P><STRONG><a name="[126]"></a>system_intflg_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bf7006amxx_sysctrl.o(.text), UNUSED)

<P><STRONG><a name="[127]"></a>system_intflg_clr</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bf7006amxx_sysctrl.o(.text), UNUSED)

<P><STRONG><a name="[128]"></a>lvdt_disable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bf7006amxx_sysctrl.o(.text), UNUSED)

<P><STRONG><a name="[129]"></a>lvdt_enable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bf7006amxx_sysctrl.o(.text), UNUSED)

<P><STRONG><a name="[b5]"></a>lvdt_init</STRONG> (Thumb, 84 bytes, Stack size 4 bytes, bf7006amxx_sysctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = lvdt_init
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[4f]"></a>lvdt_int_flag_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bf7006amxx_sysctrl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVDT_IRQHandler
</UL>

<P><STRONG><a name="[50]"></a>lvdt_int_flag_clr</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bf7006amxx_sysctrl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVDT_IRQHandler
</UL>

<P><STRONG><a name="[12a]"></a>bor_disable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bf7006amxx_sysctrl.o(.text), UNUSED)

<P><STRONG><a name="[12b]"></a>bor_filter_disable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bf7006amxx_sysctrl.o(.text), UNUSED)

<P><STRONG><a name="[12c]"></a>bor_filter_enbale</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bf7006amxx_sysctrl.o(.text), UNUSED)

<P><STRONG><a name="[12d]"></a>bor_enbale</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bf7006amxx_sysctrl.o(.text), UNUSED)

<P><STRONG><a name="[b4]"></a>bor_init</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, bf7006amxx_sysctrl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[b6]"></a>reset_filter</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, bf7006amxx_sysctrl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[12e]"></a>rst_flag_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bf7006amxx_sysctrl.o(.text), UNUSED)

<P><STRONG><a name="[12f]"></a>rst_flag_clr</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bf7006amxx_sysctrl.o(.text), UNUSED)

<P><STRONG><a name="[ad]"></a>timer_init</STRONG> (Thumb, 50 bytes, Stack size 4 bytes, bf7006amxx_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = timer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peripherals_config
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_config
</UL>

<P><STRONG><a name="[130]"></a>timer_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bf7006amxx_timer.o(.text), UNUSED)

<P><STRONG><a name="[131]"></a>timer_disable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bf7006amxx_timer.o(.text), UNUSED)

<P><STRONG><a name="[132]"></a>timer_mod_set</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bf7006amxx_timer.o(.text), UNUSED)

<P><STRONG><a name="[133]"></a>timer_cnt_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bf7006amxx_timer.o(.text), UNUSED)

<P><STRONG><a name="[51]"></a>timer_intflag_clr</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bf7006amxx_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_IRQHandler
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_IRQHandler
</UL>

<P><STRONG><a name="[134]"></a>timer_intflag_get</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, bf7006amxx_timer.o(.text), UNUSED)

<P><STRONG><a name="[67]"></a>wdt_clear</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bf7006amxx_wdt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_prog_Nwords
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protothread_mod_addr_init
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protothread_can
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_Nsectors_erase
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_prog_Nwords
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_Nsectors_erase
</UL>

<P><STRONG><a name="[135]"></a>wdt_updata</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, bf7006amxx_wdt.o(.text), UNUSED)

<P><STRONG><a name="[a9]"></a>wdt_config</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bf7006amxx_wdt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peripherals_config
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_cfg
</UL>

<P><STRONG><a name="[aa]"></a>wdt_overflow_count</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bf7006amxx_wdt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peripherals_config
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_cfg
</UL>

<P><STRONG><a name="[ab]"></a>wdt_overflow_count_win</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bf7006amxx_wdt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peripherals_config
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_cfg
</UL>

<P><STRONG><a name="[5d]"></a>can_config</STRONG> (Thumb, 80 bytes, Stack size 72 bytes, bf7006amxx_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = can_config &rArr; can_init &rArr; can_filter_init
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_clock_sel
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ERR_IRQHandler
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_ReInit
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canhl_loop
</UL>

<P><STRONG><a name="[a7]"></a>adc_config</STRONG> (Thumb, 34 bytes, Stack size 40 bytes, bf7006amxx_config.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
</UL>

<P><STRONG><a name="[136]"></a>pwm_config</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bf7006amxx_config.o(.text), UNUSED)

<P><STRONG><a name="[a8]"></a>wdt_cfg</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, bf7006amxx_config.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_overflow_count_win
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_overflow_count
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_config
</UL>

<P><STRONG><a name="[ac]"></a>timer_config</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, bf7006amxx_config.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
</UL>

<P><STRONG><a name="[ae]"></a>rtc_config</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, bf7006amxx_config.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_init
</UL>

<P><STRONG><a name="[af]"></a>gpio_config</STRONG> (Thumb, 326 bytes, Stack size 8 bytes, bf7006amxx_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gpio_config
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_interrupt_set
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_trigge_mode
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peripherals_config
</UL>

<P><STRONG><a name="[92]"></a>peripherals_config</STRONG> (Thumb, 168 bytes, Stack size 72 bytes, bf7006amxx_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = peripherals_config &rArr; can_init &rArr; can_filter_init
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_config
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_overflow_count_win
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_overflow_count
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_config
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_init
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_clock_sel
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_init
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_board_start
</UL>

<P><STRONG><a name="[5]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_bf7006amxx.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> startup_bf7006amxx.o(RESETORGIN)
<LI> startup_bf7006amxx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>SCI0_ERR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_bf7006amxx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCI0_ERR_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCI0_ERR_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bf7006amxx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>SCI0_RX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_bf7006amxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_bf7006amxx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>SCI0_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_bf7006amxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_bf7006amxx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>SCI1_ERR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_bf7006amxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_bf7006amxx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>SCI1_RX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_bf7006amxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_bf7006amxx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>SCI1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_bf7006amxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_bf7006amxx.o(RESET)
</UL>
<P><STRONG><a name="[b8]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_bf7006amxx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[137]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, system_bf7006amxx.o(.text), UNUSED)

<P><STRONG><a name="[23]"></a>SystemInit</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, system_bf7006amxx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SystemInit &rArr; system_clk_sel &rArr; xtal_init
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_filter
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bor_init
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lvdt_init
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_intvector_offset
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clk_sel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bf7006amxx.o(.text)
</UL>
<P><STRONG><a name="[6b]"></a>strstr</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_out_init
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dash_cmd_parse
</UL>

<P><STRONG><a name="[138]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_sdivfast.o(.text), UNUSED)

<P><STRONG><a name="[46]"></a>__aeabi_uidivmod</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, aeabi_sdivfast.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protothread_pluse
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protothread_can
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protothread_adc
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avargeG
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avargeF
</UL>

<P><STRONG><a name="[139]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, aeabi_sdivfast.o(.text), UNUSED)

<P><STRONG><a name="[68]"></a>__aeabi_idivmod</STRONG> (Thumb, 460 bytes, Stack size 8 bytes, aeabi_sdivfast.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSoftVer
</UL>

<P><STRONG><a name="[13a]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[13b]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[13c]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[3b]"></a>__user_setup_stackheap</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[40]"></a>exit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[13d]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[b7]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[13e]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[44]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[13f]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[140]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[141]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[142]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[143]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[2c]"></a>ain_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ain_init
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adc.o(.init_fn.4)
</UL>
<P><STRONG><a name="[2d]"></a>can_app_init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, can_protol.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> can_protol.o(.init_fn.4)
</UL>
<P><STRONG><a name="[32]"></a>testmod_can_app</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, can_protol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = testmod_can_app &rArr; protothread_can_recv &rArr; save_param &rArr; eeprom_prog_Nwords
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protothread_can_recv
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protothread_can_test
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can_protol.o(.init_fn.6)
</UL>
<P><STRONG><a name="[81]"></a>protothread_pluse</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, pluse.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = protothread_pluse &rArr; save_odo_pt &rArr; eeprom_prog_word_nowait
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_odo_pt
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pluse_app
</UL>

<P><STRONG><a name="[2e]"></a>pluse_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, pluse.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> pluse.o(.init_fn.4)
</UL>
<P><STRONG><a name="[82]"></a>protothread_out</STRONG> (Thumb, 406 bytes, Stack size 24 bytes, power_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = protothread_out
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_out
</UL>

<P><STRONG><a name="[33]"></a>power_out_init</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, power_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = power_out_init &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> power_out.o(.init_fn.6)
</UL>
<P><STRONG><a name="[28]"></a>rain_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, rain.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rain_init
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rain.o(.init_fn.2)
</UL>
<P><STRONG><a name="[85]"></a>GetKeyIn</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, switch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GetKeyIn
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_get
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protothread_mod_addr_init
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protothread_in
</UL>

<P><STRONG><a name="[2f]"></a>din_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, switch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = din_init
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> switch.o(.init_fn.4)
</UL>
<P><STRONG><a name="[30]"></a>mod_addr_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, switch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mod_addr_init &rArr; protothread_mod_addr_init &rArr; GetKeyIn
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protothread_mod_addr_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> switch.o(.init_fn.5)
</UL>
<P><STRONG><a name="[29]"></a>init_odo</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, tsi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = init_odo &rArr; eeprom_prog_Nwords
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_sector_erase
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_prog_Nwords
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_Nwords_get
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sumx
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tsi.o(.init_fn.3)
</UL>
<P><STRONG><a name="[2a]"></a>init_param</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, param.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = init_param &rArr; eeprom_prog_Nwords
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_sector_erase
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_prog_Nwords
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_Nwords_get
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sumx
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> param.o(.init_fn.3)
</UL>
<P><STRONG><a name="[27]"></a>power_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, power.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = power_init
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> power.o(.init_fn.1)
</UL>
<P><STRONG><a name="[25]"></a>init_start</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_section.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> init_section.o(.init_fn.0)
</UL>
<P><STRONG><a name="[26]"></a>init_board_start</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, init_section.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = init_board_start &rArr; peripherals_config &rArr; can_init &rArr; can_filter_init
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peripherals_config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> init_section.o(.init_fn.0.end)
</UL>
<P><STRONG><a name="[2b]"></a>init_board_end</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, init_section.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> init_section.o(.init_fn.3.end)
</UL>
<P><STRONG><a name="[34]"></a>init_app_end</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_section.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> init_section.o(.init_fn.6.end)
</UL>
<P><STRONG><a name="[35]"></a>app_end</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_section.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> init_section.o(.init_fn.7.end)
</UL>
<P><STRONG><a name="[9e]"></a>can_filter_init</STRONG> (Thumb, 872 bytes, Stack size 32 bytes, bf7006amxx_can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = can_filter_init
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_init
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[b9]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<HR></body></html>

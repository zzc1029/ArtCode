C51 COMPILER V9.00   SERIAL                                                                12/13/2022 09:00:38 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE SERIAL
OBJECT MODULE PLACED IN .\Object\serial.obj
COMPILER INVOKED BY: F:\工作软件\Keil\C51\BIN\C51.EXE ..\tw_lib\drivers\serial.c LARGE OMF2 BROWSE INCDIR(.\IncludeFile;
                    -..\tw_lib\sys;..\tw_lib\drivers;.\resource;.\i51) DEFINE(T123AI) DEBUG PRINT(.\List\serial.lst) OBJECT(.\Object\serial.o
                    -bj)

line level    source

   1          /**
   2           *  @file   serial.c
   3           *  @brief  serial driver for hellen
   4           *  $Id: serial.c,v 1.10 2013/06/17 04:08:18 ken Exp $
   5           *  $Author: ken $
   6           *  $Revision: 1.10 $
   7           *
   8           *  Copyright (c) 2011 Terawins Inc. All rights reserved.
   9           *
  10           *  @date   2011/08/12  ken     New file.
  11           *
  12           */
  13          
  14          #include <reg51.h>
  15          #include "sys.h"
  16          #include "reg_tw.h"
  17          #include "tw_irq.h"
  18          #include "iccontrol.h"
  19          #include "serial.h"
  20          #include "config.h"
  21          #include "uart.h"
  22          
  23          
  24          extern unsigned char xdata CONFIG_REGS[];
  25          
  26          /* USE EXTERNAL UART */
  27          static unsigned char xdata *UART_BASE = &CONFIG_REGS[0x400];
  28          static unsigned char xdata *UART1_BASE = &CONFIG_REGS[0x500];
  29          
  30          //#define UART_BUFF_SIZE    10
  31          unsigned char uqueue[UART_BUFF_SIZE];
  32          unsigned char ufront = UART_BUFF_SIZE - 1;
  33          unsigned char urear = UART_BUFF_SIZE - 1;
  34          unsigned char rev_buf[REC_BUFF_SIZE];
  35          //bit UART1_OK_FLAG = 0;
  36          
  37          #ifdef I2C_DEBUG_MODE
                  unsigned char i2c_count = 0x00;
              #endif
  40          
  41          #define UART_RBR            (0x00)
  42          #define UART_THR            (0x00)
  43          #define UART_DLL            (0x00)
  44          #define UART_DLH            (0x04)
  45          #define UART_FCR            (0x08)
  46          #define UART_LCR            (0x0c)
  47          #define UART_MCR            (0x10)
  48          #define UART_LSR            (0x14)
  49          #define UART_SCR            (0x1c)
  50          #define UART_IER            (0x04)
  51          #define UART_SWR            (0x88)
  52          #define MAX_FIFO            60
  53          #define CONFIG_APB_CLK      27000000L
C51 COMPILER V9.00   SERIAL                                                                12/13/2022 09:00:38 PAGE 2   

  54          
  55          #ifdef  HW_UART_BAUD
  56              #define UART_CLKDIV         ((CONFIG_APB_CLK+(HW_UART_BAUD*8))/(HW_UART_BAUD*16))
  57          #else
                  #define UART_BAUD           38400L
                  #define UART_CLKDIV         ((CONFIG_APB_CLK+(UART_BAUD*8))/(UART_BAUD*16))
              #endif
  61          
  62          #ifdef  HW_UART1_BAUD
                  #define UART1_CLKDIV        ((CONFIG_APB_CLK+(HW_UART1_BAUD*8))/(HW_UART1_BAUD*16))
              #else
  65              #define UART1_BAUD           38400L
  66              #define UART1_CLKDIV        ((CONFIG_APB_CLK+(UART1_BAUD*8))/(UART1_BAUD*16))
  67          #endif
  68          /* APB: 27Mhz, UART baud rate: 19200, UART_CLKDIV: 88 */
  69          
  70          
  71          #ifdef FIFO
                  static unsigned char fifo[MAX_FIFO];
                  static unsigned char qf = 0;
                  static unsigned char qt = 0;
              #endif
  76          /*
  77           * 摘要 :void serial_init_tw(void)
  78           *
  79           * 描述 :uart 0 初始化
  80           *
  81           * 参数 :无
  82           *
  83           * 回传值 : 无
  84           *
  85           * 注意 : 无
  86          */
  87          void serial_init_tw (void)
  88          {
  89   1          UART_BASE[UART_SWR] = 0x07;//software reset
  90   1          UART_BASE[UART_LCR] = 0x83;
  91   1          UART_BASE[UART_DLH] = (UART_CLKDIV >> 8);
  92   1          UART_BASE[UART_DLL] = (UART_CLKDIV & 0xff);
  93   1          UART_BASE[UART_LCR] = 3;    // N-8-1
  94   1          UART_BASE[UART_FCR] = 0xC1;
  95   1          UART_BASE[UART_IER] = 1;
  96   1      }
  97          /*
  98           * 摘要 :void serial_interrupt(void)
  99           *
 100           * 描述 :uart 0 中断开启
 101           *
 102           * 参数 :无
 103           *
 104           * 回传值 :无
 105           *
 106           * 注意 : 无
 107          */
 108          void serial_interrupt (void)
 109          {
 110   1          UART_BASE[UART_FCR] = 0xC7;
 111   1          UART_BASE[UART_IER] = 1;
 112   1      
 113   1          enable_tw_irq (IRQ_UART0_INT);
 114   1      }
 115          /*
C51 COMPILER V9.00   SERIAL                                                                12/13/2022 09:00:38 PAGE 3   

 116           * 摘要 :void serial1_init_tw(void)
 117           *
 118           * 描述 :uart 1 初始化
 119           *
 120           * 参数 :无
 121           *
 122           * 回传值 : 无
 123           *
 124           * 注意 : 无
 125          */
 126          #if 1
 127          void serial1_init_tw (void)
 128          {
 129   1          UART1_BASE[UART_SWR] = 0x07;//software reset
 130   1          UART1_BASE[UART_LCR] = 0x83;
 131   1          UART1_BASE[UART_DLH] = (UART1_CLKDIV >> 8);
 132   1          UART1_BASE[UART_DLL] = (UART1_CLKDIV & 0xff);
 133   1          UART1_BASE[UART_LCR] = 3;   // N-8-1
 134   1          #ifdef ENABLE_UART1_AFC
                  UART1_BASE[UART_MCR] = 0x20;
                  #endif
 137   1          UART1_BASE[UART_FCR] = 0xC1;
 138   1          UART1_BASE[UART_IER] = 1;
 139   1      }
 140          /*
 141           * 摘要 :void serial1_interrupt(void)
 142           *
 143           * 描述 :uart 1 中断开启
 144           *
 145           * 参数 :无
 146           *
 147           * 回传值 :无
 148           *
 149           * 注意 : 无
 150          */
 151          void serial1_interrupt (void)
 152          {
 153   1          UART1_BASE[UART_FCR] = 0xC7;
 154   1          UART1_BASE[UART_IER] = 1;
 155   1      
 156   1          enable_tw_irq (IRQ_UART1_INT);
 157   1      }
 158          
 159          #endif
 160          
 161          #if 0
              char putc_t (char a0)
              {
                  unsigned short k1;
              
                  if (UART_BASE[UART_SCR] == 0)
                  {
                      k1 = 200;
                  }
                  else
                  {
                      k1 = 6000;
                  }
              
                  while (1)
                  {
                      k1--;
C51 COMPILER V9.00   SERIAL                                                                12/13/2022 09:00:38 PAGE 4   

                      if (k1 == 0)
                      {
                          goto EXIT;
                      }
              
                      if (UART_BASE[UART_LSR] & 0x40 == 0)
                      {
                          continue;
                      }
              
                      UART_BASE[UART_THR] = a0;
                      return 0;
                  }
              
              EXIT:
                  UART_BASE[UART_SCR] = 1;                    // mark timeout
                  UART_BASE[UART_THR] = a0;
                  return 0;
              }
              
              char puts_t (char *s0)
              {
                  char *idx = s0;
                  while (* (idx))
                  {
                      putc_t (*idx);
                      idx++;
                  }
              
                  return 0;
              }
              #endif
 210          /*
 211           * 摘要 :static void fill_fifo(void)
 212           *
 213           * 描述 :uart 使用fifo buffer
 214           *
 215           * 参数 :无
 216           *
 217           * 回传值 :无
 218           *
 219           * 注意 : 无
 220          */
 221          #ifdef FIFO
              static void fill_fifo (void)
              {
                  unsigned char xdata q;
                  q = qf + 1;
              
                  if (q > MAX_FIFO)
                  {
                      q = 0;
                  }
              
                  while (q != qt && UART_BASE[UART_LSR] & 0x01)
                  {
                      fifo[qf] = UART_BASE[UART_RBR];
                      qf = q;
              
                      q++;
                      if (q >= MAX_FIFO)
                      {
C51 COMPILER V9.00   SERIAL                                                                12/13/2022 09:00:38 PAGE 5   

                          q = 0;
                      }
                  }
              }
              #endif
 245          /*
 246           * 摘要 :void putb2_t(const char c)
 247           *
 248           * 描述 :uart 0 输出一个byte
 249           *
 250           * 参数 :无
 251           *
 252           * 回传值 :无
 253           *
 254           * 注意 : 无
 255          */
 256          void putb2_t (const char c)
 257          {
 258   1          unsigned char i;
 259   1          //EA=0;
 260   1          for (i = 0; i < 255; i++)
 261   1          {
 262   2              if (UART_BASE[UART_LSR] & 0x40)
 263   2              {
 264   3                  break;
 265   3              }
 266   2              #ifdef FIFO
                      fill_fifo();
                      #endif
 269   2          }
 270   1      
 271   1          UART_BASE[UART_THR] = c;
 272   1          //EA=1;
 273   1      }
 274          /*
 275           * 摘要 :void put1b_t(unsigned char c)
 276           *
 277           * 描述 :uart 1 输出一个byte
 278           *
 279           * 参数 :无
 280           *
 281           * 回传值 :无
 282           *
 283           * 注意 : 无
 284          */
 285          void put1b_t (unsigned char c)
 286          {
 287   1          unsigned char i;
 288   1      
 289   1          for (i = 0; i < 255; i++)
 290   1          {
 291   2              if (UART1_BASE[UART_LSR] & 0x40)
 292   2              {
 293   3                  break;
 294   3              }
 295   2          }
 296   1      
 297   1          UART1_BASE[UART_THR] = c;
 298   1      
 299   1      }
 300          /*
 301           * 摘要 :void putb_t(const char c)
C51 COMPILER V9.00   SERIAL                                                                12/13/2022 09:00:38 PAGE 6   

 302           *
 303           * 描述 :uart输出一个字元
 304           *
 305           * 参数 :const char c=>要输出的字元
 306           *
 307           * 回传值 :无
 308           *
 309           * 注意 : 无
 310          */
 311          #ifndef I2C_DEBUG_MODE
 312          void putb_t (const char c)
 313          {
 314   1          if (c == '\n')
 315   1          {
 316   2              putb2_t ('\r');
 317   2          }
 318   1      
 319   1          putb2_t (c);
 320   1      }
 321          #endif
 322          /*
 323           * 摘要 :void putb_t(const char c)
 324           *
 325           * 描述 :i2c debug使用
 326           *
 327           * 参数 :const char c=>要输出的字元
 328           *
 329           * 回传值 :无
 330           *
 331           * 注意 : 须搭配额外软体
 332          */
 333          #ifdef  I2C_DEBUG_MODE
              void putb_t (const char c)
              {
                  if (i2c_count == 0x00)
                  {
                      IC_WritByte (TWIC_P1, 0xE0 + i2c_count, 0x80);
                  }
                  i2c_count++;
                  if (i2c_count >= 16)
                  {
              
                  }
                  else if (c == '\n')
                  {
                      IC_WritByte (TWIC_P1, (0xE0 + i2c_count), '\r');
                      IC_WritByte (TWIC_P1, (0xE0 + i2c_count + 1), '\n');
                      IC_WritByte (TWIC_P1, (0xE0 + i2c_count + 2), 0);
                  }
                  else
                  {
                      IC_WritByte (TWIC_P1, 0xE0 + i2c_count, c);
                  }
              }
              #endif
 357          /*
 358           * 摘要 :char getb2_t(void)
 359           *
 360           * 描述 :轮询取得uart所传的资料
 361           *
 362           * 参数 :无
 363           *
C51 COMPILER V9.00   SERIAL                                                                12/13/2022 09:00:38 PAGE 7   

 364           * 回传值 :-1 => 无资料 c=>uart所取得的字元
 365           *
 366           * 注意 : 无
 367          */
 368          char getb2_t (void)
 369          {
 370   1          #ifdef FIFO
                  char xdata c;
                  fill_fifo();
                  if (qt == qf)
                  {
                      return -1;
                  }
              
                  c = fifo[qt];
                  qt++;
                  if (qt > MAX_FIFO)
                  {
                      qt = 0;
                  }
              
                  return c;
                  #else
 387   1          if (UART_BASE[UART_LSR] & 0x01)
 388   1          {
 389   2              return UART_BASE[UART_RBR];
 390   2          }
 391   1      
 392   1          return -1;
 393   1          #endif
 394   1      }
 395          /*
 396           * 摘要 :char getb_t(void)
 397           *
 398           * 描述 :轮询取得uart所传得资料
 399           *
 400           * 参数 :无
 401           *
 402           * 回传值 :回传uart得到的资料
 403           *
 404           * 注意 : 无
 405          */
 406          char getb_t (void)
 407          {
 408   1          char xdata c;
 409   1          while (1)
 410   1          {
 411   2              c = getb2_t();
 412   2              if (c >= 0)
 413   2              {
 414   3                  break;
 415   3              }
 416   2          }
 417   1          return c;
 418   1      }
 419          
 420          
 421          /*
 422           * 摘要 :void getuart(void)
 423           *
 424           * 描述 :uart0 将uart中断的资料储存到 buffer内
 425           *
C51 COMPILER V9.00   SERIAL                                                                12/13/2022 09:00:38 PAGE 8   

 426           * 参数 :无
 427           *
 428           * 回传值 :无
 429           *
 430           * 注意 : 无
 431          */
 432          void getuart (void)
 433          {
 434   1          unsigned char a = 0x00;
 435   1          unsigned char count = 0x00;
 436   1          while (UART_BASE[0x14] & 0x01)
 437   1          {
 438   2              a = UART_BASE[0x00];
 439   2      
 440   2              count++;
 441   2              if (count == 0)
 442   2              {
 443   3                  break;
 444   3              }
 445   2          }
 446   1          clear_tw_irq (IRQ_UART0_INT);
 447   1      }
 448          
 449          /*
 450           * 摘要 :void getuart1(void)
 451           *
 452           * 描述 :uart1 将uart中断的资料储存到 buffer内
 453           *
 454           * 参数 :无
 455           *
 456           * 回传值 :无
 457           *
 458           * 注意 : 无
 459          */
 460          void getuart1 (void)
 461          {
 462   1              unsigned char a;
 463   1              unsigned char count = 0;
 464   1              unsigned char temp = 0;
 465   1          while (UART1_BASE[0x14] & 0x01)
 466   1          {
 467   2              a = UART1_BASE[0x00];
 468   2                      
 469   2                      temp = urear + 1;
 470   2                      if (temp >= UART_BUFF_SIZE)
 471   2                      {
 472   3                              temp = 0;
 473   3                      }
 474   2      
 475   2              if (temp != ufront)
 476   2              {            
 477   3                  uqueue[temp] = a;
 478   3                              urear = temp;
 479   3              }
 480   2      
 481   2              count++;
 482   2              if (count == 0)
 483   2              {
 484   3                  break;
 485   3              }
 486   2          }
 487   1          clear_tw_irq (IRQ_UART1_INT);
C51 COMPILER V9.00   SERIAL                                                                12/13/2022 09:00:38 PAGE 9   

 488   1      }
 489          
 490          /*
 491           * 摘要 :unsigned char uartevent(unsigned char *value)
 492           *
 493           * 描述 :将uart buffer内的资料取出
 494           *
 495           * 参数 :unsigned char *value =>资料会给到这个指标
 496           *
 497           * 回传值 :0=>没资料 1=>有资料
 498           *
 499           * 注意 : 无
 500          */
 501          unsigned char uartevent (unsigned char *value)
 502          {
 503   1          unsigned char index;
 504   1          if (ufront == urear)
 505   1          {
 506   2              return 0;
 507   2          }
 508   1          else
 509   1          {
 510   2              index = ufront + 1;
 511   2              if (index >= UART_BUFF_SIZE)
 512   2              {
 513   3                  index = 0;
 514   3              }
 515   2      
 516   2              *value = uqueue[index];
 517   2              ufront = index;
 518   2      
 519   2              return 1;
 520   2          }
 521   1      }
 522          
 523          /******************************************************************************
 524          *
 525          * serial_init - initialize a channel
 526          *
 527          * set the selected baud rate and use timer1.
 528          *
 529          * RETURNS: N/A
 530          */
 531          
 532          /*
 533           * 摘要 :void serial_init (void)
 534           *
 535           * 描述 :uart 0 and uart1 初始化
 536           *
 537           * 参数 :无
 538           *
 539           * 回传值 :无
 540           *
 541           * 注意 : 无
 542          */
 543          void serial_init (void)
 544          {
 545   1          /* USE EXTERNAL UART */
 546   1          // use UART0
 547   1          serial_init_tw();
 548   1          // use UART1
 549   1          serial1_init_tw();
C51 COMPILER V9.00   SERIAL                                                                12/13/2022 09:00:38 PAGE 10  

 550   1          // select external UART
 551   1          IC_WritByte (TWIC_P1, 0xFD, 0x01);
 552   1          // enable all io pads
 553   1          IC_WritByte (TWIC_P0, PW_MGRCTRL_REG, (IC_ReadByte (TWIC_P0, PW_MGRCTRL_REG) | PWRDN_TOTALPAD));
 554   1          // select UART0 RS232RX/RS232TX pin function
 555   1          IC_WritByte (TWIC_P1, PIN_FUNCTION_REG, ((IC_ReadByte (TWIC_P1, PIN_FUNCTION_REG) & (~UART0_MASK)) | U
             -ART0_EN));
 556   1          // select UART1 RS232RX/RS232TX pin function
 557   1          IC_WritByte (TWIC_P1, PIN_FUNCTION_REG, (IC_ReadByte (TWIC_P1, PIN_FUNCTION_REG) | UART1_EN));
 558   1          #ifdef ENABLE_UART1_AFC
                  // select UART1 flow control RTS/CTS pin function
                  IC_WritByte (TWIC_P1, PIN_FUNCTION_REG, ((IC_ReadByte (TWIC_P1, PIN_FUNCTION_REG) & (~RLUD_CPUINT_MASK
             -)) | RS232_AFC_EN));
                  #endif
 562   1          IC_WritByte (TWIC_P0, 0xE0, 0x98); // enable all io pads
 563   1      }
 564          /*
 565           * 摘要 :void set_baudrate0(unsigned long baudrate)
 566           *
 567           * 描述 :uart 0 设定 baudrate
 568           *
 569           * 参数 :unsigned long baudrate => 设定baudrate 的值
 570           *
 571           * 回传值 :无
 572           *
 573           * 注意 : 无
 574          */
 575          void set_baudrate0 (unsigned long baudrate)
 576          {
 577   1          unsigned short uart_clock = 0x00;
 578   1          uart_clock = ((CONFIG_APB_CLK + (baudrate * 8)) / (baudrate * 16));
 579   1          UART_BASE[UART_LCR] = 0x83;
 580   1          UART_BASE[UART_DLH] = (uart_clock >> 8);
 581   1          UART_BASE[UART_DLL] = (uart_clock & 0xff);
 582   1          UART_BASE[UART_LCR] = 3;    // N-8-1
 583   1          UART_BASE[UART_FCR] = 0xC1;
 584   1          UART_BASE[UART_IER] = 1;
 585   1      }
 586          /*
 587           * 摘要 :void set_baudrate1(unsigned long baudrate)
 588           *
 589           * 描述 :uart 1 设定 baudrate
 590           *
 591           * 参数 :unsigned long baudrate => 设定baudrate 的值
 592           *
 593           * 回传值 :无
 594           *
 595           * 注意 : 无
 596          */
 597          void set_baudrate1 (unsigned long baudrate)
 598          {
 599   1          unsigned short uart_clock = 0x00;
 600   1          uart_clock = ((CONFIG_APB_CLK + (baudrate * 8)) / (baudrate * 16));
 601   1          UART1_BASE[UART_LCR] = 0x83;
 602   1          UART1_BASE[UART_DLH] = (uart_clock >> 8);
 603   1          UART1_BASE[UART_DLL] = (uart_clock & 0xff);
 604   1          UART1_BASE[UART_LCR] = 3;   // N-8-1
 605   1          UART1_BASE[UART_FCR] = 0xC1;
 606   1          UART1_BASE[UART_IER] = 1;
 607   1      }
 608          /************************************************************************
 609          * 串口发送
C51 COMPILER V9.00   SERIAL                                                                12/13/2022 09:00:38 PAGE 11  

 610          ************************************************************************/
 611          void check_uart1_data (unsigned char uart1data)
 612          {
 613   1          unsigned char uart1sum;
 614   1          unsigned char i;
 615   1          rev_buf[0] = rev_buf[1];
 616   1          rev_buf[1] = rev_buf[2];
 617   1          rev_buf[2] = rev_buf[3];
 618   1          rev_buf[3] = rev_buf[4];
 619   1          rev_buf[4] = rev_buf[5];
 620   1          rev_buf[5] = rev_buf[6];
 621   1          rev_buf[6] = rev_buf[7];
 622   1          rev_buf[7] = rev_buf[8];
 623   1          rev_buf[8] = rev_buf[9];
 624   1          rev_buf[9] = rev_buf[10];
 625   1          rev_buf[10] = rev_buf[11];
 626   1          rev_buf[11] = uart1data;
 627   1          if (rev_buf[0] == 0xaa)
 628   1          {
 629   2              uart1sum = 0;
 630   2              for (i = 1; i < 11; i++)
 631   2              {
 632   3                  uart1sum = (uart1sum + rev_buf[i]) & 0xff;
 633   3              }
 634   2              if (uart1sum == 0xaa)
 635   2              {
 636   3                  uart1sum = 0x55;
 637   3              }
 638   2              if (uart1sum == rev_buf[11])
 639   2              {
 640   3                  uart1_rev_data();
 641   3                  put_uart1_timer_event();
 642   3              }
 643   2          }
 644   1      }
 645          
 646          void put_uart1_timer_event (void)
 647          {
 648   1          put1b_t (0xaa);
 649   1          put1b_t (0x4f);
 650   1          put1b_t (0x4b);
 651   1          put1b_t (0x9a);
 652   1      }
 653          
 654          void put_uart1_key_event (void)
 655          {
 656   1          put1b_t (0xaa);
 657   1          put1b_t (0x6f);
 658   1          put1b_t (0x6b);
 659   1          put1b_t (0xda);
 660   1      }
 661          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1185    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     66       8
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
C51 COMPILER V9.00   SERIAL                                                                12/13/2022 09:00:38 PAGE 12  

   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
